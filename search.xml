<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ｊava入门之接口</title>
      <link href="/posts/47531.html"/>
      <url>/posts/47531.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的接口的知识点</p><a id="more"></a><p>﻿## 1.接口的基本知识</p><p>1.接口的定义：Java接口是抽象方法的集合。<br>2.接口的基本语法：<br>访问权限控制符 interface 接口名 [extends  接口列表] {<br>​    常量;<br>​    抽象方法；<br>​    内部类；<br>}</p><pre><code>public interface IIMammal {double PI =3.14; void eat(); }</code></pre><h2 id="2-接口的特点"><a href="#2-接口的特点" class="headerlink" title="2.接口的特点"></a>2.接口的特点</h2><p>1.接口内只能包含抽象类，静态常量（public static final），内部类。<br>2.接口内的抽象方法必须为public访问权限。<br>3.接口没有构造方法，不能创建自己的对象，但是可以引用实现类的对象。<br>##3.接口的继承及特点<br>1.继承：通过extends关键字可以使自定义的接口实现继承。<br>2.特点：接口只能继承父接口，不能继承抽象类和普通类。<br>3.使用：接口弥补了Java单一继承的缺点(Java中的类只能继承一个父类)，即接口可以继承多个父接口，它们之间用英文逗号隔开。</p><pre><code>  public interface IMammal extends List,Set{//接口可以继承多个接口      double PI =3.14;//接口中的属性必为public static final型属性（在不同包的static方法中调用，不能二次赋值）      public abstract void eat();//jdk7以前接口只存在抽象方法，jdk8可以存在静态方法，      void move();//接口中的方法可以省略public abstract，但是只为public型}</code></pre><h2 id="4-接口的实现"><a href="#4-接口的实现" class="headerlink" title="4.接口的实现"></a>4.接口的实现</h2><p>1）类通过implements关键字实现接口，Java中的类只能是单继承，但却可以实现多个接口以弥补Java类单继承的不足。<br>2）语法：访问控制符  修饰符  class  类名  implements  接口1  [,接口2, ……] {<br>​        变量;<br>​        方法;<br>​    }</p><blockquote><p>注：在类中实现接口时，实现类中方法的名字、返回值类型、参数的个数及参数数据类型必须与接口中的对应的抽象方法完全一致。（重写）</p></blockquote><h2 id="5-接口实现的特点"><a href="#5-接口实现的特点" class="headerlink" title="5.接口实现的特点"></a>5.接口实现的特点</h2><p>1.如果一个类实现了一个接口，但没有实现接口中的所有抽象方法，那么这个类必须是abstract类。<br>2.如果多个接口中定义了相同的抽象方法，则在实现类中只实现其中一个即可。</p><h2 id="6-接口回调"><a href="#6-接口回调" class="headerlink" title="6.接口回调"></a>6.接口回调</h2><p>接口回调描述的是一种现象：接口声明的变量指向其实现类实例化的对象，那么该接口变量就可以调用接口中的抽象方法。</p><h2 id="7-接口实现类的特点"><a href="#7-接口实现类的特点" class="headerlink" title="7.接口实现类的特点"></a>7.接口实现类的特点</h2><p>1）接口实现类可以直接使用接口中的常量。<br>2）接口实现类所实现的多个接口中有常量名相同的常量，则在实现类中不能直接使用，必须使用类名来确定到底调用哪个接口中的常量。  </p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IIMammal</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//父类接口</span>        <span class="token keyword">double</span> PI <span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMammal</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//抽象父类</span>        <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">4.35</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2.接口中可以有static静态方法</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//java8及以上版本的特性</span>        <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">class</span>  <span class="token class-name">Whale</span> <span class="token keyword">implements</span> <span class="token class-name">IMammal</span><span class="token punctuation">,</span>IIMammal <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鲸鱼用鳍游泳。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//接口回调是接口中的多态</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            IMammal mammal<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Whale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mammal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接口回调</span>            <span class="token comment" spellcheck="true">//实现类可以直接调用接口中的全局常量</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>IMammal<span class="token punctuation">.</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当多个接口的实现类，多个接口中有变量名相同的变量，在实现类中调用接口常量时，需指明哪一个接口中的变量。</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="8-java8后接口的语法变化"><a href="#8-java8后接口的语法变化" class="headerlink" title="8.java8后接口的语法变化"></a>8.java8后接口的语法变化</h2><p>1）Java8以前版本中规定，接口中所定义的方法只能是抽象方法，从Java8开始，接口中可以添加一个或多个由default关键字修饰的非抽象方法，该方法又称为扩展方法，该默认方法将由接口实现类创建的对象来调用。<br>2）同样，从Java8开始，接口中可以添加一个或多个由static关键字修饰的非抽象方法，该方法将由接口或其实现类直接调用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之线程的基本概念和运用</title>
      <link href="/posts/24946.html"/>
      <url>/posts/24946.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的基本概念和运用</p><a id="more"></a><h3 id="线程与进程的基本概念"><a href="#线程与进程的基本概念" class="headerlink" title="线程与进程的基本概念"></a>线程与进程的基本概念</h3><ol><li>进程：进程（process）指一个程序的一次执行过程。</li><li>线程：线程（thread）又称为轻量级进程，线程是一个程序中实现单一功能的一个指令序列，是一个程序的单个执行流，存在于进程中，是一个进程的一部分。</li><li>线程与进程的异同：<ol><li>一个进程可以包含多个线程，而一个线程必须在一个进程之内运行；同一进程中的多个线程之间采用<strong>抢占式</strong>独立运行。</li><li>线程有<strong>独立的执行堆栈、程序计数器和局部变量</strong>；但是没有独立的存储空间，而是和所属进程中的其它线程共享存储空间。</li><li>操作系统将进程作为分配资源的<strong>基本单位</strong>，而把线程作为独立运行和独立调度的基本单位，由于线程比进程更小，基本上不拥有系统资源，故对它的调度所付出的开销就会小得多，能更高效的提高系统多个程序间并发执行的速度。<blockquote><p>注： 1. 抢占式的释义：CPU在同一时间只能执行一个线程，所以多个线程会争夺CPU的运行机会。（并不会根据程序中线程编写的先后秩序执行）。</p><ol start="2"><li>程序计数器的释义：由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器以记住当前线程所执行的字节码的行号，各条线程之间的计数器互不影响，独立存储，将这类内存区域称为为“线程私有”内存。</li></ol></blockquote><h3 id="如何创建想线程"><a href="#如何创建想线程" class="headerlink" title="如何创建想线程"></a>如何创建想线程</h3>第一种方法：<br>继承java.lang.Thread类,重写run方法。如下例：</li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CounterThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CounterThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"计数器线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置线程名称</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//输出10次，每次间隔0.5秒</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"运行第"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使当前正在执行的线程休眠</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CounterThread counterThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CounterThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        counterThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第二种方式：<br>实现java.lang.Runnable接口，实现run抽象方法。如下例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    String threadName <span class="token operator">=</span> <span class="token string">"时间线程"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String currentTime <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadName<span class="token operator">+</span><span class="token string">",当前时间："</span><span class="token operator">+</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TimeThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimeThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread timeThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>        timeThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><p>Java中，线程有5种不同状态，分别是：新建（New）、就绪（Runable）、运行（Running）、阻塞（Blocked）和死亡（Dead）。它们之间的转换图如下</p><p><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190319092335455.png" alt="在这里插入图片描述"><br>过程;</p><ol><li>新建到就绪：调用start（）方法（并不意味着程序几经在运行）</li><li>就绪与运行：线程失去cpu执行权。</li><li>运行到死亡：<ol><li>run方法执行完成</li><li>Error,程序本身无法恢复的严重错误</li><li>Exception,程序出现异常<ol start="4"><li>运行到阻塞：<ol><li>sleep（） </li><li>IO阻塞（比如让线程拷贝大的文件）</li><li>等待同步锁 </li></ol></li><li>wait()</li><li>suspend()</li><li>阻塞到运行：</li><li>sleep时间到</li><li>IO方法结束（比如文件拷贝完成）</li><li>获得同步锁 </li><li>notify()</li><li>resume()</li></ol></li></ol></li></ol><p>释义：</p><ol><li>新建状态（New）：新创建了一个线程对象。</li><li>就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。</li><li>运行状态（Running）：就绪状态的线程获取了CPU使用权，执行程序代码。</li><li>阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：</li><li>等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)</li><li>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。</li><li>其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）；</li><li>死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 线程的基本概念和运用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之自动拆装箱</title>
      <link href="/posts/25353.html"/>
      <url>/posts/25353.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的自动拆装箱</p><a id="more"></a><h3 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h3><ol><li>作用：自动拆箱和装箱是从JDK5.0才开始有的，它方便了基本数据类型和其对应的包装类型之间的转换。</li><li>定义：将一个基本数据类型的值赋给其所对应的包装类型称之为自动装箱；将一个基本数据类型包装类类型的值赋给其所对应的基本数据类型称之为自动拆箱。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer i <span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//自动装箱</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出100</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//自动拆箱</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出100</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.使用：自动拆箱和装箱的过程由编译器自动完成：通过包装类的valueOf方法将基本数据类型包装成引用类型；通过包装类对象xxxValue方法将引用类型变为对应的基本类型。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer i <span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出100</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出100</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="数据的缓存"><a href="#数据的缓存" class="headerlink" title="数据的缓存"></a>数据的缓存</h3><ol><li>Java对部分经常使用的数据采用缓存技术，即第一次使用该数据则创建该数据对象并对其进行缓存，当再次使用等值对象时直接从缓存中获取，从而提高了程序执行性能。</li><li>== ：java中的==有两种作用：如果是基本数据类型则用于判断其值是否相等；如果为引用类型则用于判断两者的地址是否相同。</li><li><strong>包装类数据缓存</strong>Java中只是对部分基本数据类型对应包装类的部分数据进行了缓存：<ol><li>byte、short、int和long所对应包装类的数据缓存范围为 -128~127（包括-128和127）；</li><li>float和double所对应的包装类没有数据缓存范围；</li><li>char所对应包装类的数据缓存范围为 0~127（包括0和127）；</li><li>boolean所对应包装类的数据缓存为true和false；</li></ol></li><li>包装类中的equals（）方法：基本数据类型包装类中的equals方法用于比对相同包装类中的值是否相等，如果两者比较的包装类类型不同则返回false；</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer aInteger <span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">;</span>        Integer bInteger <span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aInteger<span class="token operator">==</span>bInteger<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出false![aInteger与bInteger的值超出了int对应包装类的缓存范围，所以aInteger==bInteger返回false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aInteger<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>bInteger<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出true，两者值都是128并且都是Integer类型，所以aInteger.equals(bInteger)返回true</span>        Short cShort <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aInteger<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cShort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出false，aInteger和cShort的值都是128，但是由于两者数据类型不同，所以aInteger.equals(cShort)返回false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>包装类中parseXXX方法：基本数据类型包装类中的parseXXX(String s)方法用于将字符串类型数据转换为相应的基本数据类型。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"-128"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> l <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token string">"127"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> f <span class="token operator">=</span> Float<span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"9.99"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> Boolean<span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>char类型包装类Character没有相应的parseXXX方法。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 自动拆装箱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之List接口</title>
      <link href="/posts/25991.html"/>
      <url>/posts/25991.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的List集合</p><a id="more"></a><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><ol><li>List接口继承Collection接口；</li><li>该接口属于数据接口中的线性结构，用户可以根据元素的整数索引来访问元素；<h3 id="二、list接口实现类"><a href="#二、list接口实现类" class="headerlink" title="二、list接口实现类"></a>二、list接口实现类</h3></li><li>ArrayList（数组线性表）<ol><li>List 接口的实现类。其内部基于一个大小可变数组来存储 </li><li>允许存储 null 元素</li></ol></li><li>LinkedList（双向链表）<ol><li>List 接口的链接列表实现类<ol start="2"><li>允许存储 null 元素</li></ol></li></ol></li><li>Vector（向量）<ol><li>功能和ArrayList一样</li><li>线程安全</li></ol></li><li>Stack（栈）<ol><li>表示后进先出（LIFO）的对象堆栈<h3 id="三、List接口常用方法"><a href="#三、List接口常用方法" class="headerlink" title="三、List接口常用方法"></a>三、List接口常用方法</h3><h5 id="1-ArrayList常用方法"><a href="#1-ArrayList常用方法" class="headerlink" title="1. ArrayList常用方法"></a>1. ArrayList常用方法</h5></li></ol></li><li>add(Object element) 向列表的尾部添加指定的元素 <ol start="2"><li>size()  返回列表中的元素个数 get(int  index) 返回列表中指定位置的元素，*<em>index从0开始 *</em> </li><li>add(int index, Object element)   在列表的指定位置插入指定元素</li><li>set(int i, Object element)  将索引i位置元素替换为元素element并返回被替换的元素。</li><li>clear()  从列表中移除所有元素   </li><li>isEmpty()：判断列表是否包含元素，不包含元素则返回 true，否则返回false iterator() </li><li>iterator()：返回按适当顺序在列表的元素上进行迭代的迭代器。 </li><li>contains(Object o)  如果列表包含指定的元素，则返回 true。</li><li>remove(int  index)  移除列表中指定位置的元素，并*<em>返回被删元素 *</em></li><li>remove(Object o)：移除集合中第一次出现的指定元素，移除成功返回true，否则返回false。<h6 id="三种方法进行集合的遍历（iterator（）迭代方法的使用）"><a href="#三种方法进行集合的遍历（iterator（）迭代方法的使用）" class="headerlink" title="三种方法进行集合的遍历（iterator（）迭代方法的使用）"></a>三种方法进行集合的遍历（iterator（）迭代方法的使用）</h6></li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       ArrayList arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ArrayList 为线性数组。</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Tim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//增加元素</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Lily"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在指定位置设置元素，原有元素往后平移一个位置</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Rose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断是否为空</span>        <span class="token keyword">int</span> longth <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取长度</span>        <span class="token comment" spellcheck="true">//三种遍历list的方法</span>        <span class="token comment" spellcheck="true">//第一种方法</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//第二种方法</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object object <span class="token operator">:</span> arrayList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//第三种方法</span>        Iterator iterator <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h6 id="重写equals（）方法实现contains（）方法，remove方法"><a href="#重写equals（）方法实现contains（）方法，remove方法" class="headerlink" title="重写equals（）方法实现contains（）方法，remove方法"></a>重写equals（）方法实现contains（）方法，remove方法</h6><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//重写equals（）方法</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span> <span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> student<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//实现对象的比较</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">boolean</span> result <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> rel <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出结果为两个true，原因解释如下：集合的contents（）方法和remove（）方法会根据传入的对象调用不同的equels（）方法进行比较，存在object的equals（）和字符串的equals（）方法</span><span class="token comment" spellcheck="true">//不重写equals（）方法</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span> <span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">boolean</span> result <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> rel <span class="token operator">=</span> arrayList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//运行结果输出两个false。原因解释;不存在上转型对象，调用object（）的equals（）方法。比较对象的地址。</span></code></pre><h5 id="LinkedList的方法"><a href="#LinkedList的方法" class="headerlink" title="LinkedList的方法"></a>LinkedList的方法</h5><p>LinkedList除了实现List提供的抽象方法外，还增加了一些方法：</p><ol><li>void  addFirst(Object o) 将指定数据元素插入此集合的开头,原来元素（如果有）后移；<ol start="2"><li>void addLast(Object o) 将指定数据元素插入此集合的结尾 </li><li>Object getFirst() 返回此集合的第一个数据元素Object getFirst() 返回此集合的第一个数据元素</li><li>Object getLast() 返回此集合的最后一个数据元素 </li><li>Object removeFirst()移除并返回集合表的第一个数据元素。</li><li>Object removeLast() 移除并返回集合表的最后一个数据元素。</li><li>Object removeLast() 移除并返回集合表的最后一个数据元素 。<h5 id="ArrayList线性表与数组的区别。"><a href="#ArrayList线性表与数组的区别。" class="headerlink" title="ArrayList线性表与数组的区别。"></a>ArrayList线性表与数组的区别。</h5></li><li>两者本质的区别在与长度是否可变：数组是定长有序的线性集合；线性表是任意长度的线性集合；</li><li>两者添加元素的方式不同：数组使用下标：array [index]；数组线性表使用add方法：list.add(value) </li><li>两者获取元素的方式不同：数组使用下标：array [index]；数组线性表使用get方法：list.get(index) </li><li>获取长度的方式不同：数组使用length属性；数组线性表使用size()方法 ]<h5 id="ArrayList和LinkedList区别"><a href="#ArrayList和LinkedList区别" class="headerlink" title="ArrayList和LinkedList区别"></a>ArrayList和LinkedList区别</h5></li><li>ArrayList是基于动态数组存储的数组线性表数据结构，使用连续的内存单元存储数据元素，对元素的遍历速度较快，LinkedList在遍历集合元素方面比较慢，因为在遍历过程中需要找寻下个元素的地址；</li><li>LinkedList是使用指针关联的双向链表数据结构，前一个元素都记录了后一个元素的地址，后一个元素也记录了前一个元素的地址，当添加或删除数据元素时，LinkedList比较快，因为ArrayList需要移动其被添加（或删除）元素后面（最后一个除外）的全部元素.<h5 id="Vector与ArrayList区别"><a href="#Vector与ArrayList区别" class="headerlink" title="Vector与ArrayList区别"></a>Vector与ArrayList区别</h5>Vector是线程安全（synchronized）的，而ArrayList是非线程安全的，所以调用方法名相同的方法时，Vector对象要比ArrayList对象稍慢一些。</li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> List接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之集合框架</title>
      <link href="/posts/34164.html"/>
      <url>/posts/34164.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中集合框架</p><a id="more"></a><ol><li><p>定义：集合又称为容器，用于存储、提取、删除数据。JDK提供的集合API都包含java.util 包内。</p></li><li><p>分类：集合框架两大分支：Collection接口和Map接口                                                                                                                                  </p><h4 id="Collection集合图解"><a href="#Collection集合图解" class="headerlink" title="Collection集合图解"></a>Collection集合图解</h4></li></ol><p><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190215092814461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190215092834876.png" alt="在这里插入图片描述"></p><blockquote><p>其中ArrayIist和Vector实现了List接口，HashSet和LinkedHashSet实现了Set接口。</p></blockquote><h4 id="Map集合图解"><a href="#Map集合图解" class="headerlink" title="Map集合图解"></a>Map集合图解</h4><p><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190215092857686.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>HashMap和LinkedHashMap实现了Map接口</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 集合框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之集合Ｓet集合</title>
      <link href="/posts/46194.html"/>
      <url>/posts/46194.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的Set集合</p><a id="more"></a><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ol><li>Set接口继承Collection<h4 id="Set接口常用实现类"><a href="#Set接口常用实现类" class="headerlink" title="Set接口常用实现类"></a>Set接口常用实现类</h4></li><li><strong>HashSet</strong>  <ol><li>实现了 Set 接口</li><li>“它不保证 set 的迭代顺序；特别是它不保证该顺序恒久不变”(存入该实现类对象中的元素是无序的，即在遍历该集合元素时，遍历出的元素顺序未必和向集合中添加元素的顺序一致；这次遍历出来的顺序未必和上一次遍历出来的元素顺序一致)</li><li>允许使用 null 元素</li></ol></li><li><strong>LinkedHashSet</strong><ol><li>HashSet的子类</li><li>由于该实现类对象维护着一个运行于所有元素的双重链接列表，由于该链接列表定义了迭代顺序，所以在遍历该实现类集合时按照元素的插入顺序进行遍历</li></ol></li><li><strong>TreeSet</strong><ol><li>既实现Set接口，同时也实现了SortedSet接口，具有排序功能</li><li>存入TreeSet中的对象元素需要实现Comparable接口.<h4 id="Set接口常用方法"><a href="#Set接口常用方法" class="headerlink" title="Set接口常用方法"></a>Set接口常用方法</h4></li></ol></li><li>add(Object obj)：向Set集合中添加元素，添加成功返回true，否则返回false。</li><li>size() ：返回Set集合中的元素个数。</li><li>remove(Object  obj) ： 删除Set集合中的元素，删除成功返回true，否则返回false。</li><li>isEmpty() ：如果Set不包含元素，则返回 true ，否则返回false。</li><li>clear() ： 移除此Set中的所有元素。</li><li>iterator() ：返回在此Set中的元素上进行迭代的迭代器。</li><li>contains(Object o)：如果Set包含指定的元素，则返回 true，否则返回false。<blockquote><p> <strong>Set集合没有提供get方法，所以对Set集合的遍历只能通过加强for循环和迭代器进行遍历</strong></p></blockquote><h4 id="Hashset的重写equals（）和hashcode（）方法"><a href="#Hashset的重写equals（）和hashcode（）方法" class="headerlink" title="Hashset的重写equals（）和hashcode（）方法"></a>Hashset的重写equals（）和hashcode（）方法</h4></li><li>重写对象：使用HashSet存储<strong>自定义类对象</strong>时，可以在自定义类中重写equals和hashCode方法避免“真实”对象被多次存入，主要原因是集合内不允许有重复的数据元素，在集合校验元素的有效性时（数据元素不可重复），需要调用equals和hashCode验证。</li><li>原理：检查待存对象hashCode值是否与集合中已有元素对象hashCode值相同，如果hashCode不同则表示不重复， 如果hashCode相同再调用equals方法进一步检查，equals返回真表示重复，否则表示不重复。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">==</span> student<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashSet<span class="token operator">&lt;</span>Student<span class="token operator">></span> hashset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student xiaowang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student xiaoli <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>xiaowang<span class="token punctuation">)</span><span class="token punctuation">;</span>        hashset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>xiaoli<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashset<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果为1.原因解释;xiaowang和xiaoli的id一样，而重写后的hashcode为id，故相同，接着比较equals，也是比较id，故xiaowang和xiaoli相同，set长度为一。</span><span class="token comment" spellcheck="true">//不重写hashcode和equals（）</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashSet<span class="token operator">&lt;</span>Student<span class="token operator">></span> hashset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student xiaowang <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student xiaoli <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>xiaowang<span class="token punctuation">)</span><span class="token punctuation">;</span>        hashset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>xiaoli<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashset<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果为2.原因解释：xiaowang和xiaoli的为不同的对象，其hashcode不同。所以为不同的对象。</span></code></pre><h4 id="TreeSet-集合"><a href="#TreeSet-集合" class="headerlink" title="TreeSet 集合"></a>TreeSet 集合</h4><ol><li>TreeSet是一个有序集合，其元素按照升序排列，默认是按照自然顺序排列，也就是说TreeSet中的对象元素需要实现Comparable接口。</li><li>TreeSet虽然是有序的，但是并没有具体的索引，当插入一个新的数据元素的时候，TreeSet中原有的数据元素可能需要重新排序，所以TreeSet插入和删除数据元素的效率较低。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>TreeSet<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Student<span class="token operator">></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//实现Comparable接口</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span><span class="token comment" spellcheck="true">//该方法可以控制treeset中的排序方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Student o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//return this.age - o.age;//默认的升序排列</span>        <span class="token keyword">return</span> o<span class="token punctuation">.</span>age <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//降序排序</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeSet<span class="token operator">&lt;</span> Student<span class="token operator">></span> treeSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//其内对象，必须实现comparable接口，treemap与之类似</span>        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Student student <span class="token operator">:</span> treeSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> Ｓet集合 </tag>
            
            <tag> 重写了equals()和ｈashcode()方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之集合中的Map集合</title>
      <link href="/posts/9425.html"/>
      <url>/posts/9425.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的Map集合</p><a id="more"></a><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ol><li>Map集合基于 键（key）/值（value）映射。每个键最多只能映射一个值。键可以是任何引用数据类型的值，不可重复；值可以是任何引用数据类型的值，可以重复；键值对存放无序。<h4 id="Map常用实现类："><a href="#Map常用实现类：" class="headerlink" title="Map常用实现类："></a>Map常用实现类：</h4></li><li>HashMap：允许使用 null 值和 null 键;此类不保证映射的顺序;在多线程操作下不安全</li><li>LinkedHashMap：基于哈希表和链接列表的实现类;具有可预知的迭代顺序（双重链接表的有序性）</li><li>Properties：Hashtable的一个子类;属性列表中每个键及其对应值都是一个字符串;在多线程操作下安全。<h4 id="Map接口常用方法"><a href="#Map接口常用方法" class="headerlink" title="Map接口常用方法"></a>Map接口常用方法</h4></li><li>put(K key, V value) 将键（key）/值（value）映射存放到Map集合中</li><li>get(Object key) 返回指定键所映射的值，没有该key对应的值则返回 null</li><li>size()  返回Map集合中数据数量</li><li>clear() 清空Map集合</li><li>isEmpty () 判断Map集合中是否有数据，如果没有则返回true，否则返回false</li><li>remove(Object key) 删除Map集合中键为key的数据并返回其所对应value值。</li><li>values()  返回Map集合中所有value组成的以Collection数据类型格式数据。</li><li>containsKey(Object key)  判断集合中是否包含指定键，包含返回 true，否则返回false</li><li>containsValue(Object value)  判断集合中是否包含指定值，包含返回 true，否则返回false</li><li>keySet()  返回Map集合中所有key组成的Set集合</li><li>entrySet()  将Map集合每个key-value转换为一个Entry对象并返回由所有的Entry对象组成的Set集合</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">.</span>Entry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存放数值</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//map集合中一个键只对应一个值，多个值时会出现冲掉的情况</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Set<span class="token operator">&lt;</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> entry <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将键值对转换为entry对象，并放在set集合里</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> entry2 <span class="token operator">:</span> entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            entry2<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Iterator<span class="token operator">&lt;</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> iterator <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Entry entry3 <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            entry3<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            entry3<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> Map集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之集合的工具类</title>
      <link href="/posts/20429.html"/>
      <url>/posts/20429.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的集合工具类</p><a id="more"></a><h4 id="Collections类"><a href="#Collections类" class="headerlink" title="Collections类"></a>Collections类</h4><p><strong>常用方法</strong></p><ol><li>max(Collection &lt;? extends T&gt; coll)：根据元素的自然顺序，返回给定集合元素中的最大元素</li><li>min(Cssollection &lt;? extends T&gt; coll)：根据元素的自然顺序，返回给定集合元素中的最小元素</li><li>sort(List<T> list) ：根据元素的自然顺序对指定列表按升序进行排序。列表中的所有元素都必须实现 Comparable 接口。</li><li>sort(List<T> list, Comparator&lt;? super T&gt; c)  ： 根据指定比较器产生的顺序对指定列表进行排序</li><li>reverse(List&lt;?&gt; list)：反转指定列表中元素的顺序</li><li>swap(List&lt;?&gt; list, int i, int j)：在指定列表的指定位置处交换元素，如果指定位置相同，则调用此方法不会更改列表。</li><li>binarySearch(List&lt;? extends Comparable&lt;? super T&gt;&gt; list, T key) ：返list集合元素按照自然顺序升序排序后，使用二分搜索法搜索list集合，返回指定对象的索引，如果没找到返回-1。</li><li>max(Collection &lt;? extends T&gt; coll)：根据元素的自然顺序，返回给定集合元素中的最大元素</li><li>min(Collection &lt;? extends T&gt; coll)：根据元素的自然顺序，返回给定集合元素中的最小元素<blockquote><p>在使用max和min方法时要求存入集合中的对象对应的类必须实现Comparable接口，否则程序在编译阶段就会报错。</p></blockquote></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Array<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Comparator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashSet<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">567</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意colltion集合必须实现comparable接口（即实现自然顺序），直接收list,基本数据类型都实现了comparable接口。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer integer <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//可以通过重写compare方法来进行升降序的改变。</span>        Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> o1 <span class="token operator">-</span>o2<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Lambert表达式</span>        Comparator<span class="token operator">&lt;</span>Integer<span class="token operator">></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>Integer o1<span class="token punctuation">,</span> Integer o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> o1 <span class="token operator">-</span>o2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//升序</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer integer <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span><span class="token punctuation">(</span>o2<span class="token punctuation">,</span>o1<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> o2 <span class="token operator">-</span>o1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//降序</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer integer <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer <span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认升序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer integer <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Comparable接口和Comparator接口的区别比较"><a href="#Comparable接口和Comparator接口的区别比较" class="headerlink" title="Comparable接口和Comparator接口的区别比较"></a>Comparable接口和Comparator接口的区别比较</h4><h6 id="1-Comparable接口"><a href="#1-Comparable接口" class="headerlink" title="1.Comparable接口"></a>1.Comparable接口</h6><ol><li>String和各种包装类已经实现了Comparable接口</li><li>TreeSet集合内默认是按照自然顺序排序的</li><li>在集合内元素之间的比较，由该类的compareTo(Object o)方法来完成，因为这种比较是在类内部实现，所以将Comparable称为内部比较器<h6 id="2-Comparator"><a href="#2-Comparator" class="headerlink" title="2. Comparator"></a>2. Comparator</h6></li><li>外部比较器</li><li>配合Collections工具类的sort(List list, Comparator c)方法使用。</li><li>当集合中的对象不支持自比较或者自比较的功能不能满足需求时使用</li><li>和内部比较器相比，其可重用性好<h4 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h4><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5></li><li>asList(T… a)：将数组转换为List集合</li><li>static void sort(int[] a)：对指定的 int 型数组按数字升序进行排序。 </li><li>static <T> void sort(T[] a, Comparator&lt;? super T&gt; c)：根据指定比较器产生的顺序对指定对象数组进行排序。 </li><li>static boolean equals(Object[] a1, Object[] a2)：判断构成两个数组的元素是否完全相同，相同返回true，否则返回false。</li><li>static int binarySearch(Object[] a, Object key) ：二分搜索法来搜索指定数组，以获得指定对象。 </li><li>static int binarySearch(Object[] a, int fromIndex, int toIndex, Object key) ：二分搜索法来搜索指定数组的范围，以获得指定对象。 </li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer <span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认升序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer integer <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> b<span class="token operator">-</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//降序</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer integer <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数组转化为列表</span>        Integer <span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">234</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> b<span class="token operator">-</span>a<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> b<span class="token operator">-</span>a<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> array<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用该方法前，需对数组进行相同方式的排序</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 集合工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门之正则表达式</title>
      <link href="/posts/28130.html"/>
      <url>/posts/28130.html</url>
      
        <content type="html"><![CDATA[<p>本文主要讲述正则表达式</p><a id="more"></a><h2 id="１．grep命令"><a href="#１．grep命令" class="headerlink" title="１．grep命令"></a>１．grep命令</h2><p>grep    【option】 “pattern” 文件</p><p>grep    “root”/etc/passwd      :在passwd查找有root的内容</p><p>-i  ：忽略大小写</p><p>grep    -i“^r” /tmp/1.txt    :显示以r或R开头的文件内容</p><p>-o   ：不再显示整行内容，只显示满足条件的字符内容</p><p>grep    -o“r..t“  /etc/passwd   :只显示满足条件的字符串</p><p>-v  ：反向过滤（不显示满足条件的内容）</p><p>grep   -v   “^#” /etc/fstab      :不显示以#开头的内容</p><p>-e     ：使grep支持多种条件删选（一个条件一个-e）</p><p>grep    -e    “^#”  -e   “^$”    /etc/fstab    :显示空行和以#开头的内容</p><p>grep    -v    -e    “^#”  -e   “^$”    /etc/fstab    :不 显示空行和以#开头的内容</p><p>-E    ：支持拓展正则表达式（可以去除转义\符号）</p><p>grep  -E“ab{2，5}”  /etc/2.txt     :查找a后面的b出现两次到五次的内容</p><p>|   ：或者的含义（在-E的情况下）</p><p>grep   -E   “vmx|svm”  /proc/cpuinfo    :查看文件内是否有vmx或svm（判断是否支持虚拟机）</p><p>-A n    ：除了显示符合条件行外，还会显示后n行</p><p>ifconfig   eth0   |   grep   -A  2 “netmask” ：显示符合条件的行及其后两行。</p><p>-B  n   ：除了显示符合条件行外，还会显示前n行</p><p>ifconfig   eth0   |   grep   -B  2 “netmask” ：显示符合条件的行及前两行</p><h2 id="二、正则表达式（正则表达式的元字符）：用一些特殊字符组成字符串代替一类字符"><a href="#二、正则表达式（正则表达式的元字符）：用一些特殊字符组成字符串代替一类字符" class="headerlink" title="二、正则表达式（正则表达式的元字符）：用一些特殊字符组成字符串代替一类字符"></a>二、正则表达式（正则表达式的元字符）：用一些特殊字符组成字符串代替一类字符</h2><p>1）匹配单个字符的元字符<br>.     ：代表任意单字符</p><p>grep  “r..t” /etc/passwd     :查找有r  t（中间是任意两个字符）的内容</p><p>[ ]  ：指定字符范围    [abc]  :a,b,c中的一个</p><p>grep  “r[a,A]t”/tmp/1.txt     :</p><pre><code>- :  表示连续的字符范围 </code></pre><p>[a-z]  :26个小写字母中的任一个<br>[A-Z0-9]  :大写字母或数字中的一个<br>^  :  用在[]中是取反的意思<br>[^a-zA-Z0-9]   :表示特殊字符<br>[：punct：]   :包括标点符号,使用时需再加一个[].</p><p>grep  “r[[:punct:]]t”/etc/passwd     :  查找r  t中间是标点的内容</p><p>[:space:]   :空格字符（tab也是），,使用时需再加一个[].</p><p>grep   “r[[:space:]]t”/etc/passwd     :查找r  t中间是一个空格（或者tab键）的内容</p><p>2）匹配字符出现的位置<br>^  :(用在【】之外）：以什么开头</p><p>grep  “^[rbh]”/etc/passwd    :以rbh中任意一个字符开头的文件内容</p><p>grep   “^[^rbh]” /etc/passwd     :不以rbh中任意字符开头的内容。</p><p>$  :以什么结尾</p><p>grep   “bash$” /etc/passwd   :查找以bash结尾的文件内容</p><p>grep   “bash$” /etc/passwd   |  wc -l   ：查找以bash结尾的文件内容并显示其有多少行</p><p>^ $  : 空行（没有任意字符空格也算是字符）</p><p>grep  “^$”  /etc/passwd  |  wc  -l    :显示空行数目</p><p>ls  -l  /etc/   |  grep    “^d”   :etc下的目录（d表示目录）</p><p>3）匹配字符出现的次数<br>​    *:   匹配其前一个字符的任意次数</p><p>vim  /etc/2.txt</p><p>a<br>ab<br>abb<br>abbb<br>abbbb<br>abbbbb<br>abbbbbb</p><p>grep  “ab*”  /etc/2.txt  :找到a后面有任意个b（可以为0个）的内容</p><p>？  ：前一个字符最多出现一次（可有可无）（需加上\转义使用）</p><p>grep  “ab?” /etc/2.txt   :找到有a，或ab的内容</p><ul><li>：前一个字符有一次或多次（需加上\转义使用）<br>grep  “ab+” /etc/2.txt   :找到a后面最少有一个b的内容</li></ul><p>{n}  ：精确出现n次（注：都需与\转义使用）</p><p>grep  “ab{2}”  /etc/2.txt     :查找a后面的b出现两次的内容</p><p>{n，m} ：精确出现n到m次（注：都需与\转义使用）</p><p>grep  “ab{2，5}”  /etc/2.txt     :查找a后面的b出现两次到五次的内容</p><p>{，m}    ：最多出现m次（注：都需与\转义使用）</p><p>grep  “ab{，2}”  /etc/2.txt     :查找a后面的b最多出现两次的内容</p><p>{n，}     :最少出现n次，多的不限（注：都需与\转义使用）</p><p>grep  “ab{2，}”  /etc/2.txt     :查找a后面的b最少出现两次的内容</p><h3 id="4：分组（把多个字符当做一个使用）"><a href="#4：分组（把多个字符当做一个使用）" class="headerlink" title="4：分组（把多个字符当做一个使用）"></a>4：分组（把多个字符当做一个使用）</h3><p>（）：小括号内的字符会被当做一个字符处理</p><p>grep  “(ab){2,}” /usr/share/dict/words     :查找文件中ab至少出现2次的内容</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux入门 </tag>
            
            <tag> grep </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门之tar实现打包压缩</title>
      <link href="/posts/2120.html"/>
      <url>/posts/2120.html</url>
      
        <content type="html"><![CDATA[<p>本文介绍了tar工具实现打包压缩</p><a id="more"></a><h2 id="一：三个压缩命令（只压缩文件）"><a href="#一：三个压缩命令（只压缩文件）" class="headerlink" title="一：三个压缩命令（只压缩文件）"></a>一：三个压缩命令（只压缩文件）</h2><h1 id="1）gzip-："><a href="#1）gzip-：" class="headerlink" title="1）gzip   ："></a>1）gzip   ：</h1><p>mkdir  /fire</p><p>vim  /file/1.txt</p><p>Jafjf<br>Agsa</p><p>cp  /fire/1.txt   /fire/2.txt</p><p>cp  /fire/1.txt   /fire/3.txt</p><p>gzip  /fire/1.txt     :即实现压缩（特点原文件不复存在，只有压缩文件，后缀名为.gz）</p><p>gzip   -d  /fire/1.txt.gz    :实现解压缩</p><h3 id="2）bzip2-："><a href="#2）bzip2-：" class="headerlink" title="2）bzip2  ："></a>2）bzip2  ：</h3><p>bzip2  /fire/2.txt     :即实现压缩（特点原文件不复存在，只有压缩文件，后缀名为.bz2）</p><p>bzip2   -d  /fire/2.txt.bz2    :实现解压缩</p><h3 id="3）xz-："><a href="#3）xz-：" class="headerlink" title="3）xz  ："></a>3）xz  ：</h3><p>xz  /fire/3.txt     :即实现压缩（特点原文件不复存在，只有压缩文件，后缀名为.xz）</p><p>xz   -d  /fire/3.txt.xz    :实现解压缩</p><h2 id="二：tar-：创建打包文件（整理零散文件，备份）"><a href="#二：tar-：创建打包文件（整理零散文件，备份）" class="headerlink" title="二：tar ：创建打包文件（整理零散文件，备份）"></a>二：tar ：创建打包文件（整理零散文件，备份）</h2><p>tar  cf  打包文件名  原文件</p><p>tar   cf  /tmp/file01.tar    /fire/    :打包/fire目录下文件至/tmp目录下，包为file01.tar。（c;创建文件 f：文件）</p><p>tar   xf   /fire/file01.tar      ；解包至当前路径下</p><p>tar   xf   /fire/file01.tar  -C   /tmp/     ；解包至tmp路径下</p><p>tar   tvf   /fire/file01.tar      ；不解包却显示包内文件名</p><h3 id="1）调用gzip"><a href="#1）调用gzip" class="headerlink" title="1）调用gzip"></a>1）调用gzip</h3><p>tar  czf   /tmp/file01.tar.gz   /etc/    :将/etc下文件压缩打包放在/tmp目录下</p><p>tar   xzf   /tmp/file01.tar.gz   -C  /etc/    :解压包并放在/etc目录下（不指定路径，则解包于当前目录下）</p><h3 id="2）调用bzip2"><a href="#2）调用bzip2" class="headerlink" title="2）调用bzip2"></a>2）调用bzip2</h3><p>tar  cjf   /tmp/file02.tar.bz2   /etc/    :将/etc下文件压缩打包放在/tmp目录下</p><p>tar   xjf   /tmp/file02.tar.bg2   -C  /etc/    :解压包并放在/etc目录下（不指定路径，则解包于当前目录下）</p><h3 id="3）调用xz"><a href="#3）调用xz" class="headerlink" title="3）调用xz"></a>3）调用xz</h3><p>tar  cJf   /tmp/file02.tar.xz   /etc/    :将/etc下文件压缩打包放在/tmp目录下</p><p>tar   xJf   /tmp/file02.tar.xz   -C  /etc/    :解压包并放在/etc目录下（不指定路径，则解包于当前目录下）（压缩率依次增高）</p><p>把日期当文件名</p><p>tar  czf   /tmp/$(date +%F).tar.gz   /etc/   : 把日期设为包名</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux入门 </tag>
            
            <tag> tar </tag>
            
            <tag> 打包压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门之vim编辑器的使用</title>
      <link href="/posts/1644.html"/>
      <url>/posts/1644.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述ubuntu下的vim编辑器的使用</p><a id="more"></a><h2 id="1、使用vim编辑器修改文件内容"><a href="#1、使用vim编辑器修改文件内容" class="headerlink" title="1、使用vim编辑器修改文件内容"></a>1、使用vim编辑器修改文件内容</h2><p>vim   /etc/passwd<br>​三种模式：命令模式 ，插入模式，末行模式</p><p>cp    /etc/passwd   /tmp/</p><p>vim   /etc/passwd     :默认命令模式</p><p>切换：命令模式-》编辑模式  ：o（光标下另起一行）O（光标上新增一行）i  （光标处插入）  I   （光标右一个插入)  esc退出该模式<br>​         命令模式-》末行模式    ;   :  即进入末行模式。 ：set nu   ：显示行号。</p><h2 id="2、命令模式下的操作："><a href="#2、命令模式下的操作：" class="headerlink" title="2、命令模式下的操作："></a>2、命令模式下的操作：</h2><p>1快速移动光标：<br>j  ：向下移动<br> k   ：向上移动<br>  h：向左移动<br> l  ：向右移动<br>J  ：光标跳最后一行<br> jj：回到第一行<br>13 jj  ：跳到13行<br>  美元符号 :跳到行尾    （enter才会另起下一行）<br> ^   :跳转到行首 </p><h3 id="2）删除-："><a href="#2）删除-：" class="headerlink" title="2）删除 ："></a>2）删除 ：</h3><p>d +$  :从光标到行尾删除<br> d  + ^  ：从光标到行首删除<br>x ：删除光标所在字符<br> dd 删除整行<br>13dd  ;从光标向下删除13行<br>dw ：删除单词<br>dG：删除到文件末尾。</p><h3 id="3）替换操作-："><a href="#3）替换操作-：" class="headerlink" title="3）替换操作 ："></a>3）替换操作 ：</h3><p>r +替换字符  ：改单个字符<br>R + 替换字符串  ：该多个字符（按esc退出退换）</p><h3 id="4）撤销"><a href="#4）撤销" class="headerlink" title="4）撤销"></a>4）撤销</h3><p>u   ;撤销步骤</p><h3 id="5）复制，黏贴，剪贴"><a href="#5）复制，黏贴，剪贴" class="headerlink" title="5）复制，黏贴，剪贴"></a>5）复制，黏贴，剪贴</h3><p>yy ：复制一整行<br>P     ：在光标所在上一行黏贴<br>p（小写）     ：在光标所在下一行黏贴<br>23p    ：黏贴23遍<br>dd   +p  ：复制加粘贴（删除即存在缓存区，知道关闭vim）</p><h3 id="6）搜索文件内容"><a href="#6）搜索文件内容" class="headerlink" title="6）搜索文件内容;"></a>6）搜索文件内容;</h3><p>/ +daemon(搜索内容）  ：n ：光标从搜索内容向下查找   N  ：光标从搜索内容向上查找</p><h2 id="3、末行模式："><a href="#3、末行模式：" class="headerlink" title="3、末行模式："></a>3、末行模式：</h2><h3 id="1）强制退出-不保存）-："><a href="#1）强制退出-不保存）-：" class="headerlink" title="1）强制退出(不保存）  ："></a>1）强制退出(不保存）  ：</h3><p>：q！</p><h3 id="2）保存退出："><a href="#2）保存退出：" class="headerlink" title="2）保存退出："></a>2）保存退出：</h3><p>：wq</p><h3 id="3）追加写"><a href="#3）追加写" class="headerlink" title="3）追加写"></a>3）追加写</h3><p>：r  /etc/fstab      ；在当前文件追加写fstab</p><h3 id="4）显示行号"><a href="#4）显示行号" class="headerlink" title="4）显示行号"></a>4）显示行号</h3><p>：set  nu  ：显示行号<br>： set  nonu  ：取消行号</p><h3 id="5）查找范围"><a href="#5）查找范围" class="headerlink" title="5）查找范围"></a>5）查找范围</h3><p>： [查找范围】 s/旧内容/新内容/g<br>：s/root/admin    :光标所在行的第一个root替换为admin<br>：s/root/admin/g          :把光标所在行root替换为admin<br>：%   s/root/admin      :每一行的第一个root替换为admin<br>：%  s/root/admin/g    :全文替换<br>：5，10  s/root/admin/g      ；第五行到第十行的所有root换为admin<br> : .，美元符号    s/root/admin/g     :  .代表光标所在行，美元符号  ：代表最后一行（$-1:倒数第二行）从光标所在行到最后一行全部替换。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux入门 </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门之创建复制文件</title>
      <link href="/posts/54331.html"/>
      <url>/posts/54331.html</url>
      
        <content type="html"><![CDATA[<p>本文介绍如何在linux中创建复制文件</p><a id="more"></a><h4 id="1、-du-sh-etc-passwd-：准确显示文件大小"><a href="#1、-du-sh-etc-passwd-：准确显示文件大小" class="headerlink" title="1、# du -sh   /etc/passwd  ：准确显示文件大小"></a>1、# du -sh   /etc/passwd  ：准确显示文件大小</h4><h4 id="2、-du-ah-etc-目录下每一个文件的大小"><a href="#2、-du-ah-etc-目录下每一个文件的大小" class="headerlink" title="2、 #  du  -ah    /etc/   :目录下每一个文件的大小"></a>2、 #  du  -ah    /etc/   :目录下每一个文件的大小</h4><h4 id="3、-创建文件-：-touch-tmp-1-txt-创建1-txt文件"><a href="#3、-创建文件-：-touch-tmp-1-txt-创建1-txt文件" class="headerlink" title="3、  创建文件 ：#  touch  /tmp/1.txt    :创建1.txt文件"></a>3、  创建文件 ：#  touch  /tmp/1.txt    :创建1.txt文件</h4><h4 id="4、-花括号展开-：-touch-tmp-1-100-mp3-创建1到100个文件"><a href="#4、-花括号展开-：-touch-tmp-1-100-mp3-创建1到100个文件" class="headerlink" title="4、  花括号展开   ：#  touch   /tmp/{1..100}.mp3    :创建1到100个文件"></a>4、  花括号展开   ：#  touch   /tmp/{1..100}.mp3    :创建1到100个文件</h4><p>touch  /tmp/{a,b,c,}.jpg      :创建多个后缀相同的文件</p><p>mkdir  -p    /temp/2017-{1..10}.txt</p><h4 id="5、显示时间：-date-回车"><a href="#5、显示时间：-date-回车" class="headerlink" title="5、显示时间：  #  date + 回车"></a>5、显示时间：  #  date + 回车</h4><p>date  +%T   ：时间</p><p>date   + %F  ：日期</p><p>date   + %H  ：小时</p><p>date   +%M  ：分钟</p><p>date   +%m  ：月份</p><p>date   +%F-%T  ：完整时间</p><h4 id="6、命令引用："><a href="#6、命令引用：" class="headerlink" title="6、命令引用："></a>6、命令引用：</h4><p>​           1）  #   touch  /tmp/$(date +%F-%T).tet  :创建以时间为文件名的文件（$（）引用命令）<br>​            2）  #  touch  /tmp/<code>date +%F-%T</code>.tet  :创建以时间为文件名的文件（反引号引用命令）</p><h4 id="7、复制文件-目录："><a href="#7、复制文件-目录：" class="headerlink" title="7、复制文件 目录："></a>7、复制文件 目录：</h4><p>mkdir  /{linux,window}</p><p>touch  /linux/{1,2,3}.txt</p><p>cp  /linux/1.txt  /window/</p><p>cp  /linux/2.txt  /window/1.jpg   :复制并重命名为1.jpg （只能复制文件）</p><p>cp  -r  /linux  /widow/    :-r  复制目录</p><p>​        -fn：强制覆盖（文件相同，强制覆盖，不再询问，小心使用）</p><h4 id="8、-移动文件目录"><a href="#8、-移动文件目录" class="headerlink" title="8、 移动文件目录"></a>8、 移动文件目录</h4><p>mv  源文件   目标文件  ：可以移动文件，目录</p><p>mv   /linux/1.txt   /linux/11.txt    :同目录移动，相当于重命名</p><h4 id="9、删除文件目录"><a href="#9、删除文件目录" class="headerlink" title="9、删除文件目录"></a>9、删除文件目录</h4><p>rm  【option】  文件名称</p><p>rm   /linux/11.txt   </p><p>rm -r  /linux/    :删除目录（-f：会强制删除，不再询问）</p><p>​     （可以将文件移动到特定文件当做删除，用rm时会完全删除，无法找回）</p><h4 id="10、-wc-l-etc-passwd-统计文件行数"><a href="#10、-wc-l-etc-passwd-统计文件行数" class="headerlink" title="10、 #   wc  -l  /etc/passwd    :统计文件行数"></a>10、 #   wc  -l  /etc/passwd    :统计文件行数</h4>]]></content>
      
      
      
        <tags>
            
            <tag> Linux入门 </tag>
            
            <tag> 创建复制文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门之查找文件目录（find,tail,head,cat,more,less命令）</title>
      <link href="/posts/59853.html"/>
      <url>/posts/59853.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Linux入门之查找文件目录（find,tail,head,cat,more,less命令）</p><a id="more"></a><h2 id="1、cat命令（适用于文件内容较少）"><a href="#1、cat命令（适用于文件内容较少）" class="headerlink" title="1、cat命令（适用于文件内容较少）"></a>1、cat命令（适用于文件内容较少）</h2><p>  1）cat   /etc/fstab    :查看该文件内容<br>  cat  -n  /etc/fstab    :对文件内容编行号</p><h2 id="2、查看未知内容文件"><a href="#2、查看未知内容文件" class="headerlink" title="2、查看未知内容文件"></a>2、查看未知内容文件</h2><p>  1）more/less   :分页显示文件内容（较大文件）<br>​    more：enter建；按行加载内容，空格：按屏加载（不能倒退），q退出<br>   less：enter建；按行加载内容，空格：按屏加载，方向键上下控制（可倒退），q退出</p><h2 id="3、head命令"><a href="#3、head命令" class="headerlink" title="3、head命令"></a>3、head命令</h2><p>head  /etc/passwd   :显示文件前十行</p><p>head  -n  3   /etc/passwd    :显示文件前3行</p><h2 id="4、tail命令与head用法相似，从文件末查看"><a href="#4、tail命令与head用法相似，从文件末查看" class="headerlink" title="4、tail命令与head用法相似，从文件末查看"></a>4、tail命令与head用法相似，从文件末查看</h2><p>（注：该4个命令只能查看txt文本文件， ，其实命令即是可执行文件</p><h2 id="5、查看文件类型"><a href="#5、查看文件类型" class="headerlink" title="5、查看文件类型"></a>5、查看文件类型</h2><p>file  /etc/passwd    :查看passwd文件类型</p><p>##　6、支持管道</p><p>head  -n  5   /etc/passwd   |   tail  -n  1    :查看文件第五行</p><p>ls  -lhs   /etc/   |   head  -n  5   :显示etc下最大的四个文件名（第一行是文件大小，不显示文件名）</p><p>ls  -lt   /etc/    |     head  -n  10  :显示etc下最近修改的10个文件</p><p>ifconfig   |   head  -n  2     :显示ifconfig内容的前2行</p><h2 id="7、查找文件"><a href="#7、查找文件" class="headerlink" title="7、查找文件"></a>7、查找文件</h2><p>find  路径  查找方式 </p><p>按文件名查找：<br>​                    #   find    /etc/   -name  “<em>.conf”     :查找etc目录下按名称查找以.conf结尾文件。<br>​                    #   find    /etc/   -name  “</em>.conf”   | wc  -l  ：满足条件的文件数目<br>按文件大小查找：<br>​                    #   find    /etc/   -size   +1M   :etc目录下大于1M的文件（-1M：小于1M的文件，无符号：1M：刚好1M的文件）<br>按时间查找文件：<br>​                    #    find  /   -mtime   +7     :查找所有7天前改过的文件（-7：7天内改过的，无无符号类型）（注：Ctrl +c  ：强制结束当前命令）<br>按文件类型查找：(d,b,l,c,-)<br>​                   #    find  /dev/   -type  b    :查找dev文件下的块文件。<br>​                   #   find   /  -mtime  -7   -a  -size   +100k     :（-a  :命令参数并列 ）查找7天内改动并且大于100k的文件<br>​                   #   mkdir   /bj<br>​                   #  touch   /bj/{1..100}.txt<br>​                   #  touch   /bj/{1..100}.jpg<br>​                   #  find  /bj/   -name  “<em>.txt”  -exec  rm  -rf  {}  ;     :找到bj目录下的以。txt结尾的文件并产出（-exec：执行的意思  rm  -rf  {}  ：移除的命令其中{}代表前面命令找到的文件  \；  ：结束标志）<br>​                    #  touch  /bj/{1..100}.txt<br>​                    # find  /bj/  -name  “</em>.txt”   exec   cp  {}  /tmp  ;   :找到bj目录下的以。txt结尾的文件并复制到/tmp目录下</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux入门 </tag>
            
            <tag> 查找文件目录（find,tail,head,cat,more,less命令） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门之用户及权限管理</title>
      <link href="/posts/62534.html"/>
      <url>/posts/62534.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述linux用户及权限管理</p><a id="more"></a><h2 id="1）多用户多任务操作系统"><a href="#1）多用户多任务操作系统" class="headerlink" title="1）多用户多任务操作系统"></a>1）多用户多任务操作系统</h2><p>用户类型<br>​        管理用户  root<br>​        普通用户<br>​                系统用户/程序用户：为了启动某写程序。<br>uid：1-1000系统用，1000往后用户用，可以在创建用户时制定<br>用户相关文件：<br>​      /etc/passwd    :用户信息(每一行即使一个用户信息：登录名，密码占位符，用户组id，用户名，用户bash所在目录。bash沟通用户和内核的应用程序）<br>​      /etc/shadow   ：用户密码：密码是加密的。<br>用户：<br>​    基本组 ：计算机默认将新建用户划分于默认组<br>​     附加组      ：人为分组，更好团队合作</p><h3 id="1）创建用户"><a href="#1）创建用户" class="headerlink" title="1）创建用户"></a>1）创建用户</h3><p>useradd user1    :用户名尽量用英语（无密码用户不允许登录）（/var/spool/mail/   ：邮件文件）</p><p>su - user1  :切换用户（有-时会切换操作环境，无-切换用户，操作环境不变）</p><p>useradd -u 2000 user2   :指定uid</p><p>grouped caiwu</p><p>useradd -g user1 -G caiwu user3  :-g 设定基本组，-G 设定附加组</p><p>useradd -s /sbin/nologin -M apache  :（-s ：shell名 -M ：不创建宿主目录）用于创建系统用户</p><p>useradd -r mysql  :创建系统用户</p><p>useradd -d /tmp/hadoop hadhoop  :-d ：指定用户根目录</p><p>​        #userdel -r user1  :删除用户（-r:删除家目录）</p><p>id -u user2 ：显示用户uid（-g 用户基本组id，-G ：用户附加组id）</p><p>id -u -n user3：显示用户名（-g -n ：显示用户基本组名。-G -n ：用户附加组名）</p><h3 id="2）查看用户id"><a href="#2）查看用户id" class="headerlink" title="2）查看用户id"></a>2）查看用户id</h3><p>id user1  ：会显示用户及组别id</p><h3 id="3）设置用户密码"><a href="#3）设置用户密码" class="headerlink" title="3）设置用户密码"></a>3）设置用户密码</h3><p>passwd  ：更改 当前用户密码</p><p>passwd user1 ：为user1修改密码（root用户)</p><p>passwd -S user1 :查看用户密码状态</p><p>passwd -l user1:锁定密码</p><p>passwd -u user1：解锁用户密码</p><p>passwd -e user1 :强制密码过期</p><h3 id="4）修改用户信息"><a href="#4）修改用户信息" class="headerlink" title="4）修改用户信息"></a>4）修改用户信息</h3><p>usermod [option] 用户名称</p><p>​                -u ：UID<br>​                -g ：组名称<br>​                -G ：附加组名称<br>​                -s ：shell名称</p><p>groupadd shichang</p><p>usermod -G shichang user1：替换附加组</p><p>usermod -aG caiwu user1 ：追加附加组</p><p>用户组管理</p><h3 id="1）创建用户组"><a href="#1）创建用户组" class="headerlink" title="1）创建用户组"></a>1）创建用户组</h3><p>groupadd jinji  ：新建用户组</p><p>groupdel jinji ：删除用户组</p><p>gpasswd -d user1 caiwu ：从财务组中剔除user1.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux入门 </tag>
            
            <tag> 用户权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门之目录介绍</title>
      <link href="/posts/11669.html"/>
      <url>/posts/11669.html</url>
      
        <content type="html"><![CDATA[<p>本文介绍了linux的基本目录</p><a id="more"></a><h2 id="一：目录介绍"><a href="#一：目录介绍" class="headerlink" title="一：目录介绍"></a>一：目录介绍</h2><pre><code>１.　/：根目录（计算机）２. /bin和/sbin：可执行程序（二进制程序）３. /lib和/lib64:库文件（以.so为后缀）４. /boot:启动分区（内核，启动配置文件）５./etc:应用程序配置文件（*.conf后缀）6. /home :普通用户的家目录7. /root:root用户的的家目录8. /dev:    设备文件目录（U盘等）9. /proc和/sys:伪根系统（系统运行过程中的参数）</code></pre><h2 id="二-：常识"><a href="#二-：常识" class="headerlink" title="二  ：常识"></a>二  ：常识</h2><ol><li>ctrl+u：清除终端中当前行的命令</li><li>命令提示符：显示用户名#（管理员）$（普通用户），当前目录名称，计算机名.</li><li>cd加回车：~当前用户的家目录</li></ol><p>​    </p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux入门 </tag>
            
            <tag> 目录介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门之创建复制文件</title>
      <link href="/posts/54332.html"/>
      <url>/posts/54332.html</url>
      
        <content type="html"><![CDATA[<h2 id="1、目录创建："><a href="#1、目录创建：" class="headerlink" title="﻿1、目录创建："></a>﻿1、目录创建：</h2><a id="more"></a><h4 id="1）切换目录：cd-home-wang（绝对路径）"><a href="#1）切换目录：cd-home-wang（绝对路径）" class="headerlink" title="1）切换目录：cd  /home/wang（绝对路径）"></a>1）切换目录：cd  /home/wang（绝对路径）</h4><p>​                      cd  /home/<br>​                      cd  /wang/(相对路径）<br>​                     cd  ..（返回上一级目录）</p><h4 id="2）创建目录：-mkdir-tmp-bj-在tmp下创建bj文件夹）"><a href="#2）创建目录：-mkdir-tmp-bj-在tmp下创建bj文件夹）" class="headerlink" title="2）创建目录：# mkdir  /tmp/bj   (在tmp下创建bj文件夹）"></a>2）创建目录：# mkdir  /tmp/bj   (在tmp下创建bj文件夹）</h4><p>mkdir  sh（当前目录下创建sh文件）</p><p>​            mkdir -p /uplooking/linux(递归创建目录，即uplooking目录也一起创建）</p><h2 id="2、文件管理"><a href="#2、文件管理" class="headerlink" title="2、文件管理"></a>2、文件管理</h2><h4 id="1）查看文件"><a href="#1）查看文件" class="headerlink" title="1）查看文件"></a>1）查看文件</h4><p>ls 【option】目录</p><pre><code>                 # ls 查看当前目录下的文件                  #ls /tmp/ 查看tmp下文件</code></pre><p>选项：<br>-l  ：文件详细信息<br>​                  # ls -l （文件名 ，最后一次修改日期，大小，用户名，用户组名，类型+权限   ）<br> -：文件  d：目录  l：软连接文件（快捷方式)  c<br>:字符设备文件（键盘）  b：块设备文件（硬盘，u盘）<br>-h ：文件大小变化单位(可读）<br>​       # ls   -lh /etc/passwd<br>   -a :显示所有文件(以.开头的文件）<br>-t ：按降序将文件按修改时间排序（最近改动的在后面）<br>-s  ：把文件按大小排序</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux入门 </tag>
            
            <tag> 创建复制文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis和Spring的初次会面</title>
      <link href="/posts/4955.html"/>
      <url>/posts/4955.html</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis和Spring的初步整合"><a href="#Mybatis和Spring的初步整合" class="headerlink" title="Mybatis和Spring的初步整合"></a>Mybatis和Spring的初步整合</h1><ol><li>下载MyBatis与Spring整合jar包：<a href="https://github.com/mybatis/spring" target="_blank" rel="noopener">点击</a></li><li>创建一个Java工程，导入相应jar包并为该工程创建Spring配置文件：<br><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190723220140.png" alt="图片"></li><li>各文件源码如下：</li><li><strong>application的部分配置文件如下</strong><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.zaxxer.hikari.HikariDataSource"</span> id <span class="token operator">=</span><span class="token string">"dataSource"</span> destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"close"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"jdbcUrl"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/test"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span> <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.mybatis.spring.SqlSessionFactoryBean"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> value<span class="token operator">=</span><span class="token string">"#{dataSource }"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"configLocation"</span> value<span class="token operator">=</span><span class="token string">"classpath:mybatis-config.xml"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>     <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"mapperLocations"</span> value<span class="token operator">=</span><span class="token string">"classpath:sql/*.xml"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span> <span class="token operator">&lt;</span>mybatis<span class="token operator">-</span>spring<span class="token operator">:</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.zzu"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><blockquote><p>注：这是spring配置文件中bean的配置信息<br>第一个<bean>标签配置了数据库的连接池<br>第二个<bean>标签配置了Mybatis与Spring的结合，主要讲Mybatis中的数据库连接指定为spring配置的数据库的连接。以及加载，mybatis的配置文件及各种sql的配置文件<br>classpath:sql/*.xml：表明为当前目录下的sql包下的所有以xml结尾的配置文件<br>&lt;mybatis-spring:scan base-package=”com.zzu”/&gt;：扫描com.zzu包下的所有接口，并为其创建动态代理，放在Spring的IOC容器中。</p></blockquote></li></ol><p><strong>area.xml的源码如下</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.zzu.area.IAreaDao"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"select"</span> resultType<span class="token operator">=</span><span class="token string">"java.lang.String"</span><span class="token operator">></span>        select name from area where code <span class="token operator">=</span>#<span class="token punctuation">{</span>code<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span></code></pre><blockquote><p>注：DOCTYPE语句的作用同上<br>namespace属性用来匹配该sql语句作用的接口<br>select标签表示查看的sql语句，id属性指明该sql语句作用的方法。resultType属性指明该方法的返回值类型<br><strong>mybatis-config的配置文件如下</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE configuration PUBLIC <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span></code></pre><blockquote><p>注：即使该mybatis-config的配置文件并没有任何配置<configuration>标签依然不能省去，否则会报错<br><strong>IAreaDao的源码如下：</strong></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zzu<span class="token punctuation">.</span>area<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAreaDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">select</span><span class="token punctuation">(</span>String code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>test类的源码如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zzu<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zzu<span class="token punctuation">.</span>area<span class="token punctuation">.</span>IAreaDao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"application.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IAreaDao areaDao <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>IAreaDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>areaDao<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationContext<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注：创建IOC容器<br>获取容器中的类（该类是jdk动态代理类）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis与Spring </tag>
            
            <tag> 简单工程搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql入门之字段类型</title>
      <link href="/posts/41290.html"/>
      <url>/posts/41290.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了mysql中的字段类型</p><a id="more"></a><h4 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1. 整数类型"></a>1. 整数类型</h4><ol><li>tinyInt：很小的整数。</li><li>smallint：小的整数。</li><li>mediumint：中等大小的整数。</li><li>int(integer)：普通大小的整数。<h4 id="2-小数类型"><a href="#2-小数类型" class="headerlink" title="2. 小数类型"></a>2. 小数类型</h4></li><li>float(m,d)：单精度浮点数,m表示数字长度，d表示小数位数，例如float(5,2)最大值999.99。</li><li>double(m,d)：双精度浮点数。</li><li>decimal(m,d)：压缩严格的定点数。<h4 id="3-日期类型"><a href="#3-日期类型" class="headerlink" title="3.日期类型"></a>3.日期类型</h4></li><li>year：YYYY  1901~2155</li><li>time：HH:MM:SS  -838:59:59~838:59:59</li><li>date：YYYY-MM-DD 1000-01-01~9999-12-3</li><li>datetime：YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00~ 9999-12-31 23:59:59</li><li>timestamp：YYYY-MM-DD HH:MM:SS  1970<del>01</del>01 00:00:01 UTC~2038-01-19 03:14:07UTC.<blockquote><p>注：timestamp：TIMESTAMP列用于INSERT或UPDATE操作时记录日期和时间。如果你不分配一个值，表中的第一个TIMESTAMP列自动设置为最近操作的日期和时间。也可以通过分配一个NULL值，将TIMESTAMP列设置为当前的日期和时间。并且timestamp有时间范围的限制，目前1970年之前月2037年之后的时间都不能使用timestamp.</p></blockquote><h4 id="4-文本二进制类型（不常用）"><a href="#4-文本二进制类型（不常用）" class="headerlink" title="4. 文本二进制类型（不常用）"></a>4. 文本二进制类型（不常用）</h4></li><li><strong>CHAR(M)</strong>：M为0~255之间的整数，<strong>空间长度不可变，多用来存储长度一定的数据（身份证号码，电话号码等）</strong></li><li><strong>VARCHAR(M)</strong>：M为0~65535之间的整数，<strong>空间长度可变，存储长度可变的信息（地址等长度不确定）</strong></li><li>TINYBLOB：允许长度0~255字节</li><li>BLOB：允许长度0~65535字节</li><li>MEDIUMBLOB：允许长度0~167772150字节</li><li>LONGBLOB：允许长度0~4294967295字节</li><li>TINYTEXT：允许长度0~255字节</li><li>TEXT：允许长度0~65535字节</li><li>MEDIUMTEXT：允许长度0~167772150字节</li><li>LONGTEXT：允许长度0~4294967295字节</li><li>VARBINARY(M)：允许长度0~M个字节的变长字节字符串</li><li>BINARY(M)：允许长度0~M个字节的定长字节字符串。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> mysql入门 </tag>
            
            <tag> mysql入门之字段类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04平台下用github搭建个人博客（含域名绑定和更换主题）</title>
      <link href="/posts/14996.html"/>
      <url>/posts/14996.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Ubuntu18.04平台下用github搭建个人博客（含域名绑定和更换主题）</p><a id="more"></a><h2 id="1-hexo简介"><a href="#1-hexo简介" class="headerlink" title="1.hexo简介"></a>1.hexo简介</h2><p>Hexo 是一个博客框架，用来生成静态网页。</p><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h2><pre><code>$ sudo apt-get install git-core</code></pre><h2 id="3-安装Node-js"><a href="#3-安装Node-js" class="headerlink" title="3.安装Node.js"></a>3.安装Node.js</h2><p>1）安装nvm（用来安装Node.js）<br>安装依赖包</p><pre class=" language-shell"><code class="language-shell">$ sudo apt-get update$ sudo apt-get install build-essential libssl-dev</code></pre><p>第一种方式，根据curl</p><pre><code>$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.4/install.sh | bash</code></pre><p>第二种方式，根据wget</p><pre><code>$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.4/install.sh | bash</code></pre><blockquote><p>注：使用nvm –help查看是否安装成功<br>2）重启终端执行以下命令</p></blockquote><pre><code>$ nvm install stable</code></pre><h2 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4.安装Hexo"></a>4.安装Hexo</h2><pre><code>$ npm install -g hexo-cli</code></pre><p>1）建站</p><pre><code> $ hexo init &lt;folder&gt; $ cd &lt;folder&gt; $ npm install</code></pre><blockquote><p>注：folder是你建的文件夹名，可任意取名，默认是hexo</p></blockquote><p>2）生成静态页面</p><pre><code>hexo g</code></pre><p>3）启动服务器</p><pre><code>hexo s</code></pre><blockquote><p>注：hexo命令是在你建立的博客文件目录下执行，这时候就可以用浏览器打开网址： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 来进行预览了。</p></blockquote><h2 id="5-注册GitHub账号"><a href="#5-注册GitHub账号" class="headerlink" title="5.注册GitHub账号"></a>5.注册GitHub账号</h2><p>新建一个repositories，<strong>格外注意：repositories名字必须为用户名.github.io</strong></p><h2 id="6-配置ssh"><a href="#6-配置ssh" class="headerlink" title="6.配置ssh"></a>6.配置ssh</h2><p>1）执行下面命令生成SSH</p><pre><code>ssh-keygen</code></pre><blockquote><p>注：三次回车之后，可以生成id_rsa.pub文件，这里面就是SSH key的内容，然后使用vim编辑器打开这个文件</p></blockquote><pre><code>vim ~/.ssh/id_rsa.pub</code></pre><blockquote><p>注之后把里面的内容都拷贝下来，打开github，点击右上角自己的头像，点击settings，再点击SSH，之后添加new ssh key，最后把复制的信息都粘贴进去，title随便写，最后输入以下命令判断SSH是否配置好：</p></blockquote><pre><code>ssh -T git@github.com</code></pre><p>如果出现</p><pre><code>Hi! You&#39;ve successfully authenticated, but GitHubdoes not provide shell access.</code></pre><p>就表示你已经配置好了SSH </p><p><img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180923161548948?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><h2 id="7-配置-Git-个人信息"><a href="#7-配置-Git-个人信息" class="headerlink" title="7. 配置 Git 个人信息"></a>7. 配置 Git 个人信息</h2><p>设置Git的user name和email：(如果是第一次的话)</p><pre><code>git config --global user.name &quot;github用户名&quot;git config --global user.email &quot;你注册的邮箱地址&quot;</code></pre><p>生成密钥</p><pre><code>ssh-keygen -t rsa -C &quot;你注册的邮箱地址&quot;</code></pre><p> 配置Deployment<br>在_config.yml文件中，找到Deployment，然后按照如下修改：</p><pre><code>deploy:type: gitrepo: git@github.com:用户名/用户名.github.io.gitbranch: master</code></pre><p>最后执行以下命令：</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>“用户名”.github.io就可以访问你的博客了。</p><h2 id="8-换成next主题"><a href="#8-换成next主题" class="headerlink" title="8.换成next主题"></a>8.换成next主题</h2><pre><code>$ cd your-hexo-site</code></pre><p>$ git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</p><p>启用主题，与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。</p><p>启用 NexT 主题<br>theme: next<br>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。<br>更详细的请参看（nexT的官方文档）[<a href="http://theme-next.iissnan.com/getting-started.html]" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html]</a></p><h2 id="9-绑定域名"><a href="#9-绑定域名" class="headerlink" title="9.绑定域名"></a>9.绑定域名</h2><p>1）获取github的IP</p><pre><code>$ ping www.用户名.github.io</code></pre><p>2）购买域名（以阿里云为例）<br>进入控制台，点击域名后的解析，添加解析，<br>如图<img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180923161813128?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br>3）GitHub解析<br>在Github的xxx.github.io项目,进入【Settings】标签页,在【Custom domain】功能中,将刚刚申请的域名写进去。<br><img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180923161831171?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><p>结语：至此个人简单博客就搭建完成了。</p><blockquote><p>注：我搭建博客遇到的坑<br>1）域名必须实名认证才可以生效<br>2）第一次使用域名必须使用https（GitHub强制要求的），即是输入域名前写上https：//<br>3）配置主题时一定要找官方文档，我根据博客设计高档主题时总会出点错误。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
            <tag> ｎｅｘｔ主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dell游匣笔记本安装win１０和ubuntu双系统详解（英伟达显卡）</title>
      <link href="/posts/21821.html"/>
      <url>/posts/21821.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了dell游匣笔记本安装win10和ubuntu双系统详解（英伟达显卡）</p><a id="more"></a><p>一：修改BIOS设置，使双系统可以更加方便的切换<br>1 开机+f12，进入BIOS<br>2 进入BIOS setup，选择system configuration,<img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180805100643993?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述">选择SATA，进一步选择AHCI<br>3，保存，选择secure ，进入secure boot enable，<img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180805100618273?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述">选择dis，运用，退出<br>二：安装win10系统<br>1进入磁盘管理划分出装Ubuntu系统的磁盘。<br>三：装Ubuntu系统<br>1 插入Ubuntu启动盘，从SMI USB DISK 进入（在win10命令提示设定下，此时会有UEFI:WDCJ10JPVX-75….)<img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180805100248353?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>2选择第二个选项install Ubuntu进入<img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180805100544952?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>3按照提示装好Ubuntu（注：英伟达显卡与Ubuntu系统不兼容，会出现巨卡的现象，下一步解决）<br>4卡的话，关机，拔掉u盘，开机，在第一个选项（*Ubuntu）处按e，这里写图片描述进入<br>5在splash后面的空格再加上nouveau.modeset=0,按f10，进入Ubuntu<img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180805100323487?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>6打开Ubuntu软件，找到驱动更新，下载英伟达驱动。<br>四 结束</p>]]></content>
      
      
      
        <tags>
            
            <tag> 英伟达显卡 </tag>
            
            <tag> Ｄｅｌｌ游匣 </tag>
            
            <tag> win１０和ubuntu双系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql入门之表的操作</title>
      <link href="/posts/63865.html"/>
      <url>/posts/63865.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述Mysql入门中的表的相关操作</p><a id="more"></a><h2 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h2><h4 id="１．-创建表"><a href="#１．-创建表" class="headerlink" title="１．　创建表"></a>１．　创建表</h4><p>语法：</p><pre class=" language-mysql"><code class="language-mysql">create table teacher(    id char(36) primary key auto_increment comment '主键',    user_name varchar(12) not null comment '用户名’ ,    password char(32) unique comment '密码',    sex int(1) default 0 comment '性别’,    unique(user_name)        )</code></pre><blockquote><p>注：表中字段之间用逗号分开，但是最后一个字段无逗号</p></blockquote><p>释义：</p><ol><li>permary key:主键约束。该约束强制字段或字段组合必须具有唯一性且每个字段不能为空。可以为字段级别约束，也可以为表级别约束。</li><li>comment:注释。</li><li>default 0:默认为０．</li><li>auto_incremenrt：设置表字段自增长，默认从1开始.</li><li>not null：指定字段不能为空，只能定义为<strong>字段级约束</strong>；</li><li>指定字段的值（或字段组合的值）对于表中所有的行必须是唯一的。对于无非空约束的字段，唯一键约束允许输入空值，而且可以含有多列为null。可以为字段级别约束，也可以为表级别约束，表级约束时可以定义复合唯一键。（复合唯一键，是与的关系，条件全部一致方为重合键）<blockquote><p>注：ＭｙＳＱＬ数据库通过约束防止无效数据的注入，约束分为字段级约束和表级约束。（字段级约束：只为单个字段添加约束。表级约束：为一个或多个字段添加约束）</p></blockquote><h4 id="2-外键"><a href="#2-外键" class="headerlink" title="2. 外键"></a>2. 外键</h4>oreign key：指定一个字段或字段组合作为一个外键（即外来的主键或唯一键），该外键和另一个表的主键或唯一键（MySQL不支持，Oracle支持）建立起一个关系，只能定义为表级约束.<blockquote><p>注：建立两个表之间的联系，可以防止数据冗余，并且外键无法在原表中被删除，无法向含有外键的表无法添加外检中不存在ｉd的信息（两个表格相互约束）</p></blockquote><pre class=" language-mysql"><code class="language-mysql">＃　创建用户信息表create table user_info(id char(36) primary key,user_name varchar(30) not null,password varchar(30) not null)insert into user_info (id,user_name,password) values ('51b28fe1-4ebf-41ac-a17b-d5e276861fd0','fuliuqingfeng','123456');＃　创建地址表create table address(id char(36) primary key,user_info_id char(36),real_name varchar(8) not null,mobile char(11) not null,address varchar(150) not null,constraint address_user_info_id_fk foreign key(user_info_id) references user_info(id))insert into address (id,user_info_id,real_name,mobile,address) values ('bfb9472a-7911-4e6f-a479-3b719454ebab','51b28fe1-4ebf-41ac-a17b-d5e276861fd0','高焕杰','12345678901','河南');insert into address (id,user_info_id,real_name,mobile,address) values ('5227c6b9-45a2-44aa-8ac0-1f63a38d3b65','51b28fe1-4ebf-41ac-a17b-d5e276861fd0','高焕杰','12345678901','北京');insert into address (id,user_info_id,real_name,mobile,address) values ('30b8584b-aa6a-4516-a623-03f487058586','51b28fe1-4ebf-41ac-a17b-d5e276861fd0','高焕杰','12345678901','山西');</code></pre><blockquote><p>注：这种方案为user_info_id添加了外键，指向user_info表的主键，该约束起到了保护数据完整性的作用：如果删除的用户信息id已经在address表中使用，则该条数据无法删除；无法向address表中添加用户id不存在的地址信息。</p></blockquote><h2 id="2-修改表字段"><a href="#2-修改表字段" class="headerlink" title="2. 修改表字段"></a>2. 修改表字段</h2></li><li>添加字段：<pre class=" language-mysql"><code class="language-mysql">alter table table_name add column_name data_type [default default_value] [column_constaint] [after 字段名] [comment 'comment_content’];# 例子alter table user_info   int(1) default 0 after password add sex ;#向user_info表添加新字段sex，该字段在password之后。</code></pre></li><li>修改字段<pre class=" language-mysql"><code class="language-mysql">alter table table_name    modify column_name data_type [default default_value] ;例子：    ALTER TABLE user_info     MODIFY user_name varchar(15);</code></pre><blockquote><p>　注：字段的修改包括修改数据类型（只有对应列为空指才可以修改）、大小和默认值(默认值的修改只会影响后来插入表的数据，对之前的数据不会产生影响)；而不能修改字段约束、字段先后顺序和注释。</p></blockquote></li><li>删除字段<pre class=" language-mysql"><code class="language-mysql">alter table table_name    drop column_name例子：    alter table user_info    drop sex;</code></pre><blockquote><p>　注：<br>一次只能删除一个字段；<br>一个表至少要保留一个字段；<br>如果所删列(如user_info表中id列)是另一个表的外键（address表user_info_id）则该列（user_info表中id列）无法删除。</p></blockquote></li><li>重命名表<br>rename table 旧名字 to 新名字</li><li>截断表<br>truncate table 表名<blockquote><p>注：截断表后，表中数据也一并被删除，drop不仅用于删除表，表中数据也一并被删除。</p></blockquote></li><li>删除表<br>drop table 表名</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> -Mysql入门 －表的操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC之事务详解</title>
      <link href="/posts/46560.html"/>
      <url>/posts/46560.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-Spring实现事务管理的两种方式："><a href="#一-Spring实现事务管理的两种方式：" class="headerlink" title="一. Spring实现事务管理的两种方式："></a>一. Spring实现事务管理的两种方式：</h2><h3 id="1-编程式事务管理："><a href="#1-编程式事务管理：" class="headerlink" title="1. 编程式事务管理："></a>1. 编程式事务管理：</h3><p>将事务管理代码嵌入到业务方法中来控制事务的提交和回滚，在编程式管理事务中，必须在每个事务操作中包含额外的事务管理代码。</p><h3 id="2-声明式事务管理（推荐）："><a href="#2-声明式事务管理（推荐）：" class="headerlink" title="2. 声明式事务管理（推荐）："></a>2. 声明式事务管理（推荐）：</h3><p>大多数情况下比编程式事务管理更好用，它将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理，Spring声明式事务管理建立在AOP基础之上，是一个典型的横切关注点，通过环绕增强来实现，其原理是对方法前后进行拦截，然后在目标方法开始之前创建或加入一个事务，在执行完毕之后根据执行情况提交或回滚事务，其模型如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//开启事务</span>        <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//提交事务</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//回滚事务</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//释放资源</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二：实现声明式事务配置的步骤"><a href="#二：实现声明式事务配置的步骤" class="headerlink" title="二：实现声明式事务配置的步骤"></a>二：实现声明式事务配置的步骤</h2><ol><li><p>添加spring-aspects-4.3.10.RELEASE.jar包。</p></li><li><p>在Spring配置文件中添加如下配置：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>对jd包下的类进行扫描<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.jd"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span><span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy proxy<span class="token operator">-</span>target<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>数据库连接池及其相关设置<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.zaxxer.hikari.HikariDataSource"</span> destroy<span class="token operator">-</span>method<span class="token operator">=</span><span class="token string">"close"</span><span class="token operator">></span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"jdbcUrl"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/test?characterEncoding=utf8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 连接只读数据库时配置为<span class="token boolean">true</span>， 保证安全 <span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"readOnly"</span> value<span class="token operator">=</span><span class="token string">"false"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省<span class="token operator">:</span><span class="token number">30</span>秒 <span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"connectionTimeout"</span> value<span class="token operator">=</span><span class="token string">"30000"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省<span class="token operator">:</span><span class="token number">10</span>分钟 <span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"idleTimeout"</span> value<span class="token operator">=</span><span class="token string">"600000"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省<span class="token operator">:</span><span class="token number">30</span>分钟，建议设置比数据库超时时长少<span class="token number">30</span>秒，参考MySQL wait_timeout参数（show variables like <span class="token string">'%timeout%'</span><span class="token punctuation">;</span>） <span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxLifetime"</span> value<span class="token operator">=</span><span class="token string">"1800000"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 连接池中允许的最大连接数。缺省值：<span class="token number">10</span>；推荐的公式：<span class="token punctuation">(</span><span class="token punctuation">(</span>core_count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> effective_spindle_count<span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maximumPoolSize"</span> value<span class="token operator">=</span><span class="token string">"15"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.core.JdbcTemplate"</span><span class="token operator">></span> <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置事务管理器 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span> p<span class="token operator">:</span>dataSource<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 启用事务注解 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>tx<span class="token operator">:</span>annotation<span class="token operator">-</span>driven transaction<span class="token operator">-</span>manager<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><blockquote><p>注：（1）：该配置只为application.xml文件中部分相关配置。（2）：一个类含有@Transactional注解修饰的方法，则Spring框架自动为该类创建代理对象，默认使用JDK创建代理对象，可以通过添加&lt;aop:aspectj-autoproxy proxy-target-class=”true”/&gt;使用CGLib创建代理对象，此时需要添加aspectjweaver-x.x.x.jar包。</p></blockquote></li><li><p>在Service层public方法上添加事务注解——@Transactional</p><blockquote><p>注： 不能在protected、默认或者private的方法上使用@Transactional注解，否则无效。</p></blockquote><h2 id="三-Transactional注解属性"><a href="#三-Transactional注解属性" class="headerlink" title="三: @Transactional注解属性"></a>三: @Transactional注解属性</h2><h3 id="1-rollbackFor和rollbackForClassName"><a href="#1-rollbackFor和rollbackForClassName" class="headerlink" title="1. rollbackFor和rollbackForClassName"></a>1. rollbackFor和rollbackForClassName</h3></li><li><p>释义：指定对哪些异常回滚事务。默认情况下，如果在事务中抛出了运行时异常（继承自RuntimeException异常类），则回滚事务；如果没有抛出任何异常，或者抛出了检查时异常，则依然提交事务。这种处理方式是大多数开发者希望的处理方式，也是 EJB 中的默认处理方式；但可以根据需要人为控制事务在抛出某些运行时异常时仍然提交事务，或者在抛出某些检查时异常时回滚事务.<br>运行时异常的回滚实例：<br><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190714232651.png" alt="运行时异常的回滚实例"></p><blockquote><p>注：书籍表中有50本书籍，每本书10元，一个人钱包有1元，欲买50本，则该行代码抛出MoneyException异常，但由于该异常为运行时异常，所以回滚数据。<br>检查时异常通过rollbackFor和rollbackForClassName确定回滚异常的回滚实例<br>！<a href="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190715080733.png" target="_blank" rel="noopener"></a><br>注：书籍表中有50本书籍，每本书10元，一个人钱包有1元，欲买50本，则该行代码抛出MoneyException异常，但由于该异常为检查时异常，所以若无@Transactional(rollbackFor=MoneyException.class)则不进行回滚<br>通过@Transactional(rollbackFor=MoneyException.class)确定出现MoneyException的检查时异常时依然回滚。<br>上例代码不能try-catch处理检查时异常（已捕获异常，异常不在上传），否则即便@Transactional注解中添加了rollbackFor=MoneyException.class，事务也不会回滚，如下代码：<br><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190715081415.png" alt=""><br>注：籍表中有50本书籍，每本书10元，一个人钱包有1元，欲买50本，则该行代码抛出MoneyException异常，尽管该异常为检查时异常，且@Transactional注解中添加了rollbackFor=MoneyExcepti</p></blockquote><h3 id="2-noRollbackFor和noRollbackForClassName"><a href="#2-noRollbackFor和noRollbackForClassName" class="headerlink" title="2.noRollbackFor和noRollbackForClassName"></a>2.noRollbackFor和noRollbackForClassName</h3></li><li><p>释义：指定对哪些异常不回滚事务。</p><blockquote><p>注：原理同上</p></blockquote><h3 id="3-readOnly"><a href="#3-readOnly" class="headerlink" title="3. readOnly"></a>3. readOnly</h3></li><li><p>释义;事务只读，指对事务性资源进行只读操作。所谓事务性资源就是指那些被事务管理的资源，比如数据源、 JMS 资源，以及自定义的事务性资源等等。如果确定只对事务性资源进行只读操作，那么可以将事务标志为只读的，以提高事务处理的性能。在 TransactionDefinition 中以 boolean 类型来表示该事务是否只读。由于只读的优化措施是在一个事务启动时由后端数据库实施的， 因此，只有对于那些具有可能启动一个新事务的传播行为（PROPAGATION_REQUIRES_NEW、PROPAGATION_REQUIRED、 ROPAGATION_NESTED）的方法来说，将事务声明为只读才有意义。<br>实例如下：<br>！<a href="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190715082126.png" target="_blank" rel="noopener"></a></p></li></ol><blockquote><p>注：@Transactional注解中添加了readOnly=true，但@Transactional注解修饰的方法涉及数据的修改，因此抛出如下异常：<br>Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed</p></blockquote><h3 id="4-timeout"><a href="#4-timeout" class="headerlink" title="4.timeout"></a>4.timeout</h3><ol><li><p>释义：设置一个事务所允许执行的最长时长（单位：秒），如果超过该时长且事务还没有完成，则自动回滚事务且出现org.springframework.transaction.TransactionTimedOutException异常，如下代码：<br>！<a href="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190715170513.png" target="_blank" rel="noopener"></a></p><blockquote><p>注：Thread.sleep(4000)会使得当前事务4秒之后结束，该时长超出了所允许的最长时长，因此事务自动回滚，书籍表库存递减操作无效，程序出现org.springframework.transaction.TransactionTimedOutException异常！<br>1、事务的开始往往会发生数据库的表锁或者被数据库优化为行锁，如果允许时间过长，那么这些数据会一直被锁定，最终影响系统的并发性，因此可以给这些事务设置超时时间以规避该问题。<br>2、由于超时是在一个事务启动的时候开始的，因此，只有对于那些具有可能启动一个新事务的传播行为（PROPAGATION_REQUIRES_NEW、PROPAGATION_REQUIRED、ROPAGATION_NESTED）的方法来说，声明事务超时才有意义。</p></blockquote><h2 id="四：事务的传播机制"><a href="#四：事务的传播机制" class="headerlink" title="四：事务的传播机制"></a>四：事务的传播机制</h2><h3 id="propagation："><a href="#propagation：" class="headerlink" title="propagation："></a>propagation：</h3><p>指定事务传播行为，一个事务方法被另一个事务方法调用时，必须指定事务应该如何传播，例如：方法可能继承在现有事务中运行，也可能开启一个新事物，并在自己的事务中运行。Spring定义了如下7种事务传播行为：</p><h4 id="REQUIRED："><a href="#REQUIRED：" class="headerlink" title="REQUIRED："></a>REQUIRED：</h4><p>默认值，如果有事务在运行，当前的方法就在这个事务内运行，否则，就启动一个新的事务，并在自己的事务内运行</p><h4 id="REQUIRES-NEW："><a href="#REQUIRES-NEW：" class="headerlink" title="REQUIRES_NEW："></a>REQUIRES_NEW：</h4><p>当前方法必须启动新事务，并在它自己的事务内运行，如果有事务在运行，则把当前事务挂起，直到新的事务提交或者回滚才恢复执行。</p><h4 id="SUPPORTS："><a href="#SUPPORTS：" class="headerlink" title="SUPPORTS："></a>SUPPORTS：</h4><p>如果有事务在运行，当前的方法就在这个事务内运行，否则以非事务的方式运行；</p><h4 id="NOT-SUPPORTED："><a href="#NOT-SUPPORTED：" class="headerlink" title="NOT_SUPPORTED："></a>NOT_SUPPORTED：</h4><p>当前的方法不应该运行在事务中，如果有运行的事务，则将它挂起；</p><h4 id="NEVER："><a href="#NEVER：" class="headerlink" title="NEVER："></a>NEVER：</h4><p>当前方法不应该运行在事务中，否则将抛出异常；</p><h4 id="MANDATORY（mandatory-ˈmaendətoːri-adj-强制的）："><a href="#MANDATORY（mandatory-ˈmaendətoːri-adj-强制的）：" class="headerlink" title="MANDATORY（mandatory [ˈmændətɔːri] adj.强制的）："></a>MANDATORY（mandatory [ˈmændətɔːri] adj.强制的）：</h4><p>当前方法必须运行在事务内部，否则将抛出异常；</p><h4 id="NESTED（nest-nest-v-嵌套）："><a href="#NESTED（nest-nest-v-嵌套）：" class="headerlink" title="NESTED（nest [nest] v.嵌套）："></a>NESTED（nest [nest] v.嵌套）：</h4><p>如果有事务在运行，当前的方法在这个事务的嵌套事务内运行，否则就启动一个新的事务，并在它自己的事务内运行，此时等价于REQUIRED。注意：对于NESTED内层事务而言，内层事务独立于外层事务，可以独立递交或者回滚,如果内层事务抛出的是运行异常，外层事务进行回滚，内层事务也会进行回滚。<br>部分示例代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     ClassPathXmlApplicationContext application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"application.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//购物车购买</span>     ICarService carService <span class="token operator">=</span> application<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>CarService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     String userId <span class="token operator">=</span> <span class="token string">"aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"</span><span class="token punctuation">;</span>     Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> commodities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     commodities<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a2f39533-659f-42ca-af91-c688a83f6e49"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     commodities<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"4c37672a-653c-4cc8-9ab5-ee0c614c7425"</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     carService<span class="token punctuation">.</span><span class="token function">batch</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> commodities<span class="token punctuation">)</span><span class="token punctuation">;</span>     application<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarService</span> <span class="token keyword">implements</span> <span class="token class-name">ICarService</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> ICouponService couponService<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//购物车购买</span> <span class="token annotation punctuation">@Override</span> <span class="token annotation punctuation">@Transactional</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">batch</span><span class="token punctuation">(</span>String userId<span class="token punctuation">,</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Integer<span class="token operator">></span> commodities<span class="token punctuation">)</span> <span class="token punctuation">{</span>     Set<span class="token operator">&lt;</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">>></span> set <span class="token operator">=</span> commodities<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> commodity <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>         String bookId <span class="token operator">=</span> commodity<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> count <span class="token operator">=</span> commodity<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bookId<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>         couponService<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span>bookId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CouponService</span> <span class="token keyword">implements</span> <span class="token class-name">ICouponService</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> IBookDao bookDao<span class="token punctuation">;</span> <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> IMoneyDao moneyDao<span class="token punctuation">;</span> <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> ICouponDao couponDao<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//立即购买</span> <span class="token annotation punctuation">@Override</span> <span class="token annotation punctuation">@Transactional</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">insert</span><span class="token punctuation">(</span>String userId<span class="token punctuation">,</span>String bookId<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>bookDao<span class="token punctuation">.</span><span class="token function">enough</span><span class="token punctuation">(</span>bookId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//书籍足够</span>         <span class="token comment" spellcheck="true">//书籍表库存递减</span>         bookDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>bookId<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">double</span> price <span class="token operator">=</span> bookDao<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span>bookId<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">double</span> total <span class="token operator">=</span> price<span class="token operator">*</span>count<span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>moneyDao<span class="token punctuation">.</span><span class="token function">enough</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//余额足够</span>         <span class="token comment" spellcheck="true">//订单表添加数据</span>         Coupon coupon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Coupon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         coupon<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         coupon<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>         coupon<span class="token punctuation">.</span><span class="token function">setBookId</span><span class="token punctuation">(</span>bookId<span class="token punctuation">)</span><span class="token punctuation">;</span>         coupon<span class="token punctuation">.</span><span class="token function">setTotal</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>         couponDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>coupon<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//钱包表递减</span>         moneyDao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><blockquote><p>注：其实这两个事务可以当做一个，即insert方法上的事务注解可以省略。<br>但是当insert方法上的事务注解添加REQUIRES_NEW属性时，insert方法每次执行即创建一个新的事务</p></blockquote><h2 id="五：事务的隔离机制"><a href="#五：事务的隔离机制" class="headerlink" title="五：事务的隔离机制"></a>五：事务的隔离机制</h2><p>###isolation：指定事务隔离级别，Spring定义了如下5种事务隔离级别：</p><h4 id="DEFAULT："><a href="#DEFAULT：" class="headerlink" title="DEFAULT："></a>DEFAULT：</h4><p>默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常为READ_COMMITTED。</p><h4 id="READ-UNCOMMITTED："><a href="#READ-UNCOMMITTED：" class="headerlink" title="READ_UNCOMMITTED："></a>READ_UNCOMMITTED：</h4><p>表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别可能出现脏读、不可重复读或幻读，因此很少使用该隔离级别。</p><h4 id="READ-COMMITTED："><a href="#READ-COMMITTED：" class="headerlink" title="READ_COMMITTED："></a>READ_COMMITTED：</h4><p>表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，但可能出现不可重复读或幻读，这也是大多数情况下的推荐值。</p><h4 id="REPEATABLE-READ："><a href="#REPEATABLE-READ：" class="headerlink" title="REPEATABLE_READ："></a>REPEATABLE_READ：</h4><p>表示一个事务在整个过程中可以多次重复执行某个查询，且每次返回的记录都相同，除非数据被当前事务自生修改。即使在多次查询之间有新增的数据满足该查询，这些新增的记录也会被忽略。该级别可以防止脏读和不可重复读，但可能出现幻读。</p><h4 id="SERIALIZABLE："><a href="#SERIALIZABLE：" class="headerlink" title="SERIALIZABLE："></a>SERIALIZABLE：</h4><p>表示所有的事务依次逐个执行，事务之间互不干扰，该级别可以防止脏读、不可重复读和幻读，但是这将严重影响程序的性能，因此通常情况下也不会用到该级别。</p><blockquote><p>注：事务的隔离级别要得到底层数据库引擎的支持, 而不是应用程序或者框架的支持：Oracle 支持READ_COMMITED和SERIALIZABLE两种事务隔离级别，默认为READ_COMMITED；MySQL 支持READ_UNCOMMITTED、READ_COMMITTED、REPEATABLE_READ和SERIALIZABLE四种事务隔离级别，默认为:REPEATABLE_READ。</p></blockquote><h3 id="并发导致数据出现的问题"><a href="#并发导致数据出现的问题" class="headerlink" title="并发导致数据出现的问题"></a>并发导致数据出现的问题</h3><h4 id="1-脏读-Drity-Read"><a href="#1-脏读-Drity-Read" class="headerlink" title="1.脏读(Drity Read)"></a>1.脏读(Drity Read)</h4></li><li><p>释义：已知有两个事务A和B, A读取了已经被B更新但还没有被提交的数据，之后，B回滚事务，A读取的数据就是脏数据。</p><blockquote><p>注：即事务b读取了事务a在内存中修改的数据（未提交写入数据库的磁盘）<br>即READ_UNCOMMITTED（读未提交隔离机制）即可发生的问题<br>场景：公司发工资了，领导把5000元打到Tom的账号上，但是该事务并未提交，而Tom正好去查看账户，发现工资已经到账，账户多了5000元，非常高兴，可是不幸的是，领导发现发给Tom的工资金额不对，是2000元，于是迅速回滚了事务，修改金额后，将事务提交，Tom再次查看账户时发现账户只多了2000元。</p></blockquote><h4 id="2-不可重复读-Non-repeatable-read"><a href="#2-不可重复读-Non-repeatable-read" class="headerlink" title="2. 不可重复读(Non-repeatable read)"></a>2. 不可重复读(Non-repeatable read)</h4></li><li><p>释义：已知有两个事务A和B，A 多次读取同一数据，B 在A多次读取的过程中对数据作了修改并提交，导致A多次读取同一数据时，结果不一致。</p><blockquote><p>注：即事务b在前后读取一个数据的期间，事务a对该数据进行了修改。<br>READ_COMMITED隔离机制即可发生该问题<br>场景：Tom拿着工资卡去消费，酒足饭饱后在收银台买单，服务员告诉他本次消费1000元，Tom将银行卡给服务员，服务员将银行卡插入POS机，POS机读到卡里余额为3000元，就在Tom磨磨蹭蹭输入密码时，他老婆以迅雷不及掩耳盗铃之势把Tom工资卡的3000元转到自己账户并提交了事务，当Tom输完密码并点击“确认”按钮后，POS机检查到Tom的工资卡已经没有钱，扣款失败。</p></blockquote><h4 id="3-幻读-Phantom-Read"><a href="#3-幻读-Phantom-Read" class="headerlink" title="3.幻读(Phantom Read)"></a>3.幻读(Phantom Read)</h4></li><li><p>释义：已知有两个事务A和B，A从一个表中读取了数据，然后B在该表中插入了一些新数据，导致A再次读取同一个表, 就会多出几行，简单地说，一个事务中</p><blockquote><p>注：事务b前后读取的数据库期间，事务a对该数据库进行了增加操作<br>场景：om的老婆工作在银行部门，她时常通过银行内部系统查看Tom的工资卡消费记录。2019年5月的某一天，她查询到Tom当月工资卡的总消费额（select sum(amount) from record where card_id=’6226090219290000’ and date_format(create_time,’%Y-%m’)=’2019-05’）为80元，Tom的老婆非常吃惊，心想“老公真是太节俭了，嫁给他真好！”，而Tom此时正好在外面胡吃海塞后在收银台买单，消费1000元，即新增了一条1000元的消费记录并提交了事务，沉浸在幸福中的老婆查询了Tom当月工资卡消费明细（select amount from record where card_id=’6226090219290000’ and date_format(create_time,’%Y-%m’)=’2019-05’）一探究竟，可查出的结果竟然发现有一笔1000元的消费。</p></blockquote><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h4><p>不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表。</p><h3 id="用数据库的事务隔离机制对数据问题进行解决"><a href="#用数据库的事务隔离机制对数据问题进行解决" class="headerlink" title="用数据库的事务隔离机制对数据问题进行解决"></a>用数据库的事务隔离机制对数据问题进行解决</h3></li><li><p>Read uncommitted（读未提交）：可能出现脏读、不可重复读和幻读。</p></li><li><p>Read committed（读提交）：可以避免脏读，但可能出现不可重复读和幻读。大多数数据库默认级别就是Read committed，比如Sql Server数据库和Oracle数据库。注意：该隔离级别在写数据时只会锁住相应的行。</p></li><li><p>Repeatable read（重复读）：可以避免脏读和不可重复读，但可能出现幻读。注意：事务隔离级别为可重复读时，如果检索条件有索引（包括主键索引）的时候，默认加锁方式是next-key 锁；如果检索条件没有索引，更新数据时会锁住整张表。一个间隙被事务加了锁，其他事务是不能在这个间隙插入记录的，这样可以防止幻读。</p></li><li><p>Serializable（序列化）：可以避免脏读、不可重复读和幻读，但是并发性极低，一般很少使用。注意：该隔离级别在读写数据时会锁住整张表。<br>总结：<br>！<a href="![](https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190715175413.png)"></a></p><blockquote><p>注：√表示可能出现，×表示不会出现<br>隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。</p></blockquote><h3 id="MySQL事务隔离级别"><a href="#MySQL事务隔离级别" class="headerlink" title="MySQL事务隔离级别"></a>MySQL事务隔离级别</h3></li><li><p>查看隔离机制：MySQL数据库支持Read uncommitted、Read committed、Repeatable read和Serializable四种事务隔离级别，默认为Repeatable read，可以通过如下语句查看MySQL数据库事务隔离级别：</p><pre class=" language-mysql"><code class="language-mysql">select @@global.tx_isolation,@@tx_isolation;</code></pre></li><li><p>修改数据库的隔离机制<br>MySQL数据库事务隔离级别的修改分为全局修改和当前session修改，具体修改方法如下：<br>1、全局修改<br>①、在my.ini配置文件最后加上如下配置：<br>#可选参数有：READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE.<br>[mysqld]<br>②、重启MySQL服务<br>2、当前session修改，登录MySQL数据库后执行如下命令：<br>set session transaction isolation level read </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事务的传播 </tag>
            
            <tag> 事务的注解 </tag>
            
            <tag> 事务的隔离机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea快捷键大全</title>
      <link href="/posts/34481.html"/>
      <url>/posts/34481.html</url>
      
        <content type="html"><![CDATA[<h2 id="本人常用"><a href="#本人常用" class="headerlink" title="本人常用"></a>本人常用</h2><ol><li>Ctrl+X，删除行</li><li>Ctrl+D，复制行</li><li>Ctrl+F，查找文本</li><li>Ctrl+E，最近的文件</li><li>ctrl +/:多行分行注释</li><li>ctrl+space：代码补全</li><li>Ctrl+Backspace，按单词删除</li><li>double shift：全局搜索设置</li><li>Shift+Enter | :向下插入新行</li><li>Ctrl＋[或]可以跳到大括号的开头结尾</li><li>Ctrl+W，可以选择单词继而语句继而行继而函数</li><li>ctrl+shift+a ：打开设置页面</li><li>Ctrl+Shift+E，最近更改的文件</li><li>ctrl+shift+/:多行首尾注释</li><li>crrl+shift+{/}：快速选中代码块</li><li>Ctrl+Alt+O，优化导入的类和包</li><li>Alt＋Insert可以生成构造器/Getter/Setter等</li><li>Ctrl＋Alt＋T可以把代码包在一块内，例如try/catch</li></ol><h3 id="模板（livetemplate）"><a href="#模板（livetemplate）" class="headerlink" title="模板（livetemplate）"></a>模板（livetemplate）</h3><p>editor livetemplate<br>soutv，soutp，soutm，num1.soutv<br>fori,iter,itar,list.for,list.fori<br>ifn,<br>prsf:私有静态，常量</p><h2 id="【常规】"><a href="#【常规】" class="headerlink" title="【常规】"></a>【常规】</h2><ol><li>Ctrl+Shift + Enter，语句完成</li><li>“！”，否定完成，输入表达式时按 “！”键</li><li>Ctrl+[ OR ]，可以跑到大括号的开头与结尾</li><li>Ctrl+F12，可以显示当前文件的结构</li><li>Ctrl+Shift+N，可以快速打开文件</li><li>Alt+Q，可以看到当前方法的声明</li><li>Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch</li><li>Ctrl+Enter，导入包，自动修正</li><li>Ctrl+Alt+L，格式化代码</li><li>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作</li><li>Ctrl+Shift+Space，自动补全代码</li><li>Ctrl+空格，代码提示（与系统输入法快捷键冲突）</li><li>Ctrl+Shift+Alt+N，查找类中的方法或变量</li><li>Alt+Shift+C，最近的更改</li><li>Alt+Shift+Up/Down，上/下移一行</li><li>Ctrl+J，自动代码（例如：serr）</li><li>Ctrl+Alt+J，用动态模板环绕</li><li>Ctrl+H，显示类结构图（类的继承层次）</li><li>Ctrl+Q，显示注释文档</li><li>Alt+F1，查找代码所在位置</li><li>Alt+1，快速打开或隐藏工程面板</li><li>Ctrl+Alt+left/right，返回至上次浏览的位置</li><li>Alt+left/right，切换代码视图</li><li>Alt+Up/Down，在方法间快速移动定位</li><li>Ctrl+Shift+Up/Down，向上/下移动语句</li><li>F2 或 Shift+F2，高亮错误或警告快速定位</li><li>Tab，代码标签输入完成后，按 Tab，生成代码</li><li>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失</li><li>Alt+F3，逐个往下查找相同文本，并高亮显示</li><li>Ctrl+Up/Down，光标中转到第一行或最后一行下</li><li>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）</li><li>Ctrl+Alt+B，跳转到方法实现处</li><li>Ctrl+Shift+Backspace，跳转到上次编辑的地方</li><li>Ctrl+O，重写方法</li><li>Ctrl+Alt+Space，类名自动完成</li><li>Ctrl+Alt+Up/Down，快速跳转搜索结果</li><li>Ctrl+Shift+J，整合两行</li><li>Alt+F8，计算变量值</li><li>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本</li><li>Ctrl+Alt+Shift+V，简单粘贴</li><li>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口</li><li>F12，把焦点从编辑器移到最近使用的工具窗口</li><li>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</li><li>Ctrl+Shift+W，取消选择光标所在词</li><li>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置</li><li>Ctrl+I，实现方法</li><li>Ctrl+Shift+U，大小写转化</li><li>psvm/sout，main/System.out.println(); Ctrl+J，查看更多</li><li>Ctrl+Shift+F，全局查找</li><li>Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找</li><li>Ctrl+Shift+S，高级搜索</li><li>Ctrl+U，转到父类</li><li>Ctrl+Alt+S，打开设置对话框</li><li>Alt+Shift+Inert，开启/关闭列选择模式</li><li>Ctrl+Alt+Shift+S，打开当前项目/模块属性</li><li>Ctrl+G，定位行</li><li>Alt+Home，跳转到导航栏</li><li>Ctrl+Enter，上插一行</li><li>Ctrl+”+/-“，当前方法展开、折叠</li><li>Ctrl+Shift+”+/-“，全部展开、折叠</li><li>【调试部分、编译】</li><li>Ctrl+F2，停止</li><li>Alt+Shift+F9，选择 Debug</li><li>Alt+Shift+F10，选择 Run</li><li>Ctrl+Shift+F9，编译</li><li>Ctrl+Shift+F10，运行</li><li>Ctrl+Shift+F8，查看断点</li><li>F8，步过</li><li>F7，步入</li><li>Shift+F7，智能步入</li><li>Shift+F8，步出</li><li>Alt+Shift+F8，强制步过</li><li>Alt+Shift+F7，强制步入</li><li>Alt+F9，运行至光标处</li><li>Ctrl+Alt+F9，强制运行至光标处</li><li>F9，恢复程序</li><li>Alt+F10，定位到断点</li><li>Ctrl+F8，切换行断点</li><li>Ctrl+F9，生成项目</li><li>Alt+1，项目</li><li>Alt+2，收藏</li><li>Alt+6，TODO</li><li>Alt+7，结构</li><li>Ctrl+Shift+C，复制路径</li><li>Ctrl+Alt+Shift+C，复制引用，必须选择类名</li><li>Ctrl+Alt+Y，同步</li><li>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</li><li>Shift+F12，还原默认布局</li><li>Ctrl+Shift+F12，隐藏/恢复所有窗口</li><li>Ctrl+F4，关闭</li><li>Ctrl+Shift+F4，关闭活动选项卡</li><li>Ctrl+Tab，转到下一个拆分器</li><li>Ctrl+Shift+Tab，转到上一个拆分器<h2 id="【重构】"><a href="#【重构】" class="headerlink" title="【重构】"></a>【重构】</h2></li><li>Ctrl+Alt+Shift+T，弹出重构菜单</li><li>Shift+F6，重命名</li><li>F6，移动</li><li>F5，复制</li><li>Alt+Delete，安全删除</li><li>Ctrl+Alt+N，内联<h2 id="【查找】"><a href="#【查找】" class="headerlink" title="【查找】"></a>【查找】</h2></li><li>Ctrl+F，查找</li><li>Ctrl+R，替换</li><li>F3，查找下一个</li><li>Shift+F3，查找上一个</li><li>Ctrl+Shift+F，在路径中查找</li><li>Ctrl+Shift+R，在路径中替换</li><li>Ctrl+Shift+S，搜索结构</li><li>Ctrl+Shift+M，替换结构</li><li>Alt+F7，查找用法</li><li>Ctrl+Alt+F7，显示用法</li><li>Ctrl+F7，在文件中查找用法</li><li>Ctrl+Shift+F7，在文件中高亮显示用法<h2 id="【VCS】"><a href="#【VCS】" class="headerlink" title="【VCS】"></a>【VCS】</h2></li><li>Alt+~，VCS 操作菜单</li><li>Ctrl+K，提交更改</li><li>Ctrl+T，更新项目</li><li>Ctrl+Alt+Shift+D，显示变化</li></ol>]]></content>
      
      
      <categories>
          
          <category> IDEA工具的使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA工具 </tag>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之ｉo流中的流</title>
      <link href="/posts/19818.html"/>
      <url>/posts/19818.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的io流中的流。</p><a id="more"></a><h3 id="1-IO流"><a href="#1-IO流" class="headerlink" title="1. IO流"></a>1. IO流</h3><ol><li>释义：I是指Input（输入）,O是指Output（输出）。</li><li>来源：在Java中，文件的输入和输出是通过流（Stream）来实现的，流的概念源于Unix中管道（pipe）的概念。在Unix系统中，管道是一条不间断的字节流，用来实现程序或进程间的通信，或读写外围设备、外部文件等。</li><li>特点：一个流，必有源端和目的端，它们可以是计算机内存的某些区域，也可以是磁盘文件，甚至可以是Internet上的某个URL。对于流而言，我们不用关心数据是如何传输的，只需要向源端输入数据，向目的端获取数据即可。</li><li>分来流按照处理数据的单位，可以分为字节流和字符流；按照流向分为输入流和输出流（注意：输入流和输出流都是站在程序的角度参照的）。<h5 id="1-字节流"><a href="#1-字节流" class="headerlink" title="1.   字节流"></a>1.   字节流</h5></li><li>输入类：InputStream抽象类是所有输入字节流类的直接或间接父类，FileInputStream是其重要子类：</li><li>FileInputStream常用构造方法：<ol><li>FileInputStream(File file) ：通过File对象创建FileInputStream对象。</li><li>FileInputStream(String name) ：通过文件（非“目录”）路径创建FileInputStream对象。</li></ol></li><li>FileInputStream常用方法：<ol><li>int read()：从输入流中读取单个字节的数据；如果已到达文件末尾，则返回 -1。<ol start="2"><li>int read(byte[] b)：从输入流中将最多b.length个字节的数据读入一个byte数组中，以整数形式返回存入数组中的实际字节个数；如果已到达文件末尾，则返回 -1。</li><li>void close()：关闭此文件输入流并释放与此流有关的所有系统资源。</li></ol></li></ol></li><li>输出类： OutputStream抽象类是所有输出字节流类的直接或间接父类，FileOutputStream是其重要子类：</li><li>FileOutputStream常用构造方法：<ol><li>FileOutputStream(File file) ：通过File对象创建FileOutputStream对象。</li><li>FileOutputStream(String name) ：通过文件（非“目录”）路径创建FileOutputStream对象。</li><li>FileOutputStream(File file, boolean append)：通过File对象创建FileOutputStream对象；第二个参数如果为true ，则字节将被写入文件的末尾而不是开头。</li></ol></li><li>FileOutputStream常用方法：<ol><li>void write(int b)：将指定的单个字节数据写入此文件输出流。</li><li>void write(byte[] b, int off, int len)：将byte数组中从off开始的len个字节写入此文件输出流。<ol start="3"><li>void flush()：刷新字节输出流并强制写出缓冲内所有字节数据。</li><li>void close()：关闭此文件输出流并释放与此流有关的所有系统资源。<blockquote><p>注： FileOutputStream(File file) 、 FileOutputStream(String name) 或FileOutputStream(File file, false)创建FileOutputStream对象时会创建一个新的空文件；如果使用FileOutputStream(File file, true)创建FileOutputStream对象，则只在第一次执行时创建一个新的空文件。</p></blockquote></li></ol></li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\image.jpg"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建FileOutputStream对象的同时创建一个空文件；但因为第二个参数为true，所以再次执行该行代码不会创建新文件。</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//输入输出字节流，单个字节</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FileInputStream inputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        FileOutputStream outputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\存在.flac"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\存在.flac"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//File类构造输出流，其中第二个参数设置为true（即将字节写入文件末尾处，而不是写入文件开始处）</span>            <span class="token keyword">int</span> byteData<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>byteData <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*逐个读取输入流中的数据*/</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向输出流中逐个存入字节</span>            <span class="token punctuation">}</span>            outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//刷新字节输出流并强制写出缓冲内所有字节数据。</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭并释放资源</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭并释放资源</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//借助字符数组提高效率</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        FileInputStream inputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        FileOutputStream outputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\存在.flac"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\存在.flac"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bufferArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> validBufferLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>validBufferLength <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bufferArray<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*设置局部变量缓冲数组bufferArray，read方法会将字节保存到该数组中并返回实际写入bufferArray数组的元素个数，这样减少了循环次数，提高了复制效率。*/</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufferArray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> validBufferLength<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-缓冲流"><a href="#2-缓冲流" class="headerlink" title="2. 缓冲流"></a>2. 缓冲流</h5><ol><li>定义：缓冲流是一种装饰器类，目的是让原字节流、字符流新增缓冲的功能以提高读取或写入。</li><li>缓冲字节输入流：<br>BufferedInputStream(InputStream in)：</li><li>缓冲字节输出流：<br>BufferedOutputStream(OutputStream out)：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BufferedReader bufferedReader <span class="token operator">=</span> null<span class="token punctuation">;</span>        BufferedWriter bufferedWriter <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileReader fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"C:\\笔记.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">)</span><span class="token punctuation">;</span>            FileWriter fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"D:\\笔记.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fileWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>            String oneLineData<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>oneLineData <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>oneLineData<span class="token punctuation">)</span><span class="token punctuation">;</span>                bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferedReader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferedWriter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="3-转换流"><a href="#3-转换流" class="headerlink" title="3. 转换流"></a>3. 转换流</h5><ol><li>定义：由于文件自身编码方式和程序运行时使用的默认编码方式不一致，致使程序读取或输出字符文件时可能会出现乱码，这时可以使用字节流操作文件，然后再将字节流转换成字符流，这一转换过程可以借助转换流实现。</li><li>InputStreamReader（字节输入流-&gt;字符输入流）：<br>InputStreamReader(InputStream in) ：<br>InputStreamReader(InputStream in, String charsetName)：</li><li>OutputStreamWriter（字节输出流-&gt;字符输出流）：<br>OutputStreamWriter(OutputStream out) ：<br>OutputStreamWriter(OutputStream out, String charsetName) </li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamToReaderTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BufferedReader reader <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入你今天最想说的话："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String words <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>reader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BufferedReader bufferedReader <span class="token operator">=</span> null<span class="token punctuation">;</span>        BufferedWriter bufferedWriter <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\笔记.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InputStreamReader inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">,</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>            FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\笔记.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            OutputStreamWriter outputStreamWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">,</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>outputStreamWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>            String oneLineData<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>oneLineData <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>oneLineData<span class="token punctuation">)</span><span class="token punctuation">;</span>                bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferedReader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferedWriter <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="4-数据流"><a href="#4-数据流" class="headerlink" title="4. 数据流"></a>4. 数据流</h5><p>通过DataInputStream和DataOutputStream数据流可以直接操作基本数据类型和字符串。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 写入数据</span>        DataOutputStream outputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> priceArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">5.2</span><span class="token punctuation">,</span> <span class="token number">7.3</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">6.7</span><span class="token punctuation">,</span> <span class="token number">8.0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>            outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\price.data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> priceArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                outputStream<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span>priceArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 读取</span>        DataInputStream inputStream <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 从文件中读数据</span>            inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\price.data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">double</span> price <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单价为："</span> <span class="token operator">+</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">EOFException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据读取完毕......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> io流中的流　 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之String字符串</title>
      <link href="/posts/29490.html"/>
      <url>/posts/29490.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的String字符串的知识点</p><a id="more"></a><h2 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h2><p>1、String类型变量：String是引用数据类型。（注：java中没有字符串变量，但是有String类，且该类型是不可变字符串）<br>附加：string中的参数传递</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String name <span class="token operator">=</span> <span class="token string">"Tim"</span><span class="token punctuation">;</span>            <span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// String是引用类型，但为什么不是Lucy</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>            str <span class="token operator">=</span> <span class="token string">"Lucy"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有后面的堆中空间确定向，即将堆中Lucy的地址指向str</span>        <span class="token punctuation">}</span></code></pre><p>2、String类型对象的两种实例化方式：</p><ul><li>直接赋值，其语法格式如下：<br><img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180829100347211?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></li><li>构造方法实现其实例化，其语法格式如下：<br><img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180829100436256?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>或者：String str = new String（“张三”）；<br>3、两种实例化方式的区别：<br>直接赋值法：会在常量池中开辟空间存放变量值，在将变量赋予另一个string对象变量时，jvm会先检查常量池中是否有该变量值，若有则不再开辟空间存放变量，而让新变量指向已有变量值。实现常量池中常量共享。<br>构造方法实例化：每new一次（构造一个变量），则会在堆中开辟出一个新空间，该变量指向堆中的空间，而堆中变量值指向常量池中的string的常量。（也会实现常量池中字符串共享）<br>4、String类的常用方法：<br>1、str.length（）：返回str这个String变量的字符串长度。<br>2、startsWith(String value) 判断字符串是否以value字符串开头，如果是返回true，否则返回false。<br>3、endsWith(String value) 判断字符串是否以value字符串结尾，如果是返回true，否则返回false。<br>4、equals(String targetString) 用于判断两个字符串是否相同，完全相同返回true，否则返回false。（注：equals与==在字符串变量方面的区别，==会比较比较双方的地址，若相同则返回true，否则false，而equals方法则比较字符串内容是否相等）<br>5、toCharArray() 将字符串转换为char类型的数组。<br>6、String的切片和索引方法：<br><img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180829103401592?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></li></ul><p>```</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> String字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之代码块和全局变量</title>
      <link href="/posts/6716.html"/>
      <url>/posts/6716.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的代码块和全局变量的知识点</p><a id="more"></a><h2 id="一、代码块"><a href="#一、代码块" class="headerlink" title="一、代码块"></a>一、代码块</h2><p>1、代码块：Java中代码块分为静态代码块和非静态代码块。<br>2、特点：静态代码块只在类加载时执行一次；静态代码块每次创建对象时都会执行。</p><pre class=" language-java"><code class="language-java">    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token number">3</span>、<span class="token keyword">static</span>修饰符：可修饰变量，代码块，方法。<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dui</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//成员变量被static修饰，则其被所有对象共享。</span>    <span class="token comment" spellcheck="true">//非静态数码块</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无初始值，且不能加访问控制符和static。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//静态的比非静态的早执行</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载时赋初值</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//加载时执行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//类加载时分配地址</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//类加载时分配地址</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Dui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态的可以通过对象创建，使用非静态的变量。</span>        <span class="token keyword">new</span> <span class="token class-name">Dui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prints</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态的可以通过对象创建，执行非静态的方法，不能直接调用（静态的先执行）</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态的可以直接调用静态方法。</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//非静态</span>    <span class="token keyword">int</span> b <span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建对象时赋初值</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建对象时执行</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prints</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//创建对象时分配地址</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非静态的可以直接调用静态方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非静态的可以直接使用静态变量</span>    <span class="token punctuation">}</span></code></pre><h2 id="二：全局变量-局部变量"><a href="#二：全局变量-局部变量" class="headerlink" title="二：全局变量/局部变量"></a>二：全局变量/局部变量</h2><p> 1、全局变量：直接在类中声明的变量叫成员变量(又称全局变量)。注：如果未对成员变量设置初始值，则系统会根据成员变量的类型自动分配初始值：int分配初始值0、boolean分配初始值false，而自定义类型则分配初始值null。<br>2、作用范围：成员变量定义后，其作用域是其所在的整个类。注：成员变量的定义没有先后顺序，但是最好将成员变量的定义集中在类的顶部。<br>3、局部变量：方法中的参数、方法中定义的变量和代码块中定义的变量统称为局部变量。注：局部变量在使用以前必须显式初始化或赋值，局部变量没有默认值。<br>注：声明局部变量时，数据类型前除final外不允许有其他关键字，即其定义格式为： [final] 数据类型 变量名 = 初始值；<br>4、作用范围：局部变量的作用域范围从定义的位置开始到其所在语句块结束。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//局部变量,只作用于所在代码块（即一个大括号），局部变量没有初始值，从定义到所属代码块结束。</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无初始值，且不能加访问控制符和static。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>5注意点：<br>1、如果局部变量的名字与全局变量的名字相同，则在局部变量的作用范围内全局变量被隐藏，即这个全局变量在同名局部变量所在方法内暂时失效。<br>2、如果在局部变量的作用域范围内访问该成员变量，则必须使用关键字this来引用成员变量。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当局部变量和全局变量重名时，（不强调数据类型），从局部变量定义到期结束作用范围，全局变量起作用，除非加上this.</span>        <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String names <span class="token operator">=</span><span class="token string">"wangming"</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 代码块和全局变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之多态</title>
      <link href="/posts/45515.html"/>
      <url>/posts/45515.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的多态的知识点</p><a id="more"></a><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>1、多态：父类类型（比如Mammal）的变量（比如mammal1）指向子类创建的对象，使用该变量调用父类中一个被子类重写的方法（比如move方法），则父类中的方法呈现出不同的行为特征，这就是多态。<br>2、原理：Java引用变量有两种类型，分别是<strong>编译时类型和运行时类型</strong>：编译时类型由声明该变量时使用的类型决定；运行时类型由实际赋给该变量的对象。如果编译时类型和运行时类型不一致，就可能出现所谓多态。<br>3、上转型对象：子类实例化的对象赋值给父类声明变量，则该对象称为上转型对象，这个过程称为对象上转型，对应于数据类型转换中的自动类型转换。<br>4、上转型对象特点：</p><ul><li>上转型对象不能操作子类新增的成员变量；不能调用子类新增的方法。</li><li>上转对象调用父类方法，如果该方法已被子类重写，则表现子类重写后的行为特征，否则表现父类的行为特征。</li><li>使用上转型对象调用成员变量，<strong>无论该成员变量是否已经被子类覆盖，使用的都是父类中的成员变量。</strong><br>5、下转型对象：可以将上转型对象再强制转换为创建该对象的子类类型的对象，即将上转型对象还原为子类对象，对应于数据类型转换中的强制类型转换。<br>6、作用：还原后的对象又具备了子类所有属性和功能，即可以操作子类中继承或新增的成员变量，可以调用子类中继承或新增的方法。<br>7、注意点：不可以将父类创建的对象通过强制类型转换赋值给子类声明的变量。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//父类</span><span class="token keyword">class</span> <span class="token class-name">Mammal</span> <span class="token punctuation">{</span>    String bian<span class="token operator">=</span><span class="token string">"4567"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哺乳动物可以移动。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bat</span> <span class="token keyword">extends</span> <span class="token class-name">Mammal</span><span class="token punctuation">{</span>    String bian<span class="token operator">=</span><span class="token string">"2345"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fei</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"非"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"蝙蝠用翅膀移动。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Bat bat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Mammal mammal <span class="token operator">=</span> bat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用数据类型的自动转换 父类变量=子类对象，上转型对象，其不能使用子类新增属性和方法</span>        mammal<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多态，未调用前和调用时方法不同，（可有地址进行解释）（只能在重写时出现多态，引用数据类型分为编译时类型（等号左侧）和运行时类型（等号右侧）</span>        mammal<span class="token punctuation">.</span>bain<span class="token punctuation">;</span>        mammal<span class="token punctuation">.</span><span class="token function">fei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mammal<span class="token punctuation">.</span>bian<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性无多态，方法有多态，只能调用父类属性</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bian<span class="token punctuation">)</span><span class="token punctuation">;</span>        Bat bat0<span class="token operator">=</span><span class="token punctuation">(</span>Bat<span class="token punctuation">)</span>mammal<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//下转型变量（只适用于上转型变量，为了调用新增加的属性和方法）</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bat0<span class="token punctuation">.</span>bian<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 多态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之对象和类</title>
      <link href="/posts/13846.html"/>
      <url>/posts/13846.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的对象和类的知识点</p><a id="more"></a><h2 id="一、类"><a href="#一、类" class="headerlink" title="一、类"></a>一、类</h2><p>类：Java语言把一组对象中相同属性和方法抽象到一个Java源文件就形成了类。<br>定义一个类的步骤：1、定义类名；<br>2、定义类的属性；<br>3、定义类的方法。</p><pre><code>public class Student {//定义属性    String name;    String id;    String studentId;//访问控制符（public，private）控制方法在其他类中的使用范围。创建方法    public Object doHomework() {        System.out.println(&quot;会做作业&quot;);        return new Student();        }}</code></pre><h2 id="二、对象"><a href="#二、对象" class="headerlink" title="二、对象"></a>二、对象</h2><p>1、对象：一种具有属性和方法的数据。<br>2对象的创建：声通过new关键字创建对象。创建对象又称实例化对象。<br>​      Student  student = new Student();<br> 3、对象的调用： 使用”.”运算符访问对象的属性和方法。<br>​      student.属性 = 值；<br>​      student.方法名();<br>4、对象与类的关系：</p><ul><li>类是创建对象的模板，确定对象将会拥有的属性和方法。</li><li>类是对象的抽象化；对象是类的具体化。</li><li>类是一种数据类型，是对象的数据类型（不同于int等基本类型：类具有方法）</li></ul><p>5、面向对象的思想：<br>就是让对象成为类与类之间的“通信”的桥梁，通过对象使类之间形成有机的整体。面向对象编程语言以对象为中心，以消息为驱动，即程序=对象+消息（指方法的调用：Java使用向方法传递参数的方式实现向方法发送信息；并通过返回值从方法中获取信息）。<br>6、对象的初始化：</p><ul><li>给对象的实例变量（非“常量”）分配内存空间，默认初始化成员变量；</li><li>成员变量声明时的初始化；</li><li>初始化块初始化（又称为构造代码块或非静态代码块）；</li><li>构造方法初始化</li></ul><pre class=" language-java"><code class="language-java">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span>（）；<span class="token comment" spellcheck="true">//分配空间，并将堆中地址返回给栈中变量student</span>studnet<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"jake"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给对象变量（即类中属性name）赋值</span>studnet<span class="token punctuation">.</span><span class="token function">doHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用类中定义的方法</span></code></pre><p>7、空间内存角度理解类，对象，对象变量：类提供对象的模板，在调用new关键字创建对象时即是在堆中按类的定义开辟空间，并将地址返回给对象变量。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 对象和类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之方法和重载</title>
      <link href="/posts/44760.html"/>
      <url>/posts/44760.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的方法和重载的知识点</p><a id="more"></a><h2 id="一、方法"><a href="#一、方法" class="headerlink" title="一、方法"></a>一、方法</h2><p>1、方法：方法用于定义类的某种行为（或功能），其语法结构如下：<br>访问控制符 [修饰符] 返回值类型 方法名( [参数] )  {</p><pre><code>       方法体</code></pre><p>}</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>2、访问控制符：方法中的访问控制符用于限制方法在其他类中的使用范围。访问控制符分为四种：public、protected、友好的和private。<br>3、static修饰符：static修饰符用于限制方法的调用方式：<br>​    </p><ul><li>static修饰的方法可以直接使用类名调用也可以使用类创建的对象调用；</li><li>非static修饰的方法只能使用类创建的对象调用。</li></ul><p>4、返回值要求</p><ul><li>方法返回基本数据类型的数据，则返回值类型必须是返回数据所属的数据类型或者精度更高的数据类型（针对于数值类型的数据）。</li><li>方法返回引用数据类型的数据，则返回值类型必须是返回数据所属的数据类型或者其父类。</li><li>方法如果有返回值，则必须借助return关键字将数据返回；</li><li>如果方法没有返回值，需要用void表示。</li></ul><p>5、方法名要求：遵循标识符命名规则；首字母必须小写，如果由多个单词组成，从第二个单词开始首字母必须大写；方法名一般由一个动词或者动名词构成。</p><p>6、参数要求：</p><ul><li>方法可以有多个参数，各个参数之间用逗号(,)间隔。</li><li>方法的参数在整个方法内有效。</li><li>方法参数前面的数据类型用于限制调用方法时所传具体数据的数据类型；</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方法名首字母小写，第二个单词起首字母大写，（动词，动名词担任）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arr</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>scores<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> scores<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>7、动态参数</p><ul><li>动态参数实质为数组；</li><li>动态参数必须位于参数列表的最后；</li><li>一个方法只能有一个动态参数；</li></ul><pre><code>//动态参数可以当做数组来使用，有下标，数组也可以实现不定参数，但需要定义数组，而动态参数不需要。动态参数实质为数组    public static void arr(int []scores) {        System.out.println(scores[2]);        for (int i : scores) {            System.out.println(i);        }    }//一个方法只能有一个动态参数，且放在最后。public static void arr(int a,int ...scores) {        System.out.println(a);        System.out.println(scores[0]);        for (int i : scores) {            System.out.println(i);        }    }</code></pre><p> 8、构造方法：一个类中有多个同名方法（构造方法或普通方法），在调用这些方法时，到底调用哪个方法取决于调用方法时传入的参数的数据类型和个数。<br> 9、构造方法的特征：</p><ul><li>构造方法负责初始化类中的实例变量。</li><li>构造方法是一种特殊的方法，这种方法必须满足以下语法规则：构造方法必须与类名相同；不包含返回值类型描述部分。</li><li>构造方法不能有static和final关键字修饰。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//构造方法，名字与类名相同，无返回值类型，无静态修饰符，无参构造方法</span>    <span class="token keyword">public</span> <span class="token function">Dui</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//有参构造方法，易于构造对象</span><span class="token keyword">public</span> <span class="token function">Dui</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> String position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用this（）调用同类中的构造方法。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> position<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>10、构造方法的使用：使用new关键字调用构造方法，即构造方法在创建对象（也称对象实例化）时被调用。</p><p>11、显示、隐式构造方法：</p><ul><li>创建类时，如果没有显式定义构造方法，则该类会存在一个默认的无参构造方法；</li><li>可以在类中声明一个或多个有参构造方法，但每个构造方法在参数个数或参数数据类型上要有所差别。</li><li>如果类中存在显式构造方法，则默认的无参构造方法将不复存在，除非显式定义无参构造方法。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Dui</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> String position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用this（）调用同类中的构造方法。</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> position<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//出错Dui teacher = new Dui();//类中默认的有一个无参数构造方法，当存在有参构造方法时，无参构造方法取消</span>        teacher<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"chengyuanyuan"</span><span class="token punctuation">;</span>        Dui teacher0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dui</span> <span class="token punctuation">(</span><span class="token string">"王大兵"</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token string">"teacher"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Dui teacher1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dui</span> <span class="token punctuation">(</span><span class="token string">"xiaojaing"</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacher0<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacher1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="二、重载"><a href="#二、重载" class="headerlink" title="二、重载"></a>二、重载</h2><p> 1、重载：同一个类中有多个方法名相同但参数列表不同的方法，这种现象称为方法重载（overload）。其中参数列表不同包括以下情形：</p><ul><li><p>参数的个数不同 </p></li><li><p>参数的对应类型不同<br>注：1、参数列表不同并不包含参数名不同，也就是说如果方法名相同，方法中参数个数和类型相同，只是参数名不同，这样也不能称之为方法重载。<br> ​           2、方法中其它构成部分不参与比较：访问控制符、修饰符、返回值类型</p><p>2、重载方法的调用：<br>一个类中有多个同名方法（构造方法或普通方法），在调用这些方法时，到底调用哪个方法取决于调用方法时传入的参数的数据类型和个数。<br>3、this关键字：</p></li><li><p>类中可以有多个构造方法，构造方法之间可以通过this实现调用，但必须将调用构造函数代码写在有效代码的第一行。（普通方法不能使用this调用类中构造方法）</p></li><li><p>this代表对当前对象的一个引用。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//重载,方法中其它构成部分不参与比较：访问控制符、修饰符、返回值类型,参数列表不同并不包含参数名不同，也就是说如果方法名相同，方法中参数个数和类型相同，只是参数名不同，这样也不能称之为方法重载。</span>    <span class="token comment" spellcheck="true">//参数列表不同并不包含参数名不同，也就是说如果方法名相同，方法中参数个数和类型相同，只是参数名不同，这样也不能称之为方法重载。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//重载2：参数个数相等，但数据类型不同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//重载1：参数数据类型相同个数不同（1,2可以都不相同）</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token operator">+</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 方法和重载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之继承</title>
      <link href="/posts/48597.html"/>
      <url>/posts/48597.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的继承的知识点</p><a id="more"></a><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>1、继承：继承是面向对象编程的三大特征之一，是一种基于已有类来创建新类的机制。由继承而得到的类称为子类（或派生类）,被继承的类称为父类（或超类）。（注：Object类是所有类的直接父类或间接父类。）<br>2、构成：Java中每个类只允许有一个父类。语法如下：class &lt;子类&gt; extends &lt;父类&gt;<br>3、作用：根据访问权限修饰符的不同，子类可以继承父类中某些成员变量和方法，提高了代码的重用性，子类也可以添加新的成员变量和方法 。<br>4、注意点：如果类被final修饰，则该类不能被继承。（注：Java中已有的类（诸如Void、String、Class、Scanner、System、8种基本数据类型对应包装类等类）已经被final修饰，所以这些类不能被继承）<br>5、调用父类无参构造方法的条件：</p><ul><li><p>父类拥有无参构造方法（无论隐式的还是显式的）</p></li><li><p>子类中的构造方法又没有明确指定调用父类的哪个构造方法。</p></li><li><p>子类中没有调用该子类其它构造方法的构造方法使用super()隐式调用父类的无参构造方法（注，即在构造方法中用this（）调用另一个构造函数）</p><p>6、父类无无参函数时的情况<br>如果父类没有无参构造方法（无论隐式的还是显式的），则要求子类构造方法必须直接或间接指定调用父类哪个构造方法并且放在有效代码第一行。（注：一句话：子类必须调用父类的构造方法。）</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"father"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Father</span><span class="token punctuation">(</span>String iD<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ID <span class="token operator">=</span> iD<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sun</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Sun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//super()如果父类拥有无参构造方法（无论隐式的还是显式的）且子类中的构造方法又没有明确指定调用父类的哪个构造方法，则子类中没有调用该子类其它构造方法的构造方法使用super()隐式调用父类的无参构造方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sun"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Sun</span><span class="token punctuation">(</span>String iD<span class="token punctuation">,</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>iD<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须调用父类的构造方法，如果父类没有无参构造方法（无论隐式的还是显式的），则要求子类构造方法必须直接或间接指定调用父类哪个构造方法并且放在有效代码第一行</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token function">Sun</span><span class="token punctuation">(</span>String studentId<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">"22345"</span><span class="token punctuation">,</span><span class="token string">"xiaowang"</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>studentId<span class="token operator">=</span>studentId<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Sun student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sun</span> <span class="token punctuation">(</span><span class="token string">"345677"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当子类没有确定调用父类那个构造方法时，默认用无参构造方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>ID<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Sun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p> 7、继承成员变量的关系：</p><ol><li>当子类成员变量和父类成员变量同名时，对子类对象来讲，父类的成员变量不能被子类继承（即子类的成员变量覆盖了父类的成员变量），此时称子类的成员变量隐藏了父类的成员变量。<br>2.如果要在<strong>子类非static修饰的代码块或方法</strong>中使用被隐藏的父类成员变量可以通过super关键字实现。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//父类</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    String ID<span class="token punctuation">;</span>    String name <span class="token operator">=</span><span class="token string">"xiaowang"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sun</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//继承实现代码复用，根据访问权限修饰符决定继承那些权限和方法，有fanal修饰的类不能被继承</span>    String studentId<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Class,System,Scanner,String,Void,8种基本数据类型都被final修饰，object是所有类的直接或间接父类</span>    String name<span class="token operator">=</span> <span class="token string">"xiaoli"</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//变量重名，使用本类定义的变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用super调用父类的变量，且不能用于static中</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之重写</title>
      <link href="/posts/42232.html"/>
      <url>/posts/42232.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的重写的知识点</p><a id="more"></a><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p> 1、重写：子类可以继承父类方法，但有时从父类继承的方法在子类中必须进行修改以适应新类的需要，这种对父类方法进行改写或改造的现象称为方法重写或方法覆盖。父类方法在子类中重写使继承更加灵活。<br>2、调用：<br>1.子类重写了父类的方法，则使用子类创建的对象调用该方法时，调用的是重写后的方法，即子类中的方法。<br>2.如果要在子类非static修饰的代码块或方法中调用父类被重写的方法可以通过super关键字实现。<br>3、判别：@Override注解可以判断当前方法是否重写了父类的某个方法，如果在方法上加上该注解没有出错，则说明重写了父类方法，否则没有重写父类方法。<br>4子类重写父类方法需满足以下条件：</p><ul><li>方法名和参数列表：子类重写的方法和父类被重写的方法在方法名和参数列表方面相同；</li><li>返回值类型：</li></ul><p> 1.如果父类被重写的方法没有返回值类型或者返回值类型为基本数据类型，则要求子类重写的方法的返回值类型和父类被重写方法的返回值类型相同；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//父类</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    String ID<span class="token punctuation">;</span>    String name <span class="token operator">=</span><span class="token string">"xiaowang"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用筷子吃法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"good"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sun</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//重写，更好的体现子类的行为特征，父类有final修饰则无法重写.</span>    <span class="token annotation punctuation">@Override</span><span class="token comment" spellcheck="true">//判断方法是否是重写的。</span>    <span class="token comment" spellcheck="true">//重写要求：方法名，和参数要一致，返回值为void和基本数据类型相同时，要一致，返回值为应用类型，则子类重写方法的返回值可以是父类方法返回值的子类。</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用刀叉吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Sun san <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        san<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>2.如果父类被重写的方法返回值类型为引用数据类型，<strong>则要求子类重写的方法的返回值类型和父类被重写方法的返回值类型相同或是其子类。</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//父类</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>​    String ID<span class="token punctuation">;</span>​    String name <span class="token operator">=</span><span class="token string">"xiaowang"</span><span class="token punctuation">;</span>​    <span class="token keyword">int</span> age<span class="token punctuation">;</span>​    <span class="token keyword">public</span> Object <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>​        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用筷子吃法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​        <span class="token keyword">return</span> <span class="token string">"good"</span><span class="token punctuation">;</span>​    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sun</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>​    <span class="token keyword">public</span> String <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//String 是objict的子类，也可以相同。（参数类型和数目必须相同）</span>​        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用刀叉吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//父类的静态的方法可以被继承，但不能被重写。子类的访问权限必须大于父类，子类重写的方法不能加static</span>​        <span class="token keyword">return</span> <span class="token string">"well"</span><span class="token punctuation">;</span>​    <span class="token punctuation">}</span>​    ​        <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用super调用父类的重写方法，super不可用于static中</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Sun san <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        san<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>子类重写的方法不能缩小父类被重写方法的访问权限，子类重写方法的访问权限必须大于等于父类被重写方法的访问权限。</p></li><li><p>父类中静态方法可以被子类继承，但却不能被子类重写。</p></li><li><p>重写父类非静态方法时，重写后的方法不能添加static修饰。</p></li><li><p>父类中被final关键字修饰的方法可以被子类继承，但却不能被子类重写。</p><p>5、final关键字：</p></li><li><p>final修饰的类不能被继承。</p></li><li><p>final修饰的方法不能被重写。</p></li><li><p>final修饰的变量是常量，不允许二次赋值。</p><p>6、super关键字：</p></li><li><p>super关键字可以调用父类的成员变量（ super.属性）和方法（super.父类方法([参数列表])）。</p></li><li><p>子类构造方法中可以使用super关键字调用父类的构造方法：super([参数列表]);</p></li><li><p>super 不能用于静态方法或静态代码块中。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 重写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之基本数据类型及基本运算符及进制转换</title>
      <link href="/posts/38050.html"/>
      <url>/posts/38050.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的基本数据类型及基本运算符及进制转换的知识点</p><a id="more"></a><p>1.数据类型：告诉计算机系统应该分配多大内存以及将会存什么类型的数据。其分为基本数据类型和引用数据类型。<br>2.基本数据类型及其所占空间大小</p><ul><li><p>Byte型数据：一个字节，8位。</p></li><li><p>int型数据：整型数据，4个字节，32位。</p></li><li><p>short型数据：短整型数据，2个字节，16位。</p></li><li><p>float型数据：单精度浮点数，4个字节，32位。</p></li><li><p>double型数据：双精度浮点数，8个字节，64位。</p></li><li><p>long型数据：长整型数据，8个字节，64位。</p></li></ul><ul><li>Boolean型数据：true和false</li><li>char型数据：字符型数据，两个字节，16位</li></ul><p> 3.各种基本数据类型的注意点</p><ul><li>各种数据类型都有取值范围，莫要出现溢出现象。</li><li>float和double型数据，有一部分空间表示小数位，一部分表示指数位。</li><li>一个汉字占用两个字节</li><li>整型数据有四种表示方法分别为二进制（0b），十进制，八进制（0），十六进制（0x）。</li><li>char型数据的表示方法：1.用单撇号引起的字母或汉字2.用‘\u+unicode码’3.直接用unicode码数字代表相应字符。</li><li>Boolean型数据：true对应二进制的1，false对应二进制的0；</li><li>小数默认是双精度浮点数，单精度实数需在数字后+f。</li><li>精度低的数据类型会自动转化为精度高的数据类型，而精度高的数据类型转化为精度低的，则会报错，必须强制类型转化（形式：（数据类型）），数据精度会损失。</li></ul><p> 4.常量<br> 数据类型前有final关键字修饰（注：常量不可二次赋值）。<br> 5.十进制整数转二进制用除二取余法，实数用乘二取整法。（从下往上取余数）<br> 6.负数的二进制表示：符号位不变，其它位按位取反，然后加一（源码——》反码——》补码），正数不变。（注：进行位运算时，必须转换为二进制形式（补码形式））。<br> 相关例子</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">0x0f0e</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> AGE <span class="token operator">=</span> <span class="token number">0765</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>AGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> names <span class="token operator">=</span> <span class="token number">0b0101010101010</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">9.9</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14e3</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> price2 <span class="token operator">=</span> <span class="token number">9.9f</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> pan <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pan<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>price2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> name <span class="token operator">=</span> <span class="token string">'王'</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> litter0 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> litter1 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> litter2 <span class="token operator">=</span> <span class="token string">'\u00fe'</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>litter0<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>litter1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>litter2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token operator">+</span><span class="token string">'，'</span><span class="token operator">+</span>litter1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hellow Word!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> a <span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> b<span class="token operator">=</span>a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自动转换</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> c<span class="token operator">=</span><span class="token number">999.9</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//强制转换</span>        <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">129</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>e<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//溢出</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 基本数据类型及基本运算符及进制转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之数组</title>
      <link href="/posts/44348.html"/>
      <url>/posts/44348.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的数组的知识点</p><a id="more"></a><h2 id="一：基本概念"><a href="#一：基本概念" class="headerlink" title="﻿一：基本概念"></a>﻿一：基本概念</h2><p>数组：数组是相同数据类型的数据按顺序组成的一种引用数据类型。<br>数组是一种引用类型数据，其空间是在内存中的堆中，通过地址传递，在栈中对其操作。</p><h2 id="二：声明及实例化"><a href="#二：声明及实例化" class="headerlink" title="二：声明及实例化"></a>二：声明及实例化</h2><p>实例化：声明数组仅仅给出了元素的数据类型和数组名字，要使用数组就必须为它分配内存空间，即实例化数组。当实例化一个数组时就申请了一段连续的内存空间存储数组中的元素。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//声明一维数组和二维数组</span><span class="token keyword">double</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> scores<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不分配空间</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> acconts<span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实例化（分配空间）</span>        <span class="token comment" spellcheck="true">//1 指定长度</span>        <span class="token keyword">double</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> scores<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分配空间并初始化为0；</span>        String <span class="token punctuation">[</span><span class="token punctuation">]</span> acconts<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//赋值</span>        <span class="token keyword">double</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>        scores<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 初始化</span>        <span class="token keyword">double</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> scores<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3.4</span><span class="token punctuation">,</span><span class="token number">2.6</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只能在初始化的时候用这种方法</span>        <span class="token keyword">double</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">3.4</span><span class="token punctuation">,</span><span class="token number">4.3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以先声明，再初始化</span>        eg：<span class="token comment" spellcheck="true">/*         * double [] scores;         *     scores=new double[] {3.4,4.3};             */</span></code></pre><p>注：数组存在隐形数据转换，即输入数据精度小于数组规定类型精度时，在存储时类型会自动转换为数组声明时规定的类型。</p><h2 id="三：数组的遍历"><a href="#三：数组的遍历" class="headerlink" title="三：数组的遍历"></a>三：数组的遍历</h2><p>1.数组中的数据通过数组名和数组下标来操作数据，下标从0开始<br>第一种遍历方式：加强循环</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//加强循环</span>        <span class="token keyword">double</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> scores<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3.4</span><span class="token punctuation">,</span><span class="token number">2.6</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一维数组的加强循环</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">double</span> score<span class="token operator">:</span>scores<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//二维数组的加强循环</span>        String <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>acconts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"王二"</span><span class="token punctuation">,</span><span class="token string">"12345"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"45678"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> accont<span class="token operator">:</span>acconts<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>String str<span class="token operator">:</span>accont<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认格式不换行</span>        <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认输出格式为换行</span>        <span class="token punctuation">}</span></code></pre><p>第二种遍历方式：普通循环</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//一维数组的普通循环遍历</span><span class="token keyword">double</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> scores <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        scores<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>scores<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>scores<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//二维数组的普通循环遍历</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>acconts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"王二"</span><span class="token punctuation">,</span><span class="token string">"12345"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"45678"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> acconts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String <span class="token punctuation">[</span><span class="token punctuation">]</span> accont <span class="token operator">=</span> acconts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> accont<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>accont<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> acconts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> acconts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>acconts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="四：值传递与引用传递"><a href="#四：值传递与引用传递" class="headerlink" title="四：值传递与引用传递"></a>四：值传递与引用传递</h2><p>值传递：值传递是指在调用函数时将实际参数 复制 一份传递到函数中，这样在函数中如果对 参数 进行修改，将不会影响到实际参数。<br>引用传递：引用传递是指在调用函数时将实际参数的地址 直接 传递到函数中，那么在函数中对 参数 所进行的修改，将影响到实际参数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之分支语句</title>
      <link href="/posts/34465.html"/>
      <url>/posts/34465.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的分支语句的知识点</p><a id="more"></a><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">Try</span><span class="token punctuation">{</span>​    <span class="token keyword">static</span><span class="token punctuation">{</span>​        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"天亮还珠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​        <span class="token comment" spellcheck="true">//return 不能用于static 静态代码段，return后不能直接跟代码，case后可以用{}包括相关语句。</span><span class="token punctuation">}</span>​    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>​            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"print"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​        <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//if后面的判断语句必须是逻辑表达式。if 多分支语句条件满足一个既不会往下进行，而多个if单分支语句，则会足以判断</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码段一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代码段二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//必为常量或常量表达式，不为long，float，double，boolean型数据</span>        <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//也可用return结束当前方法（嵌套seitch，break直结输当前switch）</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入数据错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//System.out.println("天黑投注");</span>        <span class="token keyword">int</span> c <span class="token operator">=</span><span class="token number">3</span>；        <span class="token keyword">if</span>（c<span class="token operator">></span><span class="token number">0</span>）<span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//contine和break语句可以用于if语句，但是该if语句必须属于switch语句或循环语句中，而return语句可以无条件用于if语句。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>```</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 分支语句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之冒泡排序和插入排序</title>
      <link href="/posts/35371.html"/>
      <url>/posts/35371.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中冒泡排序和插入排序的知识点</p><a id="more"></a><p>冒泡排序法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//冒泡排序，外循环最多n—1次，内循环n-i-1次</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                                    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>插入排序法：每循环一次都将一个待排序的元素所对应的数据按其顺序大小插入到前面已经排序的序列的合适位置，直到全部插入排序完为止，其难点在于如何在前面已经排好序的序列中找到合适的插入位置。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">865</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//将第一个元素视为已排好序，从第二个元素开始插入</span>    <span class="token keyword">int</span> date <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先将待插入元素保存下来。</span>    <span class="token comment" spellcheck="true">//找位置</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//从0号元素到待插入元素位置找合适位置</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//移动元素</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">></span>j<span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//从待插入元素位置到合适位置进行移动元素</span>        a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//复原元素</span>    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>date<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">:</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 冒泡排序和插入排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java查找之二分法查找（或找新元素的位置）</title>
      <link href="/posts/46950.html"/>
      <url>/posts/46950.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中冒泡排序和插入排序的知识点</p><a id="more"></a><p>二分法查找：搜索数据与有序数组（比如升序）中间元素比较以确定在中间元素左边还是右边，如果在右边，则调整最小搜索索引值，然后进入下次循环；如果在左边，则调整最大搜索索引值，然后进入下次循环；如果相等则当前位置就是查找数据所在位置，停止循环。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//二分法排序(先对已有数据排序）,可以查找元素位置或获取元素应该在该数列插入的位置</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">467</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">:</span>numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> date<span class="token operator">=</span><span class="token number">72</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> high<span class="token operator">=</span>numbers<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> muddle <span class="token operator">=</span><span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>muddle<span class="token punctuation">]</span><span class="token operator">>=</span>date<span class="token punctuation">)</span> <span class="token punctuation">{</span>                high<span class="token operator">=</span>muddle<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                low<span class="token operator">=</span>muddle<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 二分法查找（或找新元素的位置） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux之ｖi编辑器及vim编辑器常用快捷键大全</title>
      <link href="/posts/62547.html"/>
      <url>/posts/62547.html</url>
      
        <content type="html"><![CDATA[<p>﻿## 一.vi的三种模式</p><a id="more"></a><p>1.一般模式：以vi打开一个文件就进入一般模式了（默认），该模式可以移动光标，复制，粘贴文本。<br>2.编辑模式：可以编辑文本，界面的左下方或出现插入的字样<br>3.命令行模式：可以提供你查找数据，读取，保存，大量替换字符，离开vi，显示行号。</p><h2 id="二-三种模式的转换"><a href="#二-三种模式的转换" class="headerlink" title="二.三种模式的转换"></a>二.三种模式的转换</h2><p>打开文件就进入一般模式，安i，I，O,o,a,A,r,R等任何一个字符就进入编辑模式，在一般模式下安：或/或？三个按钮中的任一个就进入命令行模式。从命令行模式或编辑模式按esc进入一般模式。<br>命令行模式和编辑模式不能相互切换。</p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p> <strong><em>第一部分（一般模式下的光标移动，复制粘贴，查找替换）</em></strong><br>​     h，j，k，l：光标左，下，上，右移动一个字符。<br>ctrl+f：屏幕向下移动一页。<br>ctrl+b：屏幕向上移动一页。<br>n+&lt;空格键&gt;：n表示数字，光标会向右移动这一行的n个字符。<br>0（数字）或home：移动到这一行的最前面字符处。<br>G：移动到这个文件的最后一行<br>nG:移到文件的第n行。<br>gg：移动到文件的第一行。<br>n+enter：光标向下移动n行。<br>/word：向下寻找一个字符串名为word的字符<br>？word：向上寻找一个字符串名为word的字符。<br>n/N：重复前一个查找动作。<br>：n1，n2s/word1/word2/g  ：在第n1和n2行之间寻找word1字符串，并替换为word2.<br>：1，$s/word1/word2/g  ：从第一行到最后一行寻找word1字符串，并替换为word2.<br>：1，$s/word1/word2/gc ：从第一行到最后一行寻找word1字符串，并替换为word2.并询问是否替换。<br>x/X：x向后删除一个字符，X向前删除一个字符。<br>dd：删除光标所在的一整行。<br>ndd：删除光标所在的向下n行。<br>yy：复制光标所在的那一行。<br>nyy：复制光标向下所在的n行。<br>p/P：p将已复制的内容在光标的下一行粘贴，P将已复制的内容在光标的上一行粘贴。<br>J：将光标所行与下一行数据结合成一行。<br>u：复原前一个操作。<br>ctrl+r:重做上一个操作。<br>.：（小数点）重复前一个操作。</p><p> <strong><em>- 一般模式切换到编辑模式</em></strong></p><ul><li>i/I，i从目前光标处插入，I目前光标所在行第一个非空格符处插入。</li><li>a/A：a目前光标所在的下一个字符插入，A目前光标所在行最后一个字符处插入。</li><li>o/O：o目前光标所在的下一行插入新的一行，O目前光标所在的上一行插入新的一行。</li></ul><p>一般模式切换到命令模式<br>：w：写入银盘。<br>：q：离开vi。<br>：wq：保存后离开。<br>：w！：若文件属性为只读，强制写入该文件。不过，到底能不能写入，还是跟你对该文件的权限有关。<br>（注：！在vi中具有强制的意思。）<br>：w+文件名：另存为。<br>：r+文件名：在编辑数据中读入另一个文件数据。<br>：set nu：显示行号。<br>：set nonu：取消行号。</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux入门 </tag>
            
            <tag> vi编辑器的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux入门之超简单ｓｈｅｌｌ文本实现锐捷开机自动认证链接校园网（ubuntu系统）</title>
      <link href="/posts/25329.html"/>
      <url>/posts/25329.html</url>
      
        <content type="html"><![CDATA[<p>本文实现了ubuntu18.04中锐捷开机自动认证校园网</p><a id="more"></a><p>1.实现锐捷开机自动认证校园网的前提是你已安装好锐捷，并且能够连上校园网。（如果没有连上校园网，请看我的另一篇博客安装锐捷实现校园网链接：<a href="https://blog.csdn.net/wang_da_bing/article/details/81604042）。" target="_blank" rel="noopener">https://blog.csdn.net/wang_da_bing/article/details/81604042）。</a><br>2.vim /home/auto.sh(用vim新建一个shell脚本，路径可以自己写）</p><pre><code>#这是shell脚本内容#！/bin/bash#这里可以编写shell脚本的一些说明信息sudo /home/li/rjsupplicant/rjsipplicant.sh -a 1 -d 0 -U user-accont(账户) -p user-password(用户密码)</code></pre><p>最后保存文件退出。<br>3.找到Ubuntu自带的启动项管理软件，将你写的shell脚本添加至开机启动程序。至此就实现了开机自启动。<br>附录：可以用别名简化命令，实现更加便捷的认证如下：</p><pre><code>alisa ruijie = &#39;sudo /home/li/rjsupplicant/rjsipplicant.sh -a 1 -d 0 -U user-accont(账户) -p user-password&#39;#这时你就可以通过输入ruijie实现认证，但是当你重启终端时，该命令就失效了，所以我们要把它写入配置文件。su root #切换至root用户vim /etc/sudoers将root ALL ALL=(ALL)ALL下添加上user-name  ALL=（ALL）ALL#这是 让你执行sudo命令时不再输入密码最后将alisa ruijie = &#39;sudo /home/li/rjsupplicant/rjsipplicant.sh -a 1 -d 0 -U user-accont(账户) -p user-password&#39;写入~/.bashrc(只对当前用户有效，写入/etc/.bashrc则所有用户都可以用该别名）</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux入门 </tag>
            
            <tag> shell脚本 </tag>
            
            <tag> 开机自动链接校园网本文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10中常用快捷键</title>
      <link href="/posts/30739.html"/>
      <url>/posts/30739.html</url>
      
        <content type="html"><![CDATA[<p>本文简介了win10中常用的快捷键</p><a id="more"></a><p>一：浏览器（谷歌全可以用，其它浏览器部分可用）常用快捷键：<br>1、f5 和 Ctrl+r 和Ctrl+f5             刷新当前页面<br>2、Ctrl+w  和 Ctrl+f4    关闭当前窗口<br>3、Ctrl+t    打开一个空白窗口<br>4、Ctrl+tab    切换浏览器窗口<br>5、Ctrl+“+”    当前页面放大20%<br>6、Ctrl+ “-”    当前页面缩小20%<br>7、Ctrl + “*‘’    恢复当前页面的缩放为原始大小<br>8、Ctrl +shift+n    谷歌浏览中打开一个新的浏览器并进入无痕隐私模式<br>9、Ctrl +shift +w    关闭除锁定窗口外的其他窗口<br>10、f1    打开浏览器帮助页面（不常用）<br>11、Ctrl+d    将当前页面添加收藏（可在主页面方便打开）<br>12、Ctrl+k    将焦点放在地址栏<br>13、Ctrl+n    打开一个新的浏览器<br>14、Ctrl+s    保存当前页面链接（不常用）<br>二：桌面常用快捷键<br>1、Ctrl+tab    切换任务栏中打开的任务<br>2、win+e    打开文件管理器<br>3、选中+f2    改名<br>4、win+l    进入锁屏模式<br>三：文档编辑常用快捷键<br>1、Ctrl+a    全选当前页面内容<br>2、Ctrl+y    重复上一步操作<br>3、Ctrl+z    撤销上一步操作<br>4、Ctrl+x，Ctrl+c，Ctrl+v，Ctrl+s    剪切，复制，黏贴，保存</p><p>四：其它快捷键<br>1、win+d    迅速回到桌面<br>2、win+tab    打开窗口视图（含有文档浏览历史）<br>3、shift+delete    彻底删除选中文件（不进入回收站）<br>4、win+向上方向键：放大当前窗口（窗口是中型框）<br>5、win+向下方向键：第一次从最大框变为中型框，第二次从中型框变为最小化<br>五：win10的虚拟桌面可以自己尝试一下。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从程序学Python之文本进度条</title>
      <link href="/posts/20973.html"/>
      <url>/posts/20973.html</url>
      
        <content type="html"><![CDATA[<p>通过Python实现文本进度条</p><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#TextProBarV1.py</span><span class="token keyword">import</span> time scale <span class="token operator">=</span> <span class="token number">50</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"执行开始"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span>scale<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>scale<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ​    a <span class="token operator">=</span> <span class="token string">'*'</span> <span class="token operator">*</span> i ​    b <span class="token operator">=</span> <span class="token string">'.'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>scale <span class="token operator">-</span> i<span class="token punctuation">)</span>​    c <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">/</span>scale<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span> ​    dur <span class="token operator">=</span> time<span class="token punctuation">.</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start ​    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\r{:^3.0f}%[{}->{}]{:.2f}s"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>c<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>dur<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>​    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token operator">+</span><span class="token string">"执行结束"</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span>scale<span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>  第一句语法：<br>     import time 引入时间库<br> 第二句语法：<br>    定义一个scale变量并赋值为50，控制进度条的进行快慢。<br>  第三句语法：<br>  &lt;字符串&gt;.center(scale//2,”-“):将字符串居中，并将“-”填充在字符串的两侧空白处，scale为控制字符串所占的字节数。<br>  第五句语法：<br>  time.perf_counter（）函数可以获取系统的当前时间并赋值给start（该时间没有意义，时间差才有意义）<br>  第六句语法：<br>  for i in range（）遍历循环，控制进度条进度<br>   第七句语法：<br>   该句表示将*重复复制i遍，并赋值于a；<br>   第八句语法：<br>   将.重复复制（scale-i）遍，并赋值于b<br>   第九句语法：<br>   计算进度条显示的百分比<br>   第十句语法：<br>   再次获得当前系统时间，并作差，将差值赋予dur。<br>   第十一句语法：<br>   输出进度条，并进行单条动态刷新，/r为将光标移植本行句首，实现动态刷新。<br>   第十二句语法：<br>   将进行程度打印出来<br>   第十三句语法：<br>   time（n）：系统休息函数，每次循环系统cpu休息一定时间。当做下载用时<br>   第四十句语法：<br>   输出执行结束<br> 程序拓展：<br>time库包括三类函数</p><ul><li>时间获取：time() ctime() gmtime() -</li><li>时间格式化：strftime() strptime()<ul><li>程序计时：sleep(), perf_counter()</li></ul></li></ul><p>1.time()  ：<br>获取当前时间戳，即计算机内部时间值，浮点数<br>time.time() 1516939876.6022282<br>2.time.ctime()：<br>获取当前时间并以易读方式表示，返回字符串<br>eg：time.ctime()<br>     ‘Fri Jan 26 12:11:16 2018’<br> 3.gmtime()：<br>获取当前时间，表示为计算机可处理的时间格式<br> eg：time.gmtime()<br>time.struct_time(tm_year=2018, tm_mon=1, tm_mday=26, tm_hour=4, tm_min=11, tm_sec=16, tm_wday=4, tm_yday=26, tm_isdst=0)<br>4.strftime(tpl, ts)：<br>tpl是格式化模板字符串，用来定义输出效果 ts是计算机内部时间类型变量<br>eg：<br>t = time.gmtime()<br>time.strftime(“%Y-%m-%d %H:%M:%S”,t) ‘2018-01-26 12:55:20’<br>5.  strptime(str, tpl)：<br>str是字符串形式的时间值 tpl是格式化模板字符串，用来定义输入效果<br>eg：timeStr = ‘2018-01-26 12:55:20’<br>time.strptime(timeStr, “%Y-%m-%d %H:%M:%S”) time.struct_time(tm_year=2018, tm_mon=1, tm_mday=26, tm_hour=4, tm_min=11, tm_sec=16, tm_wday=4, tm_yday=26, tm_isdst=0)<br>6.sleep(s)：<br>s拟休眠的时间，单位是秒，可以是浮点数<br>eg：def wait(): time.sleep(3.3)<br>wait() #程序将等待3.3秒后再退出</p><p>```</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python入门 </tag>
            
            <tag> 文本进度条 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从程序学Python之蒙特卡罗法求圆周率</title>
      <link href="/posts/35121.html"/>
      <url>/posts/35121.html</url>
      
        <content type="html"><![CDATA[<p>本文通过Python程序实现用蒙特卡罗法求圆周率</p><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#CalPiV2.py</span> <span class="token keyword">from</span> random <span class="token keyword">import</span> random  <span class="token keyword">from</span> time <span class="token keyword">import</span> perf_counter  DARTS <span class="token operator">=</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token number">1000</span> start <span class="token operator">=</span> perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span> hits <span class="token operator">=</span> <span class="token number">0.0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> DARTS<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>​      x<span class="token punctuation">,</span> y <span class="token operator">=</span> random<span class="token punctuation">(</span><span class="token punctuation">)</span>， random<span class="token punctuation">(</span><span class="token punctuation">)</span>​      dist <span class="token operator">=</span> pow<span class="token punctuation">(</span>x <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> y <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span> ​      <span class="token keyword">if</span> dist <span class="token operator">&lt;=</span> <span class="token number">1.0</span><span class="token punctuation">:</span>​           hits <span class="token operator">=</span> hits <span class="token operator">+</span> <span class="token number">1</span>pi <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>hits<span class="token operator">/</span>DARTS<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"圆周率值是: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"运行时间是: {:.5f}s"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>蒙特卡洛计算圆周率原理：在边长为1的正方形内画单位圆内随机投点，最后用圆内点数比正方形点数得两者面积比，进一步求解圆周率。<br>1.第一，二句语法：<br>用import引用random（产生随机数的库）用import引用time时间库<br>2.第三句语法：<br>定义DARTS当做投点总数<br>3.第四句语法：<br>调用time函数获取当前时间赋于start<br>4.第五句语法：<br>记录圆内投点次数<br>5.第六局语法：<br>for的便历循环，循环投点<br>6.第七句语法：<br>获取两个随机点数赋于x，y<br>7.第八句语法：<br>计算随机点是否落在圆内<br>8.第九句语法：<br>根据面积公式计算圆周率<br>9.十，十一句语法：<br>输出圆周率和时间</p><p>拓展：随机库的相关知识；</p><ul><li>基本随机数函数： seed(), random() </li><li><ul><li>扩展随机数函数： randint(), getrandbits(), uniform(), randrange(), choice(), shuffle()</li></ul></li></ul><p>1.seed(a=None)<br>初始化给定的随机数种子，默认为当前系统时间 &gt;&gt;&gt;random.seed(10) #产生种子10对应的序列<br>2.random()<br>生成一个[0.0, 1.0)之间的随机小数 &gt;&gt;&gt;random.random() 0.5714025946899135<br>3.randint(a, b)<br>生成一个[a, b]之间的整数 &gt;&gt;&gt;random.randint(10, 100) 64<br>4.randrange(m, n[, k])<br>生成一个[m, n)之间以k为步长的随机整数 &gt;&gt;&gt;random.randrange(10, 100, 10) 80<br>5.getrandbits(k)<br>生成一个k比特长的随机整数 &gt;&gt;&gt;random.getrandbits(16) 37885<br>6.uniform(a, b)<br>生成一个[a, b]之间的随机小数 &gt;&gt;&gt;random.uniform(10, 100) 13.096321648808136<br>7.choice(seq)<br>从序列seq中随机选择一个元素 &gt;&gt;&gt;random.choice([1,2,3,4,5,6,7,8,9]) 8<br>8.shuffle(seq)<br>将序列seq中元素随机排列，返回打乱后的序列 &gt;&gt;&gt;s=[1,2,3,4,5,6,7,8,9];random.shuffle(s);print(s) [3, 5, 8, 9, 6, 1, 2, 7, 4]</p><p>```</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python入门 </tag>
            
            <tag> 蒙特卡罗求圆周率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从程序学Python之蟒蛇绘制</title>
      <link href="/posts/4921.html"/>
      <url>/posts/4921.html</url>
      
        <content type="html"><![CDATA[<p>本文通过Python程序实现蟒蛇绘制</p><a id="more"></a><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#PythonDraw.py </span><span class="token keyword">import</span> turtle turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">650</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span> turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">250</span><span class="token punctuation">)</span> turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span> turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span> turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"purple"</span><span class="token punctuation">)</span> turtle<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ​     turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>     ​     turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> ​     turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> ​     turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span> ​     turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span>  turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>turtle库的说明：<br>turtle又名海龟库是Python中绘图的第三方库<br><strong>第一句语法如下</strong><br>import关键词的运用：先导入import &lt;库名&gt; 然后再引用 &lt;库名&gt;.&lt;函数名&gt;(&lt;函数参数&gt;)<br>inport起导入库函数作用，其三种形式如下：<br>1.import +库文件名（其后引用库内函数必须带（库名.函数名）形式，eg：turtle.penup()   )<br>2.from+库名import<em>（其后可省略库名.直接用函数名引用库函数）<br>3.inport+库名as 任意字母（用as后字母代替库名，起简化作用）<br>*</em>第二句语法如下**<br>turtle.setup（）建立画框其参数表示画框相对显示屏左上角的位置，单位是像素。<br><strong>第三句语法如下</strong><br>turtle.penup() 别名 turtle.pu() 抬起画笔，海龟在飞行（即此时不进行绘画）<br><strong>第四句语法如下</strong></p><ul><li>turtle.forward(d) 别名 turtle.fd(d) 向前行进，海龟走直线</li><li>d: 行进距离，可以为负数。平移多少像素参数为正，向前平移，参数为负值，向后平移</li></ul><p><strong>第五句语法如下</strong><br>turtle.pendown() 别名 turtle.pd() 落下画笔，海龟在爬行（绘画状态）<br><strong>第六句语法</strong><br>turtle.pensize(width) 别名 turtle.width(width) 画笔宽度，海龟的腰围（画笔设置一次即一直有效，直到下次重置）<br><strong>第七句语法</strong><br>turtle.pencolor(color) color为颜色字符串或r,g,b值 画笔颜色，海龟在涂装<br>pencolor(color)的color参与可以有三种形式</p><ul><li>颜色字符串turtle.pencolor(“purple”)</li><li>RGB的小数值：turtle.pencolor(0.63, 0.13, 0.94) </li><li>RGB的元组值：turtle.pencolor((0.63,0.13,0.94))</li></ul><p><strong>第八句语法</strong></p><ul><li>turtle.setheading(angle) 别名 turtle.seth(angle) 改变行进方向，海龟走角度</li><li>angle: 行进方向的绝对角度（以画布中心为原点建立的坐标）<br>补充：- turtle.left(angle) 海龟向左转</li><li><ul><li>turtle.right(angle) 海龟向右转 - </li></ul></li><li>angle: 在海龟当前行进方向上旋转的角度</li></ul><p><strong>第九句语法</strong><br>按照一定次数循环执行一组语句<br>for &lt;变量&gt; in range(&lt;次数&gt;): &lt;被循环执行的语句&gt;</p><ul><li>&lt;变量&gt;表示每次循环的计数，0到&lt;次数&gt;-1<br>eg：&gt;&gt;&gt; for i in range(5):<br>print(i)<br>0 1 2 3 4<br>for i in range(5):<br>print(“Hello:”,i)<br>Hello: 0 Hello: 1 Hello: 2 Hello: 3 Hello: 4<br>range()函数 产生循环计数序列</li><li>range(N) 产生 0 到 N-1的整数序列，共N个</li><li>range(M,N) 产生M 到 N-1的整数序列，共N-M个<br>eg：range(5)<br>0, 1, 2, 3, 4<br>range(2, 5)<br>2, 3, 4</li></ul><p><strong>第十句语法</strong><br>运动控制函数 控制海龟行进：走直线 &amp; 走曲线</p><ul><li>turtle.circle(r, extent=None) 根据半径r绘制extent角度的弧形</li><li>r: 默认圆心在海龟左侧r距离的位置 -</li><li>extent: 绘制角度，默认是360度整圆</li></ul><p><strong>第十五句语法</strong><br>turtle.done（）为绘图结束函数<br><strong>语法综述</strong>：<br>turtle程序语法元素分析</p><ul><li>库引用: import、from…import、import…as… -</li><li>penup()、pendown()、pensize()、pencolor()<br>循环语句：for和in、range()函数</li></ul><p><strong><em>补充知识点</em></strong><br>1.turtle的原（wan）理（fa） turtle(海龟)是一种真实的存在</p><ul><li>有一只海龟，其实在窗体正中心，在画布上游走 - 走过的轨迹形成了绘制的图形 - 海龟由程序控制，可以变换颜色、改变宽度等</li></ul><p>2.RGB色彩模式 由三种颜色构成的万物色</p><ul><li>RGB指红蓝绿三个通道的颜色组合 - 覆盖视力所能感知的所有颜色 - RGB每色取值范围0-255整数或0-1小数英文名称- </li></ul><p>3.- turtle库的海龟绘图法 - turtle.setup()调整绘图窗体在电脑屏幕中的布局 - 画布上以中心为原点的空间坐标系: 绝对坐标&amp;海龟坐标 - 画布上以空间x轴为0度的角度坐标系: 绝对角度&amp;海龟角度 - RGB色彩体系，整数值&amp;小数值，色彩模式切换</p><pre><code></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Python入门 </tag>
            
            <tag> 蟒蛇绘制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Mybatis之工程搭建</title>
      <link href="/posts/41542.html"/>
      <url>/posts/41542.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Mybatis？"><a href="#什么是Mybatis？" class="headerlink" title="什么是Mybatis？"></a>什么是Mybatis？</h1><p>简介：MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。[贴个官网][<a href="http://www.mybatis.org/mybatis-3/]" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/]</a></p><blockquote><p>简而言之：MyBatis是对jdbc的进一步封装，让我们能以oop的编程思维对待数据库。</p></blockquote><p>好处： 为了和数据库进行交互，通常的做法是将SQL语句写在Java代码中，SQL语句和Java代码耦合在一起不利于后期维护修改，而MyBatis能够帮助我们将SQL语句和Java代码分离，方便了后期因需求变动而对SQL语句进行修改。（联系properties文件的作用）</p><h1 id="利用Mybatis建立初步的简单工程（通过xml文件配置）"><a href="#利用Mybatis建立初步的简单工程（通过xml文件配置）" class="headerlink" title="利用Mybatis建立初步的简单工程（通过xml文件配置）"></a>利用Mybatis建立初步的简单工程（通过xml文件配置）</h1><ol><li>下载MyBatis相应jar包：<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a></li><li>创建Java工程，导入MyBatis jar包（mybatis-3.4.4.jar）和数据库驱动包</li><li>建立工程的源码如下：</li></ol><p><strong>mybatis-config的配置文件如下</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE configuration PUBLIC <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span>     <span class="token operator">&lt;</span>environments <span class="token keyword">default</span><span class="token operator">=</span><span class="token string">"dev"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>environment id<span class="token operator">=</span><span class="token string">"dev"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>transactionManager type<span class="token operator">=</span><span class="token string">"JDBC"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>transactionManager<span class="token operator">></span>            <span class="token operator">&lt;</span>dataSource type<span class="token operator">=</span><span class="token string">"POOLED"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driver"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/test"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dataSource<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>environment<span class="token operator">></span>        <span class="token operator">&lt;</span>environment id<span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>transactionManager type<span class="token operator">=</span><span class="token string">"JDBC"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>transactionManager<span class="token operator">></span>            <span class="token operator">&lt;</span>dataSource type<span class="token operator">=</span><span class="token string">"POOLED"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driver"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://127.0.0.1:3306:keeper"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>                <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>dataSource<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>environment<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>environments<span class="token operator">></span>    <span class="token operator">&lt;</span>mappers<span class="token operator">></span>        <span class="token operator">&lt;</span>mapper resource<span class="token operator">=</span><span class="token string">"area.xml"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>mappers<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>configuration<span class="token operator">></span></code></pre><blockquote><p>该配置文件主要配置数据库的连接<br>可以配置多个数据库的链接，通过environments中default属性值和environment标签中的属性值的相匹配来确定连接哪一个数据库。<br>通过mappers标签引入sql语句及其相关配置<br>DOCTYPE 语句的作用是加载相关文件，使你的ide能够智能提示相关标签，属性。</p></blockquote><p><strong>area.xml的源码如下</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.zzu.area.IAreaDao"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"select"</span> resultType<span class="token operator">=</span><span class="token string">"java.lang.String"</span><span class="token operator">></span>        select name from area where code <span class="token operator">=</span>#<span class="token punctuation">{</span>code<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span></code></pre><blockquote><p>注：DOCTYPE语句的作用同上<br>namespace属性用来匹配该sql语句作用的接口<br>select标签表示查看的sql语句，id属性指明该sql语句作用的方法。resultType属性指明该方法的返回值类型</p></blockquote><p><strong>IAreaDao的源码如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zzu<span class="token punctuation">.</span>area<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAreaDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">select</span><span class="token punctuation">(</span>String code<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>Test类的源码如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>zzu<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Resources<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSession<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>SqlSessionFactoryBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>zzu<span class="token punctuation">.</span>area<span class="token punctuation">.</span>IAreaDao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         *1.先获取配置资源          *2.获取sqlsessionfactory对象          *3. 获取sqlSession对象          *4. 获取dao层的代理类          *5. 调用方法         */</span>         InputStream inputStream <span class="token operator">=</span>         Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> SqlSessionFactory         sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取SqlSession对象，代表与数据库的一次会话，用完需要关闭。注意：由于SqlSession为非线程安全的，所以该变量应定义为局部变量，不要定义成全局变量</span>         SqlSession sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> IAreaDao areaDao <span class="token operator">=</span>         sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>IAreaDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String name <span class="token operator">=</span> areaDao<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"370982"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>代码理解见注释</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简单工程搭建 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>确定Java程序中哪个线程最耗CPU资源的方法</title>
      <link href="/posts/61837.html"/>
      <url>/posts/61837.html</url>
      
        <content type="html"><![CDATA[<h1 id="Window操作系统"><a href="#Window操作系统" class="headerlink" title="Window操作系统"></a>Window操作系统</h1><p><strong>执行如下程序</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注：通过cmd命令窗口执行jps获取当前进程的pid<br>安装并启动进程管理：下载地址：<a href="http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx——&gt;解压运行，如下图所示：" target="_blank" rel="noopener">http://technet.microsoft.com/en-us/sysinternals/bb896653.aspx——&gt;解压运行，如下图所示：</a></p></blockquote><p><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190721180733767.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>注：在上图寻找进程id为上一步通过jsp命令获取的进程的pid的进程（上图红框框起处）——&gt;鼠标浮在该进程信息上——&gt;鼠标右键——&gt;选择“Properties…”，出现下图：<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190721180910219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注：选择 Threads 选项卡——&gt;找到最耗CPU资源的线程——&gt;将该线程tid转为十六进制，如5184对应十六进制为1440<br>执行jstack 4844命令输出4844进程内各线程信息——&gt;在该结果中寻找nid为1440的线程（4844为你上一步获取的pid），如下结果</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">11</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">02</span>Full thread dump Java <span class="token function">HotSpot</span><span class="token punctuation">(</span>TM<span class="token punctuation">)</span> Client <span class="token function">VM</span> <span class="token punctuation">(</span><span class="token number">25.131</span><span class="token operator">-</span>b11 mixed mode<span class="token punctuation">,</span> sharing<span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"DestroyJavaVM"</span> #<span class="token number">9</span> prio<span class="token operator">=</span><span class="token number">5</span> os_prio<span class="token operator">=</span><span class="token number">0</span> tid<span class="token operator">=</span><span class="token number">0x00eac400</span> nid<span class="token operator">=</span><span class="token number">0x1724</span> waiting on condition <span class="token punctuation">[</span><span class="token number">0x00000000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>State<span class="token operator">:</span> RUNNABLE<span class="token string">"Thread-0"</span> #<span class="token number">8</span> prio<span class="token operator">=</span><span class="token number">5</span> os_prio<span class="token operator">=</span><span class="token number">0</span> tid<span class="token operator">=</span><span class="token number">0x159a6c00</span> nid<span class="token operator">=</span><span class="token number">0x1440</span> runnable <span class="token punctuation">[</span><span class="token number">0x1538f000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>State<span class="token operator">:</span> RUNNABLE    at Test$Task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">748</span><span class="token punctuation">)</span><span class="token string">"Service Thread"</span> #<span class="token number">7</span> daemon prio<span class="token operator">=</span><span class="token number">9</span> os_prio<span class="token operator">=</span><span class="token number">0</span> tid<span class="token operator">=</span><span class="token number">0x00dd6400</span> nid<span class="token operator">=</span><span class="token number">0x6b8</span> runnable <span class="token punctuation">[</span><span class="token number">0x00000000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>State<span class="token operator">:</span> RUNNABLE<span class="token string">"C1 CompilerThread0"</span> #<span class="token number">6</span> daemon prio<span class="token operator">=</span><span class="token number">9</span> os_prio<span class="token operator">=</span><span class="token number">2</span> tid<span class="token operator">=</span><span class="token number">0x00dcf800</span> nid<span class="token operator">=</span><span class="token number">0x2238</span> waiting on condition <span class="token punctuation">[</span><span class="token number">0x00000000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>State<span class="token operator">:</span> RUNNABLE<span class="token string">"Attach Listener"</span> #<span class="token number">5</span> daemon prio<span class="token operator">=</span><span class="token number">5</span> os_prio<span class="token operator">=</span><span class="token number">2</span> tid<span class="token operator">=</span><span class="token number">0x00dce800</span> nid<span class="token operator">=</span><span class="token number">0x21a8</span> waiting on condition <span class="token punctuation">[</span><span class="token number">0x00000000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>State<span class="token operator">:</span> RUNNABLE<span class="token string">"Signal Dispatcher"</span> #<span class="token number">4</span> daemon prio<span class="token operator">=</span><span class="token number">9</span> os_prio<span class="token operator">=</span><span class="token number">2</span> tid<span class="token operator">=</span><span class="token number">0x00dcc800</span> nid<span class="token operator">=</span><span class="token number">0xd68</span> runnable <span class="token punctuation">[</span><span class="token number">0x00000000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>State<span class="token operator">:</span> RUNNABLE<span class="token string">"Finalizer"</span> #<span class="token number">3</span> daemon prio<span class="token operator">=</span><span class="token number">8</span> os_prio<span class="token operator">=</span><span class="token number">1</span> tid<span class="token operator">=</span><span class="token number">0x00db3c00</span> nid<span class="token operator">=</span><span class="token number">0x1570</span> in Object<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">0x0112f000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>State<span class="token operator">:</span> <span class="token function">WAITING</span> <span class="token punctuation">(</span>on object monitor<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    <span class="token operator">-</span> waiting on <span class="token operator">&lt;</span><span class="token number">0x04608978</span><span class="token operator">></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>ReferenceQueue$Lock<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>ReferenceQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ReferenceQueue<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">143</span><span class="token punctuation">)</span>    <span class="token operator">-</span> locked <span class="token operator">&lt;</span><span class="token number">0x04608978</span><span class="token operator">></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>ReferenceQueue$Lock<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>ReferenceQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ReferenceQueue<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">164</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>Finalizer$FinalizerThread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Finalizer<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">209</span><span class="token punctuation">)</span><span class="token string">"Reference Handler"</span> #<span class="token number">2</span> daemon prio<span class="token operator">=</span><span class="token number">10</span> os_prio<span class="token operator">=</span><span class="token number">2</span> tid<span class="token operator">=</span><span class="token number">0x00d56800</span> nid<span class="token operator">=</span><span class="token number">0x1be0</span> in Object<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">0x0109f000</span><span class="token punctuation">]</span>   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>State<span class="token operator">:</span> <span class="token function">WAITING</span> <span class="token punctuation">(</span>on object monitor<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    <span class="token operator">-</span> waiting on <span class="token operator">&lt;</span><span class="token number">0x04606a90</span><span class="token operator">></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>Reference$Lock<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">502</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>Reference<span class="token punctuation">.</span><span class="token function">tryHandlePending</span><span class="token punctuation">(</span>Reference<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">191</span><span class="token punctuation">)</span>    <span class="token operator">-</span> locked <span class="token operator">&lt;</span><span class="token number">0x04606a90</span><span class="token operator">></span> <span class="token punctuation">(</span>a java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>Reference$Lock<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>Reference$ReferenceHandler<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Reference<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">153</span><span class="token punctuation">)</span><span class="token string">"VM Thread"</span> os_prio<span class="token operator">=</span><span class="token number">2</span> tid<span class="token operator">=</span><span class="token number">0x00d52c00</span> nid<span class="token operator">=</span><span class="token number">0x15f0</span> runnable <span class="token string">"VM Periodic Task Thread"</span> os_prio<span class="token operator">=</span><span class="token number">2</span> tid<span class="token operator">=</span><span class="token number">0x159a0800</span> nid<span class="token operator">=</span><span class="token number">0x2538</span> waiting on condition JNI global references<span class="token operator">:</span> <span class="token number">6</span></code></pre><blockquote><p>注：根据线程提示信息，确定Java程序哪个类哪个位置导致了该线程最耗CPU资源——&gt;找到类后打开代码，分析程序，思考解决方案！</p></blockquote><h1 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h1><ol><li>通过jps命令找出Java程序进程ID：</li><li>通过top -Hp pid命令找出该进程内CPU时间最长线程id，将该线程id转换为十六进制；</li><li>通过jstack pid命令输出pid进程内各线程信息，在众多线程中，nid的值为第二步得到的十六进制的线程即是需要格外“关照”的线程；</li></ol>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM性能调优 </tag>
            
            <tag> 线程消耗CPU的资源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>细说ubuntu18.04安装Android Studio所踩过的坑</title>
      <link href="/posts/37101.html"/>
      <url>/posts/37101.html</url>
      
        <content type="html"><![CDATA[<p>本文主要讲述了ubuntu18.04下安装ＡＳ（包含小米真机调试，快捷图标的设置）</p><a id="more"></a><blockquote><p>注：安装ＡＳ之前请确保已经装好ｊｄｋ，并且配置好了环境。</p></blockquote><h2 id="一：安装AS"><a href="#一：安装AS" class="headerlink" title="一：安装ＡＳ"></a>一：安装ＡＳ</h2><ol><li>从官网上下载linux版的ＡＳ，最好连ｓｄｋ一并下载下来，解压到自己选定的文件夹下。<br>放一个中国安卓社区的官网链接：<a href="http://www.android-studio.org/" target="_blank" rel="noopener">http://www.android-studio.org/</a></li><li>通过终端的的ｃｄ命令切换到ＡＳ下的ｂｉｎ文件夹执行如下命令<pre class=" language-shell"><code class="language-shell">sudo chmod a＋x ./android.sh./android.sh</code></pre></li><li>按照提示步骤往下安装</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础之系统启动原理</title>
      <link href="/posts/7707.html"/>
      <url>/posts/7707.html</url>
      
        <content type="html"><![CDATA[<h2 id="一：计算机硬件："><a href="#一：计算机硬件：" class="headerlink" title="一：计算机硬件："></a>一：计算机硬件：</h2><a id="more"></a><h4 id="1-cpu：其内有两个主要单元算术逻辑单元和控制单元"><a href="#1-cpu：其内有两个主要单元算术逻辑单元和控制单元" class="headerlink" title="1.cpu：其内有两个主要单元算术逻辑单元和控制单元"></a>1.cpu：其内有两个主要单元算术逻辑单元和控制单元</h4><p>微指令集：我们所使用的软件都要经过cpu内部的微指令集完成<br>微指令集分类：1：精简指令集：每个指令都很短，完成的操作单纯。代表ARM即是手机的处理器</p><p>2：复杂指令集：每个小指令都可以执行一些较低界的硬件操作，指令数目多且复杂，每条指令花费时间多但是可以处理的工作较复杂杂。代表intter和AMD</p><h5 id="cpu参数：频率：cpu美秒可以进行的工作次数。"><a href="#cpu参数：频率：cpu美秒可以进行的工作次数。" class="headerlink" title="cpu参数：频率：cpu美秒可以进行的工作次数。"></a>cpu参数：频率：cpu美秒可以进行的工作次数。</h5><p>外频：cpu与外部组件进行数据传输/运算时的速度<br>倍频：cpu内部用来加速工作性能的一个倍数。频率=外频*倍频<br>超频：将cpu的倍频或外频通过主板的设定功能改成更高频率的一种方式。但是cpu倍频通常在出厂时就已经固定，所以超频通常指外频的超频。</p><h4 id="2-接口设备："><a href="#2-接口设备：" class="headerlink" title="2.接口设备："></a>2.接口设备：</h4><p>​    存储设备：硬盘等<br>​    显示设备：显示器等<br>​    网络设备：网卡等</p><h3 id="3芯片组：即是常说的电脑主板"><a href="#3芯片组：即是常说的电脑主板" class="headerlink" title="3芯片组：即是常说的电脑主板"></a>3芯片组：即是常说的电脑主板</h3><p>​    其通常又分为两个桥接器来控制个组件的通信，北桥负责连接较快的cpu，内存，显卡等组件，而南桥负责连接周边速度较慢的接口，像硬盘，usb，网卡等。（inter和amd两家公司的cpu适合的主板构造并不同，以上是inter主板）</p><h3 id="3：内存：与cpu相连，读写速度快于硬盘，cpu内的数据通常有内存传入。"><a href="#3：内存：与cpu相连，读写速度快于硬盘，cpu内的数据通常有内存传入。" class="headerlink" title="3：内存：与cpu相连，读写速度快于硬盘，cpu内的数据通常有内存传入。"></a>3：内存：与cpu相连，读写速度快于硬盘，cpu内的数据通常有内存传入。</h3><p>​            参数 ：DDR：双倍数据传送速度。（双通道性能释放更好（增加传输数据通道数目））</p><p>4.显卡：一般图像显示的重点在于分辨率和色彩深度，图像颜色的显示会占用内存，因此显卡有内存大小这个参数指标，另外显卡的运算能力对于三维游戏也越来越重要，厂商直接在显卡上嵌入一个3D加速芯片，这就是GPU。</p><h2 id="二：操作系统的工作原理及电脑的启动"><a href="#二：操作系统的工作原理及电脑的启动" class="headerlink" title="二：操作系统的工作原理及电脑的启动"></a>二：操作系统的工作原理及电脑的启动</h2><p>​    1.操作系统：操作系统其实也是一组程序，它的重点在于管理计算机的所有活动以及驱动系统中的所有硬件。系统调用和内核组成了操作系统。<br>​        2.CMOS：CMOS是计算机主板上的一个芯片，其功能为记录主板上面的主要参数，包括系统时间、cpu电压与频率、各项设备的I/O地址与IRQ等。<br>​        3 。BIOS：BIOS为写入到主板上某一块闪存或EEPROM上的程序（韧体：即写入到硬件上的一个软件程序），它可以在开机的时候执行，以加载CMOS中的数据，并尝试调用存储设备中的开机程序，进一步进入操作系统中。<br>​        4.MBR：（主引导分区）磁盘扇区的一个重要部分，有446bytes大小，可以安装引导加载程序的地方。<br>​        <strong>4.开机流程：开机，计算机会主动执行BIOS（硬件上的程序，会读入CMOS中的相关信息），接下来BIOS会分析计算机里有哪些存储设备，会读取存储设备的第一个扇区的MBR位置，MBR里会放最基本的引导加载程序，此时BIOS的任务完成，MBR中的引导加载程序会识别内核文件（即文件系统格式），然后操作系统就启动了。</strong><br>​        </p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机入门 </tag>
            
            <tag> 系统启动原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解AOP的实现及执行流程</title>
      <link href="/posts/50530.html"/>
      <url>/posts/50530.html</url>
      
        <content type="html"><![CDATA[<h1 id="AOP的简单介绍"><a href="#AOP的简单介绍" class="headerlink" title="AOP的简单介绍"></a>AOP的简单介绍</h1><p>AOP（Aspect Oriented Programming 面向切面编程）是一种通过运行期动态代理实现代码复用的机制，是对传统OOP(Object Oriented Programming，面向对象编程 )的补充。目前，Aspectj是Java社区里最完整最流行的AOP框架，在Spring 2.0以上版本中可以通过Aspectj注解或基于XML配置AOP。</p><h1 id="建立AOP实例工程"><a href="#建立AOP实例工程" class="headerlink" title="建立AOP实例工程"></a>建立AOP实例工程</h1><h2 id="工程结构如下图所示"><a href="#工程结构如下图所示" class="headerlink" title="工程结构如下图所示"></a>工程结构如下图所示</h2><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190716172425.png" alt="工程结构"></p><p><strong>ICalculatorService的源码如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICalculatorService</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>CalculatorService的源码如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">.</span>imp<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">.</span>ICalculatorService<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorService</span> <span class="token keyword">implements</span> <span class="token class-name">ICalculatorService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：The mul method begins."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：Parameters of the mul method： ["</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：Result of the mul method："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：The mul method ends."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：The div method begins."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：Parameters of the div method： ["</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：Result of the div method："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：The div method ends."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CalculatorAspect的源码如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">.</span>imp<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>JoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(int mul(int ,int))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>JoinPoint jp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object object <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object <span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：The "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" method begins."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：Parameters of the "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" method： ["</span><span class="token operator">+</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span>JoinPoint jp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object object <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：The "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" method ends."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Test源码如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">.</span>ICalculatorService<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"resource"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//获取管理Bean的IOC容器</span>        ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"application.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取容器中相关的类,符合条件，设置动态代理类</span>        ICalculatorService calculatorService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ICalculatorService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> calculatorService<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---->"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationContext<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭容器</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>application.xml的源码如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>beans<span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.jd"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy proxy<span class="token operator">-</span>target<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><h2 id="代码注解释义"><a href="#代码注解释义" class="headerlink" title="代码注解释义"></a>代码注解释义</h2><ol><li>@Aspect：将该类声明为切面类</li><li>@Component与@Service：将该类对象放入IOC容器</li><li>@Before(“execution(public int com.jd.calculator.CalculatorService.*(..))”)：前置增强（又称前置通知）即在目标方法执行之前执。</li><li>@After(“execution(public int com.jd.calculator.CalculatorService.*(..))”)：后置增强（又称后置通知）：在目标方法执行后执行，无论目标方法运行期间是否出现异常。注意：后置增强无法获取目标方法执行结果，可以在返回增强中获取。<h2 id="application-xml配置文件释义"><a href="#application-xml配置文件释义" class="headerlink" title="application.xml配置文件释义"></a>application.xml配置文件释义</h2><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.jd"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span></code></pre><blockquote><p>注：扫描com.jd包下的所有类，根据注解创建对象，放在IOC容器中。</p></blockquote></li></ol><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy proxy<span class="token operator">-</span>target<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy<span class="token operator">></span></code></pre><blockquote><p> 配置自动代理，proxy-target-class=”false”：默认为false:即设置代理为jdk动态代理，若改为true，则  设置代理为cglib动态代理<br>Spring的jar包已经包括了cglib的asm和cglib的jar包，所以不需要引入这两个包即可使用cglib动态代理。</p></blockquote><h2 id="AOP-的执行流程"><a href="#AOP-的执行流程" class="headerlink" title="AOP 的执行流程"></a>AOP 的执行流程</h2><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy proxy<span class="token operator">-</span>target<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy<span class="token operator">></span></code></pre><p>在执行以上配置时：找到Aspect注解的类（CalculatorAspect）–&gt;找到类中注解的方法获取注解属性值（@Before(“execution(int mul(int ,int))”)）–&gt;扫描所有类及类中方法–&gt;找到符合注解属性的方法–&gt;为该方法的类设置动态代理</p><blockquote><p>注：1. 可有通过IOC容器获取该动态代理。applicationContext.getBean(ICalculatorService.class);<br>2. 获取动态代理类时传入ICalculatorService.class，而不是CalculatorService.class是因为AOP默认采用jdk的动态代理（采用的是继承机制），而目标类CalculatorService.class与jdk动态代理 类不满足继承关系。<br>3. 若配置文件中配置proxy-target-class=”true”，则获取动态代理类时传入ICalculatorService.class<br>或CalculatorService.class都可以，原因是该配置修改AOP的动态代理为cglib动态代理（采用继承机制），动态代理类与这两个类都存在继承关系。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AOP的实现 </tag>
            
            <tag> AOP的执行流程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解AOP的实现（五种增强方式）及执行流程</title>
      <link href="/posts/46530.html"/>
      <url>/posts/46530.html</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><h1 id="AOP的简单介绍"><a href="#AOP的简单介绍" class="headerlink" title="AOP的简单介绍"></a>AOP的简单介绍</h1><p>AOP（Aspect Oriented Programming 面向切面编程）是一种通过运行期动态代理实现代码复用的机制，是对传统OOP(Object Oriented Programming，面向对象编程 )的补充。目前，Aspectj是Java社区里最完整最流行的AOP框架，在Spring 2.0以上版本中可以通过Aspectj注解或基于XML配置AOP。</p><h1 id="建立AOP实例工程"><a href="#建立AOP实例工程" class="headerlink" title="建立AOP实例工程"></a>建立AOP实例工程</h1><h2 id="工程结构如下图所示"><a href="#工程结构如下图所示" class="headerlink" title="工程结构如下图所示"></a>工程结构如下图所示</h2><p><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/2019071614023511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>ICalculatorService的源码如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICalculatorService</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>CalculatorService的源码如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">.</span>imp<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">.</span>ICalculatorService<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorService</span> <span class="token keyword">implements</span> <span class="token class-name">ICalculatorService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> a<span class="token operator">*</span>b<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token string">"两数之积不能为零"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> a<span class="token operator">/</span>b<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>CalculatorAspect的源码如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">.</span>imp<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>JoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Aspect<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Before<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(int mul(int ,int))"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//进一步实现代码重用（注解属性的重用）空方法上加入pointcut注解即可</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pointCut ()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span>JoinPoint jp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object object <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object <span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：The "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" method begins."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：Parameters of the "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" method： ["</span><span class="token operator">+</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"pointCut ()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span>JoinPoint jp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object object <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：The "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" method ends."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(int mul(int ,int))"</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnAfter</span><span class="token punctuation">(</span>JoinPoint jp <span class="token punctuation">,</span> Object result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object object <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：Result of the "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" method："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"execution(int mul(int ,int))"</span><span class="token punctuation">,</span> throwing<span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span> <span class="token punctuation">(</span>JoinPoint jp<span class="token punctuation">,</span> NullPointerException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object object <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：Result of the "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" method："</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注;环绕增强的代码如下：</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">process</span> <span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object result<span class="token operator">=</span>null<span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object object <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：The "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" method begins."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：Parameters of the "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" method： ["</span>                        <span class="token operator">+</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行目标方法</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：The "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" method ends."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：Result of the "</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">" method："</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>Test源码如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">.</span>ICalculatorService<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"resource"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//获取管理Bean的IOC容器</span>        ClassPathXmlApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"application.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取容器中相关的类,符合条件，设置动态代理类</span>        ICalculatorService calculatorService <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ICalculatorService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> calculatorService<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---->"</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationContext<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭容器</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>application.xml的源码如下：</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>beans<span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.jd"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy proxy<span class="token operator">-</span>target<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><h2 id="代码注解释义"><a href="#代码注解释义" class="headerlink" title="代码注解释义"></a>代码注解释义</h2><ol><li><p>@Aspect：将该类声明为切面类</p></li><li><p>@Component与@Service：将该类对象放入IOC容器</p></li><li><p>@Before(“execution(public int com.jd.calculator.CalculatorService.*(..))”)：前置增强（又称前置通知）即在目标方法执行之前执。</p></li><li><p>@After(“execution(public int com.jd.calculator.CalculatorService.*(..))”)：后置增强（又称后置通知）：在目标方法执行后执行，无论目标方法运行期间是否出现异常。注意：后置增强无法获取目标方法执行结果，可以在返回增强中获取。</p></li><li><p>@AfterReturning(value = “execution(int mul(int ,int))”, returning = “result”)：返回增强（又称返回通知）：在目标方法正常结束后执行，可以获取目标方法的执行结果。</p><blockquote><p> 注：返回增强的方法的参数名必须与注解属性returning的值相同</p></blockquote></li><li><p>@AfterThrowing(value=”execution(int mul(int ,int))”, throwing= “e”)：//异常增强（又称异常通知）：目标方法抛出异常之后执行，可以访问到异常对象，且可以指定在出现哪种异常时才执行增强代码。</p><blockquote><p> 注：1. 当目标方法抛出的异常与增强方法中的异常不满足继承关系时（增强方法中的异常必须为目标方法中的异常的父类），则异常增强不会触发。</p><ol start="2"><li><p>上例中如果传入实参为0，和1，触发异常，但不会进行异常增强（ArithmeticException和NullPointerException不为继承关系） </p><ol start="3"><li>@Before、@After、@AfterRunning和@AfterThrowing修饰的方法可以通过声明JoinPoint 类型参数变量获取目标方法的信息（方法名、参数列表等信息）；@Around修饰的方法必须声明ProceedingJoinPoint类型的参数，该变量可以决定是否执行目标方法；</li><li>@Before,@After,@AfterReturning,@AfterThrowing执行顺序执行过程</li></ol><p>···java<br>try {<br> try {</p><pre><code> doBefore();// @Before注解所修饰的方法 method.invoke();// 执行目标对象内的方法</code></pre><p> } finally {</p><pre><code> doAfter();// @After注解所修饰的方法</code></pre><p> }<br> doAfterReturning();// @AfterReturning注解所修饰的方法<br> } catch (Exception e) {</p><pre><code> doAfterThrowing();// @AfterThrowing注解所修饰的方法</code></pre><p>}</p></li></ol></blockquote></li><li><p>@Pointcut(“execution(int mul(int ,int))”)：进一步实现代码重用（注解属性的重用）空方法上加入pointcut注解即可，即在方法的注解属性中配置pointCut ()即可实现execution(int mul(int ,int)的功能。</p></li><li><p>@Around(“execution(public int com.jd.calculator.CalculatorService.*(..))”):环绕增强：目标方法执行前后都可以织入增强处理.</p><blockquote><p> 注：1. @Around修饰的方法必须声明ProceedingJoinPoint类型的参数，该变量可以决定是否执行目标方法；</p><ol start="2"><li>@Before、@After、@AfterRunning和@AfterThrowing修饰的方法没有返回值；而@Around修饰的方法必须有返回值，返回值为目标方法的返回值；</li></ol></blockquote></li></ol><h2 id="application-xml配置文件释义"><a href="#application-xml配置文件释义" class="headerlink" title="application.xml配置文件释义"></a>application.xml配置文件释义</h2><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.jd"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span></code></pre><blockquote><p>注：扫描com.jd包下的所有类，根据注解创建对象，放在IOC容器中。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy proxy<span class="token operator">-</span>target<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy<span class="token operator">></span></code></pre><blockquote><p> 配置自动代理，proxy-target-class=”false”：默认为false:即设置代理为jdk动态代理，若改为true，则  设置代理为cglib动态代理<br>Spring的jar包已经包括了cglib的asm和cglib的jar包，所以不需要引入这两个包即可使用cglib动态代理。</p></blockquote><h2 id="AOP-的执行流程"><a href="#AOP-的执行流程" class="headerlink" title="AOP 的执行流程"></a>AOP 的执行流程</h2><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy proxy<span class="token operator">-</span>target<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy<span class="token operator">></span></code></pre><p>在执行以上配置时：找到Aspect注解的类（CalculatorAspect）–&gt;找到类中注解的方法获取注解属性值（@Before(“execution(int mul(int ,int))”)）–&gt;扫描所有类及类中方法–&gt;找到符合注解属性的方法–&gt;为该方法的类设置动态代理</p><blockquote><p>注：1. 可有通过IOC容器获取该动态代理。applicationContext.getBean(ICalculatorService.class);<br>2. 获取动态代理类时传入ICalculatorService.class，而不是CalculatorService.class是因为AOP默认采用jdk的动态代理（采用的是继承机制），而目标类CalculatorService.class与jdk动态代理 类不满足继承关系。<br>3. 若配置文件中配置proxy-target-class=”true”，则获取动态代理类时传入ICalculatorService.class<br>或CalculatorService.class都可以，原因是该配置修改AOP的动态代理为cglib动态代理（采用继承机制），动态代理类与这两个类都存在继承关系。</p></blockquote><h2 id="通过xml文件配置AOP"><a href="#通过xml文件配置AOP" class="headerlink" title="通过xml文件配置AOP"></a>通过xml文件配置AOP</h2><p><strong>xml文件源码及配置释义如下：</strong></p><pre class=" language-javva"><code class="language-javva">   <context:component-scan base-package="com.jd"></context:component-scan>   <!--创建PalculatorAspect和CalculatorAspec的对象-->    <bean class="com.jd.calculator.imp.PalculatorAspect" id = "PalculatorAspect"></bean>    <bean class="com.jd.calculator.imp.CalculatorAspect" id = "CalculatorAspect"></bean>    <!--配置AOP,proxy-target-class="false“设置动态代理的方式”-->    <aop:config proxy-target-class="false">        <!--aspect ref="PalculatorAspect"设置Aspect注解类， order="2"设置优先级->        <aop:aspect ref="PalculatorAspect" order="2">            <!--pointcut="execution(int mul(int ,int))设置注解属性-->            <aop:before method="before" pointcut="execution(int mul(int ,int))"/>        </aop:aspect>        <aop:aspect ref="CalculatorAspect" order="1">            <aop:before method="before" pointcut="execution(int mul(int ,int))"/>        </aop:aspect>    </aop:config></code></pre><blockquote><p>PalculatorAspec和CalculatorAspec都对目标方法进行了前置加强</p></blockquote><h2 id="AOP中相关概念释义"><a href="#AOP中相关概念释义" class="headerlink" title="AOP中相关概念释义"></a>AOP中相关概念释义</h2><p><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190717122638133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="切入点通配符详解"><a href="#切入点通配符详解" class="headerlink" title="切入点通配符详解"></a>切入点通配符详解</h2><p>Spring AOP支持如下三种通配符：</p><ol><li><p><em>：匹配任何数量字符，用于参数列表表示参数可以是任意数据类型，但是必须有参数，例子：<br>java.</em>.Date——&gt;匹配java包的下一级子包中的任何Date类型；如匹配java.util.Date、java.sql.Date，但不匹配java.util.sql.Date；<br>java.lang.*e——&gt;匹配任何java.lang包下的以e结尾的类型，如匹配java.util.Hashtable、java.util.Date等等；</p></li><li><p>..：方法中表示任意数量参数，在包中表示当前包及其子包，例子：<br>java..*——&gt;匹配java包及其任何子包下的任何类型，如匹配java.lang.String、java.lang.annotation.Annotation等等；</p></li><li><p>+：匹配指定类型的子类型（不是子类）；仅能作为后缀放在类型模式后边，例子：<br>java.lang.Number+——&gt;匹配java.lang包下任何Number的子类型，如匹配java.lang.Integer、java.math.BigInteger等等；<br>java.util.List+——&gt;匹配java.util.List接口实现类，如匹配java.util.ArrayList，但不匹配java.util.HashMap</p></li></ol><blockquote><p>注：execution切入点表达式的语法：<br>语法：<br>execution([修饰符] 返回值类型 [包名.类名/接口名.]方法名([参数])[异常])，<br>说明：<br>a、该表达式用于指定匹配的方法；<br>b、修饰符包括访问权限和static、final以及synchronized；<br>c、红色中括号框起的部分可以省略。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过源码及代理动态类的源码来分析Java动态代理（jdk和cglib动态代理）</title>
      <link href="/posts/35819.html"/>
      <url>/posts/35819.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java动态代理的定义"><a href="#Java动态代理的定义" class="headerlink" title="Java动态代理的定义"></a>Java动态代理的定义</h1><ol><li><p>释义：简单的说Java的动态代理即为：代理对象 = 增强代码 + 目标对象（原对象）（类似实现了Python中装饰器的作用）</p></li><li><p>代理的意义：通过代理实现一系列相似操作，解决代码的臃肿问题（类似于现实生活中的中间商，为每一个买家收集好数据）</p></li><li><p>动态的释义：即该类是在代码执行过程中动态生成的class文件。</p></li><li><p>动态代理的优点：</p><ol><li>静态代理在程序执行前需手动创建代理类，如果需要很多代理类，每一个都手动创建不仅浪费时间，而且可能产生大量重复性代码，此时我们就可以采用动态代理。</li><li>动态代理通过InvocationHandler接口invoke方法或MethodInterceptor接口intercept方法为被代理对象中的方法增加额外功能，这种方式比静态代理中通过代理类逐一为被代理对象中的方法增加额外功能，更加的灵活。<h1 id="jdk动态代理"><a href="#jdk动态代理" class="headerlink" title="jdk动态代理"></a>jdk动态代理</h1><h2 id="建立示例工程如下"><a href="#建立示例工程如下" class="headerlink" title="建立示例工程如下"></a>建立示例工程如下</h2></li></ol></li><li><p>ICalculatorService接口文件源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICalculatorService</span> <span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>CalculatorService 类的源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorService</span> <span class="token keyword">implements</span> <span class="token class-name">ICalculatorService</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> result <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>     <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>测试类的源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">.</span>CalculatorService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">.</span>ICalculatorService<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//动态（程序运行时实现和目标类相同接口的java类）代理（）</span> CalculatorService calculatorService<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token function">Test</span><span class="token punctuation">(</span>CalculatorService calculatorService<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>calculatorService <span class="token operator">=</span> calculatorService<span class="token punctuation">;</span> <span class="token punctuation">}</span> InvocationHandler h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token annotation punctuation">@Override</span>     <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String name <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//method为m3为ICalculatorService接口中的add方法</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：The "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" method begins."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：Parameters of the "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" method： ["</span><span class="token operator">+</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>calculatorService<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用calculatorService目标类中的add方法</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：Result of the "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" method："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：The "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" method ends."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> result<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//Proxy是jvm自身实现的类，newProxyInstance是该类的一个静态方法，用来产生代理对象。</span>     <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>ICalculatorService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//产生一个动态class类，</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会生成动态代理类的class文件，通过反编译软件获取动态类的源码</span>     Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CalculatorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     ICalculatorService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>ICalculatorService<span class="token punctuation">)</span> test<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取代理对象</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> result <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-->"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>与分析有关的各种源码文件（以下的分析执行流程的依据，可在分析之后再来看）</p></li><li><p>动态代理类$Proxy的源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>proxy<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">.</span>ICalculatorService<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $Proxy0 <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">ICalculatorService</span><span class="token punctuation">{</span> <span class="token keyword">public</span> $<span class="token function">Proxy0</span><span class="token punctuation">(</span>InvocationHandler invocationhandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">super</span><span class="token punctuation">(</span>invocationhandler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">try</span>     <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m1<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>             obj         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">catch</span><span class="token punctuation">(</span>Error _ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token keyword">catch</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">final</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">try</span>     <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m2<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">catch</span><span class="token punctuation">(</span>Error _ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token keyword">catch</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">try</span>     <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>             Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">catch</span><span class="token punctuation">(</span>Error _ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token keyword">catch</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">try</span>     <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m0<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">catch</span><span class="token punctuation">(</span>Error _ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>     <span class="token keyword">catch</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">private</span> <span class="token keyword">static</span> Method m1<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> Method m2<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> Method m3<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">static</span> Method m0<span class="token punctuation">;</span> <span class="token keyword">static</span>  <span class="token punctuation">{</span>     <span class="token keyword">try</span>     <span class="token punctuation">{</span>         m1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"equals"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>             Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         m2 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         m3 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jd.calculator.ICalculatorService"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>             Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>TYPE         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         m0 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">catch</span><span class="token punctuation">(</span>NoSuchMethodException nosuchmethodexception<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchMethodError</span><span class="token punctuation">(</span>nosuchmethodexception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">catch</span><span class="token punctuation">(</span>ClassNotFoundException classnotfoundexception<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>classnotfoundexception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>代理类Proxy的部分源码</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructorParams <span class="token operator">=</span>        <span class="token punctuation">{</span> InvocationHandler<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span>                                          Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>                                          InvocationHandler h<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IllegalArgumentException    <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> intfs <span class="token operator">=</span> interfaces<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> SecurityManager sm <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkProxyAccess</span><span class="token punctuation">(</span>Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loader<span class="token punctuation">,</span> intfs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*         * Look up or generate the designated proxy class.         */</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cl <span class="token operator">=</span> <span class="token function">getProxyClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> intfs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * Invoke its constructor with the designated invocation handler.         */</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">checkNewProxyPermission</span><span class="token punctuation">(</span>Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cons <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>constructorParams<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> InvocationHandler ih <span class="token operator">=</span> h<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>Void<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">public</span> Void <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        cons<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>h<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span><span class="token operator">|</span>InstantiationException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Throwable t <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token punctuation">(</span>RuntimeException<span class="token punctuation">)</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="通过源码分析执行过程"><a href="#通过源码分析执行过程" class="headerlink" title="通过源码分析执行过程"></a>通过源码分析执行过程</h2><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>注：会生成动态代理类的class文件，通过反编译生成代理类的源码</p></blockquote><pre class=" language-java"><code class="language-java">Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CalculatorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>注：创建test对象</p></blockquote><pre class=" language-java"><code class="language-java">ICalculatorService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>ICalculatorService<span class="token punctuation">)</span> test<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>注：进入get（）方法</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>ICalculatorService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>注：Proxy是jvm自身实现的类，newProxyInstance是该类的一个静态方法，用来产生代理对象。<br>简单的说就是test类内自己定义的InvocationHandler匿名实现类来实例化Proxy类<br>第一个参数是类加载器（用来产生Proxy类）第二个是目标类实现的接口，第三个参数即为InvocationHandler匿名实现类，用来实例化Proxy类，具体实现过程请参考下面的源码解释</p></blockquote><p>newProxyInstance实现源码如下(有关分析参见注释）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">newProxyInstance</span><span class="token punctuation">(</span>ClassLoader loader<span class="token punctuation">,</span>                                          Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces<span class="token punctuation">,</span>                                          InvocationHandler h<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IllegalArgumentException    <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cl <span class="token operator">=</span> <span class="token function">getProxyClass0</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> intfs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取动态代理类$Proxy</span>            <span class="token keyword">final</span> Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cons <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>constructorParams<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取动态代理类$Proxy的构造方法</span>            <span class="token keyword">final</span> InvocationHandler ih <span class="token operator">=</span> h<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>Void<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">public</span> Void <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        cons<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>h<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//利用test类内自己定义的InvocationHandler匿名实现类来实例化$Proxy类</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InternalError</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>注：该部分代码为了更清晰的分析，省去了部分代码，全码请参考第一部分给出的代码<br>cons.newInstance(new Object[]{h})语句即调用动态代理类$Proxy的构造方法其源码如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> $<span class="token function">Proxy0</span><span class="token punctuation">(</span>InvocationHandler invocationhandler<span class="token punctuation">)</span>  <span class="token punctuation">{</span>       <span class="token keyword">super</span><span class="token punctuation">(</span>invocationhandler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//j将参数invocationhandler（自己定义的InvocationHandler匿名实现类）传递给父类Proxy，调用其构造方法获取实例对象</span>   <span class="token punctuation">}</span></code></pre><p>父类Proxy的构造方法实现如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token function">Proxy</span><span class="token punctuation">(</span>InvocationHandler h<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>h <span class="token operator">=</span> h<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> result <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>注：调用$proxy的add方法，进入add方法,add方法的相关源码如下(执行机理参考代码注释)：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $Proxy0 <span class="token keyword">extends</span> <span class="token class-name">Proxy</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        *由super(invocationhandler);知道super.h即为我们自己定义的invocationhandler内部类.        *this也为该内部类        *由m3 = Class.forName("com.jd.calculator.ICalculatorService").getMethod知m3为ICalculatorService的add方法        * 第三个参数为传入参数        */</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token keyword">super</span><span class="token punctuation">.</span>h<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> m3<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>                Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span>Error _ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span>Throwable throwable<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Method m3<span class="token punctuation">;</span>    <span class="token keyword">static</span>     <span class="token punctuation">{</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            m3 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jd.calculator.ICalculatorService"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>                Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>TYPE            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception classnotfoundexception<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoClassDefFoundError</span><span class="token punctuation">(</span>classnotfoundexception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注：由super.h.invoke(this, m3, new Object[] {Integer.valueOf(i), Integer.valueOf(j)}))进入test类中的匿名内部类InvocationHandler中的invoke方法，实现对add方法的修饰</p></blockquote><pre class=" language-java"><code class="language-java">Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>calculatorService<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>注：method为m3为ICalculatorService接口中的add方法，通过反射调用calculatorService目标类中的add方法。</p></blockquote><h2 id="工程的执行结果如下："><a href="#工程的执行结果如下：" class="headerlink" title="工程的执行结果如下："></a>工程的执行结果如下：</h2><p><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190715135703454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h1><h2 id="CGLib动态代理"><a href="#CGLib动态代理" class="headerlink" title="CGLib动态代理"></a>CGLib动态代理</h2><p>释义：程序执行时通过ASM（开源的Java字节码编辑库，操作字节码）jar包动态地为被代理类生成一个代理子类，通过该代理子类创建代理对象，由于存在继承关系，所以父类不能使用final修饰。</p><h2 id="工程代码如下："><a href="#工程代码如下：" class="headerlink" title="工程代码如下："></a>工程代码如下：</h2><p>在原工程上修改测试代码如下（解释见代码注释）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">.</span>CalculatorService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>calculator<span class="token punctuation">.</span>ICalculatorService<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>Callback<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>Enhancer<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>MethodProxy<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> Callback callback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*        *1. 匿名内部类用来实现对目标方法的包装        *2. 第一个参数是cglib动态代理类的示例对象        *3.第二个参数为public int com.jd.calculator.CalculatorService.add(int,int),即是目标方法        *4.第三个参数是方法实参        *5.第四个参数为动态代理方法        */</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>            String name <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：The "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" method begins."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：Parameters of the "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" method： ["</span><span class="token operator">+</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object result <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//动态代理方法调用动态代理类中的方法</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：Result of the "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" method："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：The "</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" method ends."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取asm包中的加强对象</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>CalculatorService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将目标类传给加强类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实现加强类对目标类的包装</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取cglib动态代理类</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ICalculatorService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>ICalculatorService<span class="token punctuation">)</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注：用cglib时需要引入asm-7.0.jar和cglib-3.2.10.jar的包<br>执行过程与原理与jdk的动态代理类似。<br>执行结果如下图</p></blockquote><p><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190715164209813.png" alt="执行结果"></p><h1 id="jdk与cglib动态代理的区别"><a href="#jdk与cglib动态代理的区别" class="headerlink" title="jdk与cglib动态代理的区别"></a>jdk与cglib动态代理的区别</h1><ol><li>JDK动态代理基于接口实现，所以实现JDK动态代理，必须先定义接口；CGLib动态代理基于类实现；</li><li>JDK动态代理机制是委托机制，委托hanlder调用原始实现类方法；CGLib则使用继承机制，被代理类和代理类是继承关系，所以代理类是可以赋值给被代理类的，如果被代理类有接口，那么代理类也可以赋值给接口。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk和cglib动态代理 </tag>
            
            <tag> 源码分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过程序学python入门（温度转换实例）</title>
      <link href="/posts/60020.html"/>
      <url>/posts/60020.html</url>
      
        <content type="html"><![CDATA[<p>通过Python实现华氏温度和摄氏温度的转换</p><a id="more"></a>  <pre class=" language-java"><code class="language-java"> TempStr <span class="token operator">=</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token string">"请输入带有符号的温度值: "</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> TempStr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> in <span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token operator">:</span>​     C <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">eval</span><span class="token punctuation">(</span>TempStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1.8</span>​       <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"转换后的温度是{:.2f}C"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span>  elif TempStr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> in <span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token operator">:</span>​      F <span class="token operator">=</span> <span class="token number">1.8</span><span class="token operator">*</span><span class="token function">eval</span><span class="token punctuation">(</span>TempStr<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32</span> ​      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"转化后的温度是{:.2f}F"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">else</span><span class="token operator">:</span>​      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"输入格式错误"</span><span class="token punctuation">)</span></code></pre><ol><li>第一句中的语法如下<pre><code>   #或“‘（三引号）为python中的注释内容，不进行编译</code></pre>2.第二句中的语法如下           <pre><code>变量的定义：python中无需变量声明，其通过input函数获得变量值，而变量名相当于指向该变量值的内存地址的指针input（）为基本输入函数，其引号内为提示语</code></pre>3.第三句中的语法如下<br>if的条件判断：<br>形式如下<br>if表达式：<br> （空格缩进） 代码块<pre><code>                如果表达式的结果为布尔真或非零，则执行代码块，否则不执行                另外，在python中，通过缩进（同一程序缩进必须相同）来确定语句的所属关系（而不是c语言中的{}）                python中有33个保留字（if，else，in，finally，import，as等）其所带语句后必有冒号                in表示所属关系的的判断 ：“对象  in【】”即为in前方内容是否属于其后【】                的内容                python中用【】表示一种数据结构即列表，其能储存任意多个不同类型的对象，多个元素之间用“，”分割。                索引：                正向递增排序：索引内容从0开始排序                反向递减排序：从最后元素开始从-1依次递减                seq[index]调动seq的第index个元素                TempStr[-1] 即表示TempStr的最后一个元素                切片                seq【m:n】即表示seq中的从m到n-1个元素                4.第四句中的语法如下                eval为保留字作用是将字符串的引号去掉，使其变为数据                5.第五句中的语法如下                printf（）为基本输出函数.format（）的参数为要输出的变量名                综述语法点：引号内（单引号或双引号)量会被当做字符串处理</code></pre></li></ol><p>```</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python入门 </tag>
            
            <tag> 温度转换实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>郑州大学安装锐捷实现校园网连接</title>
      <link href="/posts/25043.html"/>
      <url>/posts/25043.html</url>
      
        <content type="html"><![CDATA[<p>ubuntu通过锐捷连接校园网</p><a id="more"></a>  <p>第一步：关闭为wifi，打开网络设置（右上角找到网络标志右击），设置好静态ip和网关，dns<br>第二部：下载锐捷的linux版，（郑大的可以道网络管理中心下载），提取到当前文件夹（可以命令行解压或右击解压或提取）<br>第三步：<img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180812101225742?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述">右击在终端打开。<br>第四步（非常关键）：执行chmod  +x  rjsupplicant.sh （为该文件增加执行权限）<br>第五步：<img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180812102216935?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述">注：-u 后面是用户名 -d 后面加密码</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux入门 </tag>
            
            <tag> ｌinux通过锐捷连接校园网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql入门之修改数据的基本操作</title>
      <link href="/posts/49703.html"/>
      <url>/posts/49703.html</url>
      
        <content type="html"><![CDATA[<p>本文主要讲述了Mysql中的修改数据的的操作</p><a id="more"></a><h2 id="Mysql中的概念"><a href="#Mysql中的概念" class="headerlink" title="Mysql中的概念"></a>Mysql中的概念</h2><p>数据库表中数据进行的添加、删除和修改操作均属于数据库操纵语言（DML），这类类型的SQL语句需要执行commit数据控制语言（DCL）才能使之起作用，执行rollback数据控制语言（DCL）才能撤销DML语言操作，MySQL数据库执行DML后默认自动执行commit操作；</p><blockquote><p>注：可以通过set autocommmit=0;取消ＭｙＳＱＬ的自动提交，在语句后添加commit进行手动提交。</p></blockquote><pre class=" language-mysql"><code class="language-mysql">create table student(    id char(36) primary key,    name varchar(8) not null,    mobile char(11),    address varchar(150))set autocommit = 0;insert into student(id,name,mobile,address) values ('9b4435ec-372c-456a-b287-e3c5aa23dff4','Tom','12345678901','北京海淀');commit;</code></pre><h2 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="1. 添加数据"></a>1. 添加数据</h2><p>第一种方法：</p>]]></content>
      
      
      
        <tags>
            
            <tag> -Mysql修改数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql入门之简介</title>
      <link href="/posts/22376.html"/>
      <url>/posts/22376.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述Mysql入门中简介。</p><a id="more"></a><h4 id="1-数据库概述"><a href="#1-数据库概述" class="headerlink" title="1. 数据库概述"></a>1. 数据库概述</h4><ol><li>定义：数据库是存储数据的仓库，本质是一个文件系统，数据按照特定的格式将数据存储起来，用户通过SQL语句对数据库中数据进行增加、删除、修改和查询等操作。</li><li>数据库管理系统（DataBase Management System，简称DBMS）：一种操作盒管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问并管理数据库中表内的数据。</li><li>表（table）：数据库中最重要的对象，用于存储数据，由行（记录）和列（字段）组成。</li><li>常见的数据库<ol><li>MySQL：开源免费的数据库，小型数据库。MySQL已经被Oracle收购，从MySQL6.x开始不再免费；MySQL：开源免费的数据库，小型数据库。MySQL已经被Oracle收购，从MySQL6.x开始不再免费；<ol start="2"><li>Oracle：收费的大型数据库，Oracle公司的产品；</li><li>DB2：IBM公司的收费数据库产品，常应用在银行系统中；</li></ol></li><li>SQLServer：MicroSoft 公司收费的中型数据库，C#、.net等语言常使用；</li><li>SyBase：Sybase公司的高性能数据库，提供一个非常专业数据建模的工具PowerDesigner，已经淡出历史舞台；<ol start="5"><li>SQLite : 嵌入式的小型数据库，应用在手机端。</li></ol></li><li>Mysql数据库的管理工具<ol><li>SQLyog：一个快速而简洁的图形化管理MYSQL数据库的工具，由业界著名的Webyog公司出品；<ol start="2"><li>Navicat：一套快速、可靠并价格相宜的数据库管理工具，专为简化数据库的管理及降低系统管理成本而设；支持多达 7 种语言，被公认为全球最受欢迎的数据库管理工具；Navicat针对不同数据库管理系统又有对应的分支： Navicat Premium、Navicat for MySQL、Navicat for Oracle、Navicat for SQLite、Navicat for SQLServer、 Navicat for PostgreSQL等等，其中Navicat Premium 最为强大，支持连接MySQL、Oracle、PostgreSQL、SQLite 及 SQL Server等数据库。<h4 id="2-SQL语句"><a href="#2-SQL语句" class="headerlink" title="2.SQL语句"></a>2.SQL语句</h4></li></ol></li></ol></li><li>按功能分类：<ol><li>数据定义语言（DDL Data Definition Language） ：创建、修改或删除数据库中表、视图、索引等对象的操作，常用命令为create、alter和drop；</li><li>数据查询语言（DQL Data Query Language） ：按照指定的组合、条件表达式或排序检索已存在的数据库中数据，不改变数据库中数据，常用命令为select；</li><li>数据操纵语言（DML Data Manipulation Language） ：向表中添加、删除、修改数据操作，常用命令有insert、update和delete；</li><li>数据控制语言（DCL Data Control Language） ：用来授予或收回访问数据库的某种特权、控制数据操纵事务的发生时间及效果、对数据库进行监视等操作，常用命令有GRANT、REVOKE、COMMIT、ROLLBACK；<blockquote><p>注：</p><ol><li>SQL语句可以单行书写，也可以多行书写，以分号结尾；</li><li>SQL语句通常使用空格和缩进增强语句的可读性；</li><li>SQL语句不区分大小写，建议关键字大写，例如：SELECT * FROM user；</li><li>SQL语句使用/**/或#进行注释；</li></ol></blockquote><h4 id="3-数据库操作"><a href="#3-数据库操作" class="headerlink" title="3. 数据库操作"></a>3. 数据库操作</h4></li></ol></li></ol></li><li>创建数据库：create database 数据库名 [ character set 字符集 ] ;</li><li>查看MySQL数据库管理系统中所有数据库:show databases;查看某个数据库的定义信息:show create database 数据库名，例子：show create database keeper;</li><li>drop database 数据库名称;<br>例子：drop database keeper。</li><li>修改数据库编码：alter database 数据库名 character set 编码;<pre><code>例如：alter database test character set utf8;</code></pre></li><li>切换数据库：use 数据库名;<br>例如：use venus;</li><li>查看正在使用的数据库:select database();</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> -Mysql入门 －简介 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18们注意啦！！控制组考核题新鲜出炉了</title>
      <link href="/posts/62897.html"/>
      <url>/posts/62897.html</url>
      
        <content type="html"><![CDATA[<h2 id="小18，注意啦！双足实验室控制组的大门向你们打开了……"><a href="#小18，注意啦！双足实验室控制组的大门向你们打开了……" class="headerlink" title="小18，注意啦！双足实验室控制组的大门向你们打开了……"></a>小18，注意啦！双足实验室控制组的大门向你们打开了……</h2><p>  学长有云：学习使我快乐，既然你们已经快乐了那么久了，是不是应该热热身了…<br>  <a id="more"></a></p><p>  我们这些老学长，小学姐，呕尽心血，绞尽脑汁为你们准备了超丰富的大礼包…</p><p>  嘿嘿，我们老一辈的都知道18们是妖孽一样的存在…</p><p>  好的，言归正传。对控制组感兴趣并且已经着手学习一段时间的学弟学妹来秀学长学姐一脸吧！</p><p>  在这里，学长学姐为你双手奉上考核题的超值豪华套餐</p><p>这是考核题目的压缩包下载链接地址：<a href="https://pan.shuangzu.top/index.php?share/file&amp;user=1&amp;sid=jTAKYhpI" target="_blank" rel="noopener">https://pan.shuangzu.top/index.php?share/file&amp;user=1&amp;sid=jTAKYhpI</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 双足实验室 </tag>
            
            <tag> １８控制组考核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM中堆的简介</title>
      <link href="/posts/17343.html"/>
      <url>/posts/17343.html</url>
      
        <content type="html"><![CDATA[<h2 id="一：基本概念"><a href="#一：基本概念" class="headerlink" title="一：基本概念"></a>一：基本概念</h2><p>Java 中的堆是 JVM 管理的最大的一块内存空间，主要用于存放Java类的实例对象，其被划分为两个不同的区域：新生代 ( Young )和老年代 ( Old )，其中新生代 ( Young )又被划分为：Eden、From Survivor和To Survivor三个区域，如下图所示：<br>jdk7及以前版本<br><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190715180836.png" alt=""><br>jdk8及以后版本<br><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190715181003.png" alt=""></p><h2 id="二：堆的各个区域"><a href="#二：堆的各个区域" class="headerlink" title="二：堆的各个区域"></a>二：堆的各个区域</h2><ol><li><p>堆大小 = 新生代( Young )  + 老年代( Old )，其可以通过参数 –Xms、-Xmx 来指定：–Xms用于设置初始分配大小，默认为物理内存的1/16；-Xmx用于设置最大分配内存，默认为物理内存的1/4。默认情况下，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小，老年代 ( Old ) = 2/3 的堆空间大小，如下代码：<br>代码实例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//-Xms1024m -Xmx1024m -XX:+PrintGCDetails</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> Systerm<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello jvm"</span><span class="token punctuation">)</span>；<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>jdk8中的运行结果：</p><pre class=" language-java"><code class="language-java">hello jvmHeapPSYoungGen      total 305664K<span class="token punctuation">,</span> used 10486K <span class="token punctuation">[</span><span class="token number">0x00000000eab00000</span><span class="token punctuation">,</span> <span class="token number">0x0000000100000000</span><span class="token punctuation">,</span> <span class="token number">0x0000000100000000</span><span class="token punctuation">)</span>eden space 262144K<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000eab00000</span><span class="token punctuation">,</span><span class="token number">0x00000000eb53d888</span><span class="token punctuation">,</span><span class="token number">0x00000000fab00000</span><span class="token punctuation">)</span>from space 43520K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000fd580000</span><span class="token punctuation">,</span><span class="token number">0x00000000fd580000</span><span class="token punctuation">,</span><span class="token number">0x0000000100000000</span><span class="token punctuation">)</span>to   space 43520K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000fab00000</span><span class="token punctuation">,</span><span class="token number">0x00000000fab00000</span><span class="token punctuation">,</span><span class="token number">0x00000000fd580000</span><span class="token punctuation">)</span>ParOldGen       total 699392K<span class="token punctuation">,</span> used 0K <span class="token punctuation">[</span><span class="token number">0x00000000c0000000</span><span class="token punctuation">,</span> <span class="token number">0x00000000eab00000</span><span class="token punctuation">,</span> <span class="token number">0x00000000eab00000</span><span class="token punctuation">)</span>object space 699392K<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">%</span> used <span class="token punctuation">[</span><span class="token number">0x00000000c0000000</span><span class="token punctuation">,</span><span class="token number">0x00000000c0000000</span><span class="token punctuation">,</span><span class="token number">0x00000000eab00000</span><span class="token punctuation">)</span>Metaspace       used 2481K<span class="token punctuation">,</span> capacity 4486K<span class="token punctuation">,</span> committed 4864K<span class="token punctuation">,</span> reserved 1056768K<span class="token keyword">class</span> <span class="token class-name">space</span>    used 265K<span class="token punctuation">,</span> capacity 386K<span class="token punctuation">,</span> committed 512K<span class="token punctuation">,</span> reserved 1048576K</code></pre></li><li><p>新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，为了便于区分，两个 Survivor 区域分别被命名为 from 和 to。默认情况下，Eden : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。JVM 每次只使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的，因此，新生代实际可用的内存空间为 9/10 ( 即90% )的新生代空间。</p></li><li><p>工作原理：</p><ol><li>Eden区为Java对象分配堆内存，当 Eden 区没有足够空间分配时，JVM发起一次Minor GC，将Eden区仍然存活的对象放入Survivor from区，并清空 Eden 区；</li><li>Eden区被清空后，继续为新的Java对象分配堆内存；</li><li>当Eden区再次没有足够空间分配时，JVM对Eden区和Survivor from区同时发起一次 Minor GC，把存活对象放入Survivor to区，同时清空Eden 区和Survivor from区；</li><li>Eden区继续为新的Java对象分配堆内存，并重复上述过程：Eden区没有足够空间分配时，把Eden区和某个Survivor区的存活对象放到另一个Survivor区；</li><li>JVM给每个对象设置了一个对象年龄（Age）计数器，每熬过一场Minor GC，对象年龄增加1岁，当它的年龄增加到阈值（默认为15，可以通过-XX：MaxTenuringThreshold 参数自定义该阀值），将被“晋升”到老年代，当 Old 区也被填满时，JVM发起一次 Major GC，对 Old 区进行垃圾回收。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM中的堆 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrapt的简单入门</title>
      <link href="/posts/7185.html"/>
      <url>/posts/7185.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>注： 本篇博客不为本人所写，乃是借用了一套资源的笔记，只要是为了自己回顾记忆所用，顺便在这贴一下这套资源的<a href="https://www.bilibili.com/video/av47886776/?p=192" target="_blank" rel="noopener">链接</a></p></blockquote><h2 id="Bootstrap："><a href="#Bootstrap：" class="headerlink" title="Bootstrap："></a>Bootstrap：</h2><pre><code>1. 概念： 一个前端开发的框架，Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。    * 框架:一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。    * 好处：        1. 定义了很多的css样式和js插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。        2. 响应式布局。            * 同一套页面可以兼容不同分辨率的设备。2. 快速入门    1. 下载Bootstrap    2. 在项目中将这三个文件夹复制    3. 创建html页面，引入必要的资源文件    &lt;!DOCTYPE html&gt;    &lt;html lang=&quot;zh-CN&quot;&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot;&gt;        &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;        &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;        &lt;title&gt;Bootstrap HelloWorld&lt;/title&gt;        &lt;!-- Bootstrap --&gt;        &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;        &lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;        &lt;script src=&quot;js/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;        &lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;        &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;    &lt;/head&gt;    &lt;body&gt;    &lt;h1&gt;你好，世界！&lt;/h1&gt;    &lt;/body&gt;    &lt;/html&gt;</code></pre><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><pre><code>* 同一套页面可以兼容不同分辨率的设备。* 实现：依赖于栅格系统：将一行平均分成12个格子，可以指定元素占几个格子* 步骤：    1. 定义容器。相当于之前的table、        * 容器分类：            1. container：两边留白            2. container-fluid：每一种设备都是100%宽度    2. 定义行。相当于之前的tr   样式：row    3. 定义元素。指定该元素在不同的设备上，所占的格子数目。样式：col-设备代号-格子数目        * 设备代号：            1. xs：超小屏幕 手机 (&lt;768px)：col-xs-12            2. sm：小屏幕 平板 (≥768px)            3. md：中等屏幕 桌面显示器 (≥992px)            4. lg：大屏幕 大桌面显示器 (≥1200px)    * 注意：        1. 一行中如果格子数目超过12，则超出部分自动换行。        2. 栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。        3. 如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行。</code></pre><h2 id="CSS样式和JS插件"><a href="#CSS样式和JS插件" class="headerlink" title="CSS样式和JS插件"></a>CSS样式和JS插件</h2><pre><code>1. 全局CSS样式：    * 按钮：class=&quot;btn btn-default&quot;    * 图片：        *  class=&quot;img-responsive&quot;：图片在任意尺寸都占100%        *  图片形状            *  &lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-rounded&quot;&gt;：方形            *  &lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-circle&quot;&gt; ： 圆形            *  &lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-thumbnail&quot;&gt; ：相框    * 表格        * table        * table-bordered        * table-hover    * 表单        * 给表单项添加：class=&quot;form-control&quot; 2. 组件：    * 导航条    * 分页条3. 插件：    * 轮播图</code></pre><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;    &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;    &lt;title&gt;Bootstrap HelloWorld&lt;/title&gt;    &lt;!-- Bootstrap --&gt;    &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;    &lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;    &lt;script src=&quot;js/jquery-3.2.1.min.js&quot;&gt;&lt;/script&gt;    &lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;    &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;    &lt;style&gt;        .paddtop{            padding-top: 10px;        }        .search-btn{            float: left;            border:1px solid #ffc900;            width: 90px;            height: 35px;            background-color:#ffc900 ;            text-align: center;            line-height: 35px;            margin-top: 15px;        }        .search-input{            float: left;            border:2px solid #ffc900;            width: 400px;            height: 35px;            padding-left: 5px;            margin-top: 15px;        }        .jx{            border-bottom: 2px solid #ffc900;            padding: 5px;        }        .company{            height: 40px;            background-color: #ffc900;            text-align: center;            line-height:40px ;            font-size: 8px;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;   &lt;!-- 1.页眉部分--&gt;   &lt;header class=&quot;container-fluid&quot;&gt;       &lt;div class=&quot;row&quot;&gt;           &lt;img src=&quot;img/top_banner.jpg&quot; class=&quot;img-responsive&quot;&gt;       &lt;/div&gt;       &lt;div class=&quot;row paddtop&quot;&gt;           &lt;div class=&quot;col-md-3&quot;&gt;               &lt;img src=&quot;img/logo.jpg&quot; class=&quot;img-responsive&quot;&gt;           &lt;/div&gt;           &lt;div class=&quot;col-md-5&quot;&gt;               &lt;input class=&quot;search-input&quot; placeholder=&quot;请输入线路名称&quot;&gt;               &lt;a class=&quot;search-btn&quot; href=&quot;#&quot;&gt;搜索&lt;/a&gt;           &lt;/div&gt;           &lt;div class=&quot;col-md-4&quot;&gt;               &lt;img src=&quot;img/hotel_tel.png&quot; class=&quot;img-responsive&quot;&gt;           &lt;/div&gt;       &lt;/div&gt;       &lt;!--导航栏--&gt;       &lt;div class=&quot;row&quot;&gt;           &lt;nav class=&quot;navbar navbar-default&quot;&gt;               &lt;div class=&quot;container-fluid&quot;&gt;                   &lt;!-- Brand and toggle get grouped for better mobile display --&gt;                   &lt;div class=&quot;navbar-header&quot;&gt;                       &lt;!-- 定义汉堡按钮 --&gt;                       &lt;button type=&quot;button&quot; class=&quot;navbar-toggle collapsed&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#bs-example-navbar-collapse-1&quot; aria-expanded=&quot;false&quot;&gt;                           &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;                           &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;                           &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;                           &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;                       &lt;/button&gt;                       &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;首页&lt;/a&gt;                   &lt;/div&gt;                   &lt;!-- Collect the nav links, forms, and other content for toggling --&gt;                   &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;bs-example-navbar-collapse-1&quot;&gt;                       &lt;ul class=&quot;nav navbar-nav&quot;&gt;                           &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;Link &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;                           &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;                           &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;                           &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;                           &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;                           &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;                       &lt;/ul&gt;                   &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt;               &lt;/div&gt;&lt;!-- /.container-fluid --&gt;           &lt;/nav&gt;       &lt;/div&gt;       &lt;!--轮播图--&gt;       &lt;div class=&quot;row&quot;&gt;           &lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt;               &lt;!-- Indicators --&gt;               &lt;ol class=&quot;carousel-indicators&quot;&gt;                   &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;                   &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;                   &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;               &lt;/ol&gt;               &lt;!-- Wrapper for slides --&gt;               &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;                   &lt;div class=&quot;item active&quot;&gt;                       &lt;img src=&quot;img/banner_1.jpg&quot; alt=&quot;...&quot;&gt;                   &lt;/div&gt;                   &lt;div class=&quot;item&quot;&gt;                       &lt;img src=&quot;img/banner_2.jpg&quot; alt=&quot;...&quot;&gt;                   &lt;/div&gt;                   &lt;div class=&quot;item&quot;&gt;                       &lt;img src=&quot;img/banner_3.jpg&quot; alt=&quot;...&quot;&gt;                   &lt;/div&gt;               &lt;/div&gt;               &lt;!-- Controls --&gt;               &lt;a class=&quot;left carousel-control&quot; href=&quot;#carousel-example-generic&quot; role=&quot;button&quot; data-slide=&quot;prev&quot;&gt;                   &lt;span class=&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;                   &lt;span class=&quot;sr-only&quot;&gt;Previous&lt;/span&gt;               &lt;/a&gt;               &lt;a class=&quot;right carousel-control&quot; href=&quot;#carousel-example-generic&quot; role=&quot;button&quot; data-slide=&quot;next&quot;&gt;                   &lt;span class=&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;                   &lt;span class=&quot;sr-only&quot;&gt;Next&lt;/span&gt;               &lt;/a&gt;           &lt;/div&gt;       &lt;/div&gt;   &lt;/header&gt;   &lt;!-- 2.主体部分--&gt;   &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row jx&quot;&gt;            &lt;img src=&quot;img/icon_5.jpg&quot;&gt;            &lt;span&gt;黑马精选&lt;/span&gt;        &lt;/div&gt;       &lt;div class=&quot;row paddtop&quot;&gt;           &lt;div class=&quot;col-md-3&quot;&gt;                &lt;div class=&quot;thumbnail&quot;&gt;                    &lt;img src=&quot;img/jiangxuan_3.jpg&quot; alt=&quot;&quot;&gt;                    &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;                    &lt;font color=&quot;red&quot;&gt;&amp;yen; 699&lt;/font&gt;                &lt;/div&gt;           &lt;/div&gt;           &lt;div class=&quot;col-md-3&quot;&gt;               &lt;div class=&quot;thumbnail&quot;&gt;                   &lt;img src=&quot;img/jiangxuan_3.jpg&quot; alt=&quot;&quot;&gt;                   &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;                   &lt;font color=&quot;red&quot;&gt;&amp;yen; 699&lt;/font&gt;               &lt;/div&gt;           &lt;/div&gt;           &lt;div class=&quot;col-md-3&quot;&gt;               &lt;div class=&quot;thumbnail&quot;&gt;                   &lt;img src=&quot;img/jiangxuan_3.jpg&quot; alt=&quot;&quot;&gt;                   &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;                   &lt;font color=&quot;red&quot;&gt;&amp;yen; 699&lt;/font&gt;               &lt;/div&gt;           &lt;/div&gt;           &lt;div class=&quot;col-md-3&quot;&gt;               &lt;div class=&quot;thumbnail&quot;&gt;                   &lt;img src=&quot;img/jiangxuan_3.jpg&quot; alt=&quot;&quot;&gt;                   &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;                   &lt;font color=&quot;red&quot;&gt;&amp;yen; 699&lt;/font&gt;               &lt;/div&gt;           &lt;/div&gt;       &lt;/div&gt;       &lt;div class=&quot;row jx&quot;&gt;           &lt;img src=&quot;img/icon_6.jpg&quot;&gt;           &lt;span&gt;国内游&lt;/span&gt;       &lt;/div&gt;       &lt;div class=&quot;row paddtop&quot;&gt;           &lt;div class=&quot;col-md-4&quot;&gt;               &lt;img src=&quot;img/guonei_1.jpg&quot;&gt;           &lt;/div&gt;           &lt;div class=&quot;col-md-8&quot;&gt;               &lt;div class=&quot;row&quot;&gt;                   &lt;div class=&quot;col-md-4&quot;&gt;                       &lt;div class=&quot;thumbnail&quot;&gt;                           &lt;img src=&quot;img/jiangxuan_3.jpg&quot; alt=&quot;&quot;&gt;                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;                           &lt;font color=&quot;red&quot;&gt;&amp;yen; 699&lt;/font&gt;                       &lt;/div&gt;                   &lt;/div&gt;                   &lt;div class=&quot;col-md-4&quot;&gt;                       &lt;div class=&quot;thumbnail&quot;&gt;                           &lt;img src=&quot;img/jiangxuan_3.jpg&quot; alt=&quot;&quot;&gt;                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;                           &lt;font color=&quot;red&quot;&gt;&amp;yen; 699&lt;/font&gt;                       &lt;/div&gt;                   &lt;/div&gt;                   &lt;div class=&quot;col-md-4&quot;&gt;                       &lt;div class=&quot;thumbnail&quot;&gt;                           &lt;img src=&quot;img/jiangxuan_3.jpg&quot; alt=&quot;&quot;&gt;                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;                           &lt;font color=&quot;red&quot;&gt;&amp;yen; 699&lt;/font&gt;                       &lt;/div&gt;                   &lt;/div&gt;               &lt;/div&gt;               &lt;div class=&quot;row&quot;&gt;                   &lt;div class=&quot;col-md-4&quot;&gt;                       &lt;div class=&quot;thumbnail&quot;&gt;                           &lt;img src=&quot;img/jiangxuan_3.jpg&quot; alt=&quot;&quot;&gt;                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;                           &lt;font color=&quot;red&quot;&gt;&amp;yen; 699&lt;/font&gt;                       &lt;/div&gt;                   &lt;/div&gt;                   &lt;div class=&quot;col-md-4&quot;&gt;                       &lt;div class=&quot;thumbnail&quot;&gt;                           &lt;img src=&quot;img/jiangxuan_3.jpg&quot; alt=&quot;&quot;&gt;                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;                           &lt;font color=&quot;red&quot;&gt;&amp;yen; 699&lt;/font&gt;                       &lt;/div&gt;                   &lt;/div&gt;                   &lt;div class=&quot;col-md-4&quot;&gt;                       &lt;div class=&quot;thumbnail&quot;&gt;                           &lt;img src=&quot;img/jiangxuan_3.jpg&quot; alt=&quot;&quot;&gt;                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子/蜜月/休闲游首选+豪华酒店任选+接送机)&lt;/p&gt;                           &lt;font color=&quot;red&quot;&gt;&amp;yen; 699&lt;/font&gt;                       &lt;/div&gt;                   &lt;/div&gt;               &lt;/div&gt;           &lt;/div&gt;       &lt;/div&gt;   &lt;/div&gt;   &lt;!-- 3.页脚部分--&gt;   &lt;footer class=&quot;container-fluid&quot;&gt;       &lt;div class=&quot;row&quot;&gt;           &lt;img src=&quot;img/footer_service.png&quot; class=&quot;img-responsive&quot;&gt;       &lt;/div&gt;       &lt;div class=&quot;row company&quot;&gt;           江苏传智播客教育科技股份有限公司 版权所有Copyright 2006-2018, All Rights Reserved 苏ICP备16007882       &lt;/div&gt;   &lt;/footer&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Bootstrapt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrapt入门 </tag>
            
            <tag> 轮播图，导航条，按钮，表格，表单，分页 </tag>
            
            <tag> 响应式布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA初体验之常用设置配置</title>
      <link href="/posts/6492.html"/>
      <url>/posts/6492.html</url>
      
        <content type="html"><![CDATA[<h2 id="IDEA的高效率的配置"><a href="#IDEA的高效率的配置" class="headerlink" title="IDEA的高效率的配置"></a>IDEA的高效率的配置</h2><h3 id="1-代码提示不区分大小写"><a href="#1-代码提示不区分大小写" class="headerlink" title="1. 代码提示不区分大小写"></a>1. 代码提示不区分大小写</h3><p>代码提示是一个很重要的功能, 如果没有此功能一些较长的方法名, 类等, 很难记住. IDEA 代码提示功能很棒, 但是默认是区分大小写的, 我们记不清一些东西是大写还是小写, 这就比较尴尬了. 所以我们要把这个区分去掉, 设置如下:<br>将match case的取消掉即可<br><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190726095337.png" alt="配置"></p><h3 id="2-开启自动import包的功能"><a href="#2-开启自动import包的功能" class="headerlink" title="2. 开启自动import包的功能"></a>2. 开启自动import包的功能</h3><p>Java 就是这种包组合在一个的一个东西, 我们在写代码时常常需要引入一些类, 一些第三方的包. 在 eclipse 时我们使用快捷键引入, IDEA 也可以使用 Alt + Enter 进行导入包.</p><p>如果我们在写代码时IDE自动帮我们引入相关的包, 是不是很酷的一件事情. IDEA 提供了这个功能, 不过默认是关闭的. 打开自动导入包设置如下:<br><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190726095657.png" alt="配置"></p><h3 id="3-改动过的文件显示-号"><a href="#3-改动过的文件显示-号" class="headerlink" title="3. 改动过的文件显示*号"></a>3. 改动过的文件显示*号</h3><p>如果想让修改时，在文件右边显示*号标志，Settings -&gt; Editor –&gt; General -&gt;Editor Tabs</p><p>选中“Mark modifyied tabs with asterisk”<br><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190726095929.png" alt="图片"></p><h3 id="4-设置字体"><a href="#4-设置字体" class="headerlink" title="4. 设置字体"></a>4. 设置字体</h3><p>在2017版，IDEA已经可以直接修改字体了，不必像之前的版本需要先另存。<br><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190726100137.png" alt="设置字体"></p><h3 id="5-让IntelliJ-IDEA启动时不打开工程文件"><a href="#5-让IntelliJ-IDEA启动时不打开工程文件" class="headerlink" title="5. 让IntelliJ IDEA启动时不打开工程文件"></a>5. 让IntelliJ IDEA启动时不打开工程文件</h3><p>Settings -&gt; Appearance&amp;Behavior -&gt; System Settings标签项里去掉Reopen last project on startup即可<br><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190726100254.png" alt="设置工程"> </p><h3 id="6-快捷键提示插件"><a href="#6-快捷键提示插件" class="headerlink" title="6.快捷键提示插件"></a>6.快捷键提示插件</h3><p>Key Promoter X 是一个提示插件，当你在IDEA里面使用鼠标的时候，如果这个鼠标操作是能够用快捷键替代的，那么Key Promoter X会弹出一个提示框，告知你这个鼠标操作可以用什么快捷键替代。对于想完全使用快捷键在IDEA的，这个插件就很有用。</p><p>安装这个插件很简单，只需要打开Settings,然后找到Plugins那一栏目,然后输入key promoter,如果找不到，就直接到仓库里找即可。如下图：</p><p><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190726100421.png" alt="图片"></p><blockquote><p>注：安装完插件后重启IDEA即可。如果无法安装这个插件的话，那么你可以到如下网站下载下来，然后使用Install plugins from disk的方式安装。 <a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x" target="_blank" rel="noopener">https://plugins.jetbrains.com/plugin/9792-key-promoter-x</a></p></blockquote><h3 id="7-IDEA设置编辑器背景图片"><a href="#7-IDEA设置编辑器背景图片" class="headerlink" title="7. IDEA设置编辑器背景图片"></a>7. IDEA设置编辑器背景图片</h3><p>先贴一个我的编辑环境<br><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190726100809.png" alt="编辑环境"></p><p>设置过程如下：<br>使用快捷键Ctrl+Shift+A（或者快捷键Shirt+Ctrl+A），输入set关键字就可以看到Set Background Image选项。双击进入设置页面，选择好图片，设置号透明度即可。<br><img src="/medias/loading.gif" data-original="https://raw.githubusercontent.com/Laicize/wenke_images/master/img/20190726101221.png" alt="过程如下"></p>]]></content>
      
      
      <categories>
          
          <category> IDEA工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA初体验 </tag>
            
            <tag> IDEA的基本配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存监管工具之jmap使用详解</title>
      <link href="/posts/31366.html"/>
      <url>/posts/31366.html</url>
      
        <content type="html"><![CDATA[<h1 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h1><ol><li><p>作用：监控内存的java对象。</p></li><li><p>语法：jmap [option] <pid></p></li><li><p>说明： option：命令选项，常用选项如下：<br> -heap 打印Java堆概要信息，包括使用的GC算法、堆配置参数和各代中堆内存使用情况；<br> -histo[:live] 打印Java堆中对象直方图，通过该图可以获取每个class的对象数目，占用内存大小和类全名信息，带上:live，则只统计活着的对象</p></li><li><p>举例如下：<br>jmap -histo 5352</p><blockquote><p>注：1.  该命令令是在cmd窗口中执行的（Linux下是在终端中执行）</p><ol start="2"><li>可以通过jps命令获取java相关进程id（进程id是操作系统管理进程的唯一标识）</li><li>相关jps的命令参数可以通过jps -help命令获取说明</li></ol></blockquote></li></ol><p>结果如下：<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190721172936427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>class name列出现了[C、[B、[L等很奇怪的内容，这些属于非自定义类，具体为：<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190721173007526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> -permstat： 打印永久代统计信息<br> -finalizerinfo：打印等待回收的对象信息，如下命令：jmap -finalizerinfo 5352<br>结果如下<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190721173552158.png" alt="在这里插入图片描述">        </p><blockquote><p>说明：Number of objects pending for finalization: 0 说明当前F-QUEUE队列中并没有等待Fializer线程执行finalizer方法的对象。</p></blockquote><p>-dump:<dump-options> 以hprof二进制格式将Java堆信息输出到文件内，该文件可以用MAT、VisualVM或jhat等工具查看；<br>    dump-options选项:<br>        1.  live 只输出活着的对象;不指定，则输出堆中所有对象<br>        2.  format=b 指定输出格式为二进制<br>       3.   file=<file> 指定文件名及文件存储位置，例如：jmap -dump:live,format=b,file=D:\heap.bin <pid><br>  -F 与-dump:<dump-options> <pid>或-histo<pid>一起使用，当<pid>没有响应时，强制执行；注意：不支持live子选项</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM的性能调优 </tag>
            
            <tag> jmap的使用详解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript入门之五种对象的构建</title>
      <link href="/posts/42093.html"/>
      <url>/posts/42093.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Javascript中的五种对象的创建的知识点</p><a id="more"></a><p>一：直接构造法</p><pre class=" language-java"><code class="language-java">var student<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span>（）<span class="token punctuation">;</span>studnet<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"张三"</span>；student<span class="token punctuation">.</span>dohomework<span class="token operator">=</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"正在写作业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用</span>student<span class="token punctuation">.</span><span class="token function">dohomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注：this可以代指对象<br>二 ：对象初始化器方法</p><pre class=" language-java"><code class="language-java">var student<span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">"张胜男"</span><span class="token punctuation">,</span>    play<span class="token operator">:</span>function（）<span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"正在玩耍"</span><span class="token punctuation">)</span>；    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用</span>studnet<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注：1属性，方法之间用’,’隔开，最后一个属性或方法不需要’,’<br>2属性名：属性值<br>三：prototype原型方式</p><pre class=" language-java"><code class="language-java">function <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name<span class="token operator">=</span>“尼采”<span class="token punctuation">;</span>Student<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sleep<span class="token operator">=</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"正在睡觉"</span><span class="token punctuation">)</span>；<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用</span>var student<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；student<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注：优点：对象方法与构造函数分开，清晰明了。缺点：属性值不能改动。<br>四：构造函数法</p><pre class=" language-java"><code class="language-java">function <span class="token function">Student</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name；    <span class="token keyword">this</span><span class="token punctuation">.</span>eat<span class="token operator">=</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"正在吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用</span>var studnet<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Studnet</span><span class="token punctuation">(</span><span class="token string">"王二"</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//在创建对象时进行参数传递</span>studnet<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优点：易于改变属性值。缺点：对象方法与构造函数混在一起。<br>五：混合法</p><pre class=" language-java"><code class="language-java">function <span class="token function">Studnet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span>Studnet<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"正在哭"</span><span class="token punctuation">)</span>；<span class="token punctuation">}</span>；<span class="token comment" spellcheck="true">//调用</span>var studnet<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span>student<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span>；</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 对象的构建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript入门之基础知识（一）</title>
      <link href="/posts/26879.html"/>
      <url>/posts/26879.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Javascript中的基本知识点</p><a id="more"></a><p>一 变量<br>1 通常用var 代表变量类型，eg：var names=“王大兵”<br>2 变量分为字符串，整型，浮点数等<br>3 数组：（1） eg var names=【“王”，“大”，“兵”】注：数组采用中括号<br>​            （2） eg：var names=new Array（）；<br>​                            names【0】=“王”；names【1】=“大”；names【2】=“兵”；<br>4 特殊情况：var gao=null;<br>console.log(gao);注：undefine声明变量，但没有赋值，不声明，是not define，也可以声明并赋值null。<br>5 对象：大括号表范围，属性名：属性值  ，调用：对象名.属性名</p><pre class=" language-java"><code class="language-java">eg：var computer<span class="token operator">=</span><span class="token punctuation">{</span>            brand<span class="token operator">:</span><span class="token string">"dell"</span><span class="token punctuation">,</span>            neicun<span class="token operator">:</span><span class="token string">"8GB"</span><span class="token punctuation">,</span>            cpu<span class="token operator">:</span><span class="token string">"inter"</span><span class="token punctuation">,</span>            daxiao<span class="token operator">:</span><span class="token number">15.3</span>        <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span>neicun<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>computer<span class="token punctuation">[</span><span class="token string">"daxiao"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>computer<span class="token punctuation">.</span>daxiao<span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><p>二：运算符<br>1 算术运算和逻辑运算<br>“==”与“===”的区别：<br>“==”只强调内容相等，不考虑数据类型<br>“===”数值和数据类型皆相等</p><pre class=" language-java"><code class="language-java">eg：var a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>var b<span class="token operator">=</span><span class="token string">"1"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token operator">=</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><p>2 “&amp;&amp;”和“||”运算的短路现象<br>eg：//短路现象&amp;&amp;出现一个false既不在运算，||出现一个ture既不在运算</p><pre class=" language-java"><code class="language-java">var a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>var b<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span><span class="token punctuation">(</span>b<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    </code></pre><p>三选择结构</p><pre class=" language-java"><code class="language-java">    eg：（<span class="token number">1</span>）<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">&lt;</span>time<span class="token operator">&amp;&amp;</span>time<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">)</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"早晨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">&lt;</span>time<span class="token operator">&amp;&amp;</span>time<span class="token operator">&lt;=</span><span class="token number">11</span><span class="token punctuation">)</span>注：表达式不能有<span class="token number">0</span><span class="token operator">&lt;</span>time<span class="token operator">&lt;</span><span class="token number">7</span>这种形式。            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"上午"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">&lt;</span>time<span class="token operator">&amp;&amp;</span>time<span class="token operator">&lt;=</span><span class="token number">17</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"下午"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token operator">&lt;</span>time<span class="token operator">&amp;&amp;</span>time<span class="token operator">&lt;=</span><span class="token number">23</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"晚上"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    （<span class="token number">2</span>）var b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"傻逼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"闪避"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"不爽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>        dafult<span class="token operator">:</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"数据错误"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>注：if条件判断的条件可为一个范围而switch只能为一个确切的数。<br>四：循环语句</p><pre class=" language-java"><code class="language-java">var family<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>family<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"奶奶"</span><span class="token punctuation">;</span>family<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"爸爸"</span><span class="token punctuation">;</span>family<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"妈妈"</span><span class="token punctuation">;</span>family<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"弟弟"</span><span class="token punctuation">;</span>family<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"我"</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>var index in family<span class="token punctuation">)</span>注：一种遍历方式    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>family<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>family<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>注：另一种遍历方式    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>family<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>五：函数</p><pre class=" language-java"><code class="language-java">function <span class="token function">bian</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>注：函数形参无数据类型<span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>var index in a<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bian</span><span class="token punctuation">(</span>family<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注：return可以结束整个函数（方法），而break只跳出所在循环。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之io流中的file类</title>
      <link href="/posts/45366.html"/>
      <url>/posts/45366.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的io流中的file类。</p><a id="more"></a><h3 id="1-File类的构造方法"><a href="#1-File类的构造方法" class="headerlink" title="1. File类的构造方法"></a>1. File类的构造方法</h3><p>构造方法如下表：<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20190228195140421.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代码1：</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows\\System32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String path <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows"</span><span class="token punctuation">,</span> <span class="token string">"System32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows"</span><span class="token punctuation">,</span> <span class="token string">"System32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代码2：</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows\\System32\\cmd.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String path <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows\\System32"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"cmd.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows\\System32"</span><span class="token punctuation">,</span> <span class="token string">"cmd.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-File类的常用方法"><a href="#2-File类的常用方法" class="headerlink" title="2. File类的常用方法"></a>2. File类的常用方法</h3><ol><li>String getName()：返回此对象表示的<strong>文件或目录</strong>最后一级<strong>文件夹</strong>名称。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代码1：</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows\\System32\\cmd.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回文件名cmd.exe</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代码2：</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows\\System32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回目录最后一级文件夹名称System32</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>String getParent()：返回此File对象的<strong>父目录路径名</strong>；如果此路径名没有指定父目录，则返回 null。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代码1：</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows\\Web\\Wallpaper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出C:\Windows\Web</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代码2：</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows\\Web\\Wallpaper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        file <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出Web</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>String getPath() ：返回File对象所表示的<strong>字符串路径</strong>。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows\\Web\\Wallpaper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        file <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出C:\Windows\Web</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>boolean mkdir()：创建此File类对象指定的目录，不包含父目录。创建成功回true，否则返回。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Program_Files\\Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="6"><li>boolean mkdirs()：创建此File对象指定的目录，包括所有必需但不存在的父目录，创建成功返回true；否则返回false。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Program_Files\\Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意，此操作失败时也可能已经成功地创建了一部分必需的父目录。注意，此操作失败时也可能已经成功地创建了一部分必需的父目录。<br>7. boolean createNewFile()：如果指定的文件不存在并成功地创建，则返回 true；如果指定的文件已经存在，则返回 false；如果所创建文件所在目录不存在则创建失败并出现IOException异常。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D\\Program_File\\HEllow.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Java源文件创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Java源文件创建失败"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>IOException e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注：mkdir()和mkdirs()只能创建目录，不能创建文件；而createNewFile()只能创建文件，不能创建目录；<br>8. boolean exists()：判断文件或目录是否存在</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代码1：</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows\\System32\\cmd.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断cmd.exe文件是否存在</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代码2：</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows\\System32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断目录是否存在</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目录存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="8"><li>boolean delete()：删除File类对象表示的<strong>目录或文件</strong>。如果该对象表示一个目录，则该<strong>目录必须为空</strong>才能删除；文件或目录删除成功返回true，否则false。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代码1：</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\images"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 由于D:\images目录非空，所以删除失败</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目录删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目录删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代码2：</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\images\\image.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//删除图片文件</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"图片删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"图片删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="10"><li>boolean isDirectory()：判断此File对象代表的路径表示是不是目录，只有File对象代表路径存在且是一个目录时才返回true，否则返回false。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Program Files"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="12"><li>boolean isFile()：判断此File对象代表的路径是否是一个标准文件，只有File对代表路径存在且是一个标准文件时才返回true，否则返回false。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Windows\\System32\\cmd.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="14"><li>String[] list()：返回由File对象对应目录所包含文件名或文件夹名组成的字符串数组。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Program Files"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="16"><li>File[] listFiles()：返回由当前File对象对应目录所包含文件路径或文件夹路径组成的File类型的数组。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Program Files"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="12"><li>boolean renameTo(File dest)：重新命名此File对象表示的文件，重命名成功返回true，否则返回false。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File oldFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\images\\image.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\images\\Windows.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> oldFile<span class="token punctuation">.</span><span class="token function">renameTo</span><span class="token punctuation">(</span>newFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将D盘images文件夹中图片更名为Windows.jpg</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重命名成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重命名失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-Fille类的属性"><a href="#3-Fille类的属性" class="headerlink" title="3. Fille类的属性"></a>3. Fille类的属性</h3><ol><li>static separator：指定文件或目录路径时使用斜线或反斜线来写，但是考虑到跨平台，斜线反斜线最好使用File类的separator属性来表示。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:"</span><span class="token operator">+</span>File<span class="token punctuation">.</span>separator<span class="token operator">+</span><span class="token string">"Windows"</span><span class="token operator">+</span>File<span class="token punctuation">.</span>separator<span class="token operator">+</span><span class="token string">"System32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出C:\Windows\System32</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> io流中的file类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之JDBC中的properties文件（Ｍysql数据库）</title>
      <link href="/posts/63991.html"/>
      <url>/posts/63991.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的JDBC中的properties文件。</p><a id="more"></a><h3 id="properties配置文件"><a href="#properties配置文件" class="headerlink" title="properties配置文件"></a>properties配置文件</h3><p>为了后期便于配置管理软件，常将诸如数据库连接配置（url、用户名和密码）、上传文件保存路径等配置信息写在properties文件中。<br>用法：在src根目录创建properties类型文件。<br>例如：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//jdbc文档内容如下：</span>jdbc<span class="token punctuation">.</span>username<span class="token operator">=</span>rootjdbc<span class="token punctuation">.</span>password<span class="token operator">=</span>rootjdbc<span class="token punctuation">.</span>driverClass<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverjdbc<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc\<span class="token operator">:</span>mysql\<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>\<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>test<span class="token operator">?</span>characterEncoding\<span class="token operator">=</span>utf<span class="token operator">-</span><span class="token number">8</span><span class="token comment" spellcheck="true">//Properties文档的运用</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引入该文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建Properties类对象</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        ClassLoader classLoader <span class="token operator">=</span> Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从类加载路径（Java Project对应bin路径；Java Web对应WEB-INF目录classes路径）取得文件的输入流，注意：不能以/开头</span>        InputStream inputStream <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"conf.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加载properties类型文件</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token comment" spellcheck="true">//通过调用getProperty方法获取properties类型文件中key所对应的数据***</span>        String url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jdbc.url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String userName <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jdbc.username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jdbc.password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String driverClass <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jdbc.driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据库连接成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据库连接失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> JDBC中的properties文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之JDBC中的批处理</title>
      <link href="/posts/40244.html"/>
      <url>/posts/40244.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的JDBC中的批处理。</p><a id="more"></a><h3 id="Mysql中的事件（批处理）"><a href="#Mysql中的事件（批处理）" class="headerlink" title="Mysql中的事件（批处理）"></a>Mysql中的事件（批处理）</h3><pre class=" language-Mysql"><code class="language-Mysql">create table account(  id char(36) primary key,  card_id varchar(20) unique,  name varchar(8) not null,  money float(10,2) default 0)set autocommit(false);//取消自动提交insert into account values('6ab71673-9502-44ba-8db0-7f625f17a67d','1234567890','张三',1000);insert into account (id,card_id,name) values('9883a53d-9127-4a9a-bdcb-96cf87afe831','0987654321','张三');commmit;//手动提交</code></pre><blockquote><p>注：在数据相关的情况下，我们存在多条指令需要同时成功或同时失败的需求，所以存在事件的概念（批处理）。mysql默认是自动提交的，而oracle数据库默认不是自动提交。</p></blockquote><h3 id="JDBC中的批处理操作"><a href="#JDBC中的批处理操作" class="headerlink" title="JDBC中的批处理操作"></a>JDBC中的批处理操作</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> rejdbc<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Statement<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jdbc</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取驱动</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e3<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取连接</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/test"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 事务批处理数据</span>            connection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            statement<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token string">"update account set money = money-100 where card_id='1234567890'; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//借助addBatch存储数据</span>            statement<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token string">"update account set money = money + 100 where card_id ='0987654321';"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            statement<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            connection<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"YES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    connection<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            e2<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注：借助Connection类的setAutoCommit(false)方法取消自动提交，借助connection.commit()手动提交数据。借助connection.rollback();回滚数据，即将没有提交的数据进行第二次操作。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> JDBC中的s批处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之JDBC中的ｓｑｌ注入</title>
      <link href="/posts/4239.html"/>
      <url>/posts/4239.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的JDBC中的sql注入。</p><a id="more"></a><h4 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h4><ol><li>注入的解释：通过将恶意SQL语句插入到特定SQL语句内，使特定SQL语句发生变化，最终达到欺骗数据库服务器使之执行恶意的SQL命令的一种方法。<br>例如如下代码：<pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>ResultSet resultSet <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span> String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/test"</span><span class="token punctuation">;</span> connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> String userName <span class="token operator">=</span> <span class="token string">"王_五"</span><span class="token punctuation">;</span> String password <span class="token operator">=</span> <span class="token string">"' or '1'='1"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过or+一个成立的条件，改变原约束条件，进行恶意注入</span> String sql <span class="token operator">=</span> <span class="token string">"select * from user_info where user_name='"</span> <span class="token operator">+</span> userName <span class="token operator">+</span> <span class="token string">"' and password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">;</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>解决sql注入问题<br>借助ParpareStatement类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>PreparedStatement preparedStatement <span class="token operator">=</span> null<span class="token punctuation">;</span>ResultSet resultSet <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://127.0.0.1:3306/test"</span><span class="token punctuation">;</span>    connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from user_info where user_name=? and password=?"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过sql语句的？传递参数，防止修改原语句。</span>    preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    String userName<span class="token operator">=</span><span class="token string">"王_五"</span><span class="token punctuation">;</span>    String password<span class="token operator">=</span><span class="token string">"' or '1'='1"</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为问号占位符赋值</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为问号占位符赋值</span>    resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>preparedStatement <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> JDBC中的sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之ＪDBC中的批处理（Ｍysql）</title>
      <link href="/posts/62023.html"/>
      <url>/posts/62023.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的JDBC中的批处理。</p><a id="more"></a><h3 id="1-JDBC的基础知识"><a href="#1-JDBC的基础知识" class="headerlink" title="1.JDBC的基础知识"></a>1.JDBC的基础知识</h3><ol><li>定义：JDBC全称为Java Database Connectivity，是一种借助Java语言实现数据库连接的技术。</li><li>JDBC的步骤：<br> <strong>方法一：</strong><ol><li>加载驱动程序<ol start="2"><li>获取数据库连接</li></ol></li><li>创建statement实例<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> rejdbc<span class="token punctuation">;</span></code></pre></li></ol></li></ol><p>import java.sql.Connection;<br>import java.sql.DriverManager;<br>import java.sql.SQLException;<br>import java.sql.Statement;</p><p>public class Test {<br>    public static void main(String[] args) {<br>        // 加载驱动<br>        try {<br>            Class.forName(“com.mysql.jdbc.Driver”);// 将mysql数据库的jdbc的jar包，放进lib，并且build path复制其驱动位置<br>        } catch (ClassNotFoundException e3) {<br>            e3.printStackTrace();<br>        }<br>        Connection connection = null;<br>        Statement statement = null;<br>        try {<br>            connection = DriverManager.getConnection(“jdbc:mysql//127.0.0.1:3306/test/“, “root”, “root”);// 与数据库创立连接，3306为mysql的端口，root为用户名和密码<br>            statement = connection.createStatement();// 创建窗口<br>            int result = statement.executeUpdate(“insert into student values (‘1’,’1’)”);// 返回int类型，可以据其判断是否执行成功<br>            if (result &gt; 0) {<br>                System.out.println(“YES”);<br>            } else {<br>                System.out.println(“NO”);<br>            }<br>        } catch (SQLException e2) {<br>            e2.printStackTrace();<br>        } finally {// 关闭相应的窗口和连接，释放资源<br>            if (statement != null) {// 判断是否为空，防止创建窗口出现错误所导致的空指针异常。<br>                try {<br>                    statement.close();<br>                } catch (SQLException e) {<br>                    e.printStackTrace();<br>                }<br>            }<br>            if (connection != null) {// 判断是否为空，防止建立连接出现错误所导致的空指针异常。<br>                try {<br>                    connection.close();<br>                } catch (SQLException e) {<br>                    e.printStackTrace();<br>                }<br>            }<br>        }<br>    }<br>}</p><pre><code>    &gt; 注：代码中的Statement和Connnection等类都是在相应数据库的jdbc的jar包中封装好的。**方法二**    1. 加载驱动程序    2. 获取数据库连接    3. 创建PreparedStatement实例 ```java    String sql = &quot;select * from user_info where user_name like ?&quot;;    PrepareStatement preparement = null;    preparedStatement = connection.prepareStatement(sql);//connection连接创建的窗口不同    preparedStatement.setObject(1, &quot;张%&quot;);//为问号占位符赋值</code></pre><blockquote><p>注：PrepareStatement 类继承自Statement类，但是PrepareStatement类是编译预处理的，其运行效率大于StarementL类，并且其可以防止注入。</p></blockquote><p><strong>方法三</strong><br>    1. 加载驱动程序<br>    2. 获取数据库连接<br>    3. 创建CallableStatement实例</p><pre class=" language-java"><code class="language-java">    String sql <span class="token operator">=</span> <span class="token string">"{call get_age(?,?)}"</span><span class="token punctuation">;</span>    callableStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareCall</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    CallableStatement callableStatement <span class="token operator">=</span> null<span class="token punctuation">;</span>     callableStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"1984-01-10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为问号占位符赋值</span></code></pre><p><strong>JDBC的操作</strong><br>一： Statement的查询操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>ResultSet resultSet <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    String userName <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    String password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    String url<span class="token operator">=</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/test"</span><span class="token punctuation">;</span>    connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"select * from user_info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//查询的结果存放在resultset中，借助的是excuteQuery方法。</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//从resultset中获取数据</span>        String nameName<span class="token operator">=</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String mobile <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"mobile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameName<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>mobile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>statement<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>二：Statement的修改操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    String userName <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    String password <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    String url<span class="token operator">=</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/test"</span><span class="token punctuation">;</span>    connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"delete from user_info where name like '%三%'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//修改操作借助excuteUpdate方法，返回int的数据类型，大于0，即操作成功</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>statement<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>三：PrepareStatement的查询操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>PreparedStatement preparedStatement <span class="token operator">=</span> null<span class="token punctuation">;</span>ResultSet resultSet <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    String url<span class="token operator">=</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/test"</span><span class="token punctuation">;</span>    connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"select * from user_info where user_name like ?"</span><span class="token punctuation">;</span>    preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"张%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为问号占位符赋值</span>    resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与Statement的方法一样，也是返回resultset数据类型</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String nameName<span class="token operator">=</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String mobile <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"mobile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameName<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>mobile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>preparedStatement<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>四： ParepareStatement的修改操作</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>PreparedStatement preparedStatement <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    String url<span class="token operator">=</span><span class="token string">"jdbc:mysql://127.0.0.1:3306/test"</span><span class="token punctuation">;</span>    connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String sql <span class="token operator">=</span> <span class="token string">"delete from user_info where user_name like ?"</span><span class="token punctuation">;</span>    preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"张%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为问号占位符赋值</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//与Statement类似</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>preparedStatement<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> JDBC中的批处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之Lambda表达式</title>
      <link href="/posts/26316.html"/>
      <url>/posts/26316.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的Lambda表达式的知识点</p><a id="more"></a><h3 id="1-基本知识"><a href="#1-基本知识" class="headerlink" title="1.基本知识"></a>1.基本知识</h3><ol><li>语法：Java支持Lambda 表达式始于Java 8，它的出现简化了<strong><em>函数式接口匿名内部类</em></strong>的语法，其表达式语法如下：([参数1], [参数2], [参数3],…. [参数n])-&gt;{代码块}</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">IUtil</span><span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">iterae</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> dates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IAdd</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Lammba</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> IUtil util <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">iterae</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> dates<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String date <span class="token operator">:</span> dates<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> IUtil util <span class="token operator">=</span> <span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*数据类型可以去掉*/</span><span class="token operator">-</span><span class="token operator">></span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数体只有一句输出可以去除大括号。</span>    <span class="token keyword">static</span> IAdd add <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token keyword">static</span> IUtil util <span class="token operator">=</span> <span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*数据类型可以去掉*/</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//把匿名类转换成函数，函数名是一个内部类变量</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String date <span class="token operator">:</span> dates<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     String <span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"小远"</span><span class="token punctuation">,</span><span class="token string">"小王"</span><span class="token punctuation">,</span><span class="token string">"小明"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     util<span class="token punctuation">.</span><span class="token function">iterae</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>IAdd<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> Lambda表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之instenceof的语法</title>
      <link href="/posts/21256.html"/>
      <url>/posts/21256.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的instenceof的语法的知识点</p><a id="more"></a><h2 id="instenceof的语法"><a href="#instenceof的语法" class="headerlink" title="instenceof的语法"></a>instenceof的语法</h2><p>1）定义：instanceof运算符用于判断该运算符前面引用类型变量指向的对象是否是后面类，或者其子类、接口实现类创建的对象。如果是则返回true，否则返回false。<br>2）用法：引用类型变量 instanceof （类、抽象类或接口）。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//instanceof的作用</span>        <span class="token comment" spellcheck="true">//1.判断前面对象是否由后面的类构造</span>     String string<span class="token operator">=</span><span class="token string">"wangwenzhong"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.判断前面的对象是否由后面的类的子类构成</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.判断前面的对象是否由后面的接口的实现类构成</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string <span class="token keyword">instanceof</span> <span class="token class-name">Set</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>3）作用：instanceof运算符用于强制类型转换之前检查对象的真实类型以避免类型转换异常，从而提高代码健壮性。<br>如下:<img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180923161938968?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> instenceof语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之log4j的使用</title>
      <link href="/posts/12057.html"/>
      <url>/posts/12057.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的log4j的使用</p><a id="more"></a><blockquote><p>注本博客在编写时，参考了不动声色的蜗牛的博客，现一并将其链接贴在下面<a href="https://blog.csdn.net/gaohuanjie/article/details/44077551" target="_blank" rel="noopener">博客地址</a></p></blockquote><h3 id="log4j的简介"><a href="#log4j的简介" class="headerlink" title="log4j的简介"></a>log4j的简介</h3><p>Log4j是Apache的一个开源项目，通过使用Log4j，可以控制日志信息格式及其输送目的地（控制台、文件、数据库等），方便后期查找系统运行期间出现的问题，进而便于维护系统。</p><h2 id="配置log4j"><a href="#配置log4j" class="headerlink" title="配置log4j"></a>配置log4j</h2><p>第一步：导入log4j-1.2.15.jar依赖包；<br>工程示例图如下：<img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20181027100216765.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==,size_27,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第二步：在src根目录下创建名为log4j.properties的文件，文件内容如下：</p><pre class=" language-java"><code class="language-java"># DEBUG设置输出日志级别，由于为DEBUG，所以ERROR、WARN和INFO 级别日志信息也会显示出来log4j<span class="token punctuation">.</span>rootLogger<span class="token operator">=</span>DEBUG<span class="token punctuation">,</span>Console<span class="token punctuation">,</span>RollingFile#将日志信息输出到控制台log4j<span class="token punctuation">.</span>appender<span class="token punctuation">.</span>Console<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>ConsoleAppenderlog4j<span class="token punctuation">.</span>appender<span class="token punctuation">.</span>Console<span class="token punctuation">.</span>layout<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>PatternLayoutlog4j<span class="token punctuation">.</span>appender<span class="token punctuation">.</span>Console<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>ConversionPattern<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">%</span><span class="token operator">-</span>5p<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token operator">%</span>d<span class="token punctuation">{</span>yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH<span class="token operator">:</span>mm<span class="token operator">:</span>ss<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">%</span>l <span class="token operator">-</span><span class="token operator">%</span>m<span class="token operator">%</span>n#将日志信息输出到操作系统D盘根目录下的log<span class="token punctuation">.</span>log文件中log4j<span class="token punctuation">.</span>appender<span class="token punctuation">.</span>RollingFile<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>DailyRollingFileAppenderlog4j<span class="token punctuation">.</span>appender<span class="token punctuation">.</span>RollingFile<span class="token punctuation">.</span>File<span class="token operator">=</span>D<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>log<span class="token punctuation">.</span>loglog4j<span class="token punctuation">.</span>appender<span class="token punctuation">.</span>RollingFile<span class="token punctuation">.</span>layout<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>PatternLayoutlog4j<span class="token punctuation">.</span>appender<span class="token punctuation">.</span>RollingFile<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>ConversionPattern<span class="token operator">=</span><span class="token operator">%</span>d <span class="token punctuation">[</span><span class="token operator">%</span>t<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">-</span>5p <span class="token operator">%</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">.</span>40c <span class="token operator">%</span>X<span class="token punctuation">{</span>traceId<span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">%</span>m<span class="token operator">%</span>n</code></pre><p>下面对其语法进行一一的说明：<br>        一、log4j.rootLogger = [level] ,appenderName1 ,appenderName2, …, appenderNameN<br>        1、level：用于指定log日志的输出级别，Log4j的日志输出级别一共有五级，从小到大分别是DEBUG、INFO、WARN、ERROR和FATAL。在配置文件中可以不指定log日志的输出级别，但需要说明的是这种情况下系统会将日志信息级别等于或高于DEBUG级别的信息输出到指定的日志目的地——一句话，Log4j的默认日志优先级为DEBUG级别。</p><blockquote><p>注意：日志信息的日志级别只有等于或高于所配置的日志级别时，该日志信息才会输出到指定的日志输出目的地，例如上述配置文件配置的日志级别为DEBUG，那么这时日志级别为DEBUG或INFO或WARN或ERROR或FATAL的日志信息都会输出到指定的日志输出目的地，但是如果将配置文件中的日志级别设置为INFO，那么这时日志级别为INFO或WARN或ERROR或FATAL的日志信息才能输出到指定的日志输出目的地，DEBUG级别的日志信息不会输出到日志的目的地。</p></blockquote><p>2、appenderName:日志信息输出目的地名。目的地的名称可以任意起，但最好能见名知意；另外可以在等号右侧同时指定多个目的地名，例如上面的例子指定了两个log日志目的地——Console（将日志输出到MyEclipse控制台）和DailyRollingFile（将日志输出到操作系统D盘根目录下的index.html文件）。<br> 二、log4j.appender.appenderName = appender类的完全限定名即是日志的的输出目的地的实现类，如下：</p><ol><li>org.apache.log4j.ConsoleAppender（将日志信息输出到控制台） </li><li>org.apache.log4j.FileAppender（将日志信息输出到文件）</li><li>org.apache.log4j.DailyRollingFileAppender（将日志信息输出到文件，该文件每天产生一个）</li><li>org.apache.log4j.RollingFileAppender（将日志信息输出到文件，该文件在超过指定大小的时候会产生一个新的文件） </li><li>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）。</li><li>org.apache.log4j.net.SMTPAppender（将日志信息以邮件的方式发送到指定的邮箱）<br>第三步：创建Test类代码如下：</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"ErrorClassName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//详细日报信息</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//详细日报信息</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//简单日报信息</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//简单日报信息</span>        <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="拓展："><a href="#拓展：" class="headerlink" title="拓展："></a>拓展：</h3><p>间隙性产生日志文件：<br>上例配置文件是将所有的日志信息都收集到了一个文件中，那么随着时间的推移，该文件会越来越大，内容也会越来越多，这不利于后期对日志文件进行分析，为了解决该问题可以这样配置log4j.properties文件：</p><pre><code># DEBUG设置输出日志级别，由于为DEBUG，所以ERROR、WARN和INFO 级别日志信息也会显示出来log4j.rootLogger=DEBUG,RollingFile#每天产生一个日志文件(RollingFile)  log4j.appender.RollingFile=org.apache.log4j.DailyRollingFileAppender#当天的日志文件全路径log4j.appender.RollingFile.File=d:/logs/sirius.log#服务器启动日志是追加，false：服务器启动后会生成日志文件把老的覆盖掉log4j.appender.RollingFile.Append=true#日志文件格式  log4j.appender.RollingFile.layout=org.apache.log4j.PatternLayout  log4j.appender.RollingFile.layout.ConversionPattern=%d [%t] %-5p %-40.40c %X{traceId}-%m%nlog4j.appender.RollingFile.Threshold=DEBUG#设置每天生成一个文件名后添加的名称,备份名称：sirius.log.年月日时分.loglog4j.appender.RollingFile.DatePattern=&#39;.&#39;yyyy-MM-dd-HH-mm&#39;.log&#39;</code></pre><h2 id="自定义properties的文件"><a href="#自定义properties的文件" class="headerlink" title="自定义properties的文件"></a>自定义properties的文件</h2><p>Log4j默认使用src根目录中名为log4j.properties的文件，实际开发中有可能需要使用特定目录中的特定名字的properties文件，如下工程：<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20181027100918610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==,size_27,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>其中，config包内log.properties文件保存了Log4j相关配置信息，那么此时如何使用该文件呢，如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>PropertyConfigurator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取src目录config包中log.properties文件对应的URL对象</span>        URL url <span class="token operator">=</span> Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/config/log.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PropertyConfigurator<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>开发中不止一个Java类需要将某些日志信息写入指定位置，此时每个类中都会重复性地写入如下代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取src目录config包中log.properties文件对应的URL对象</span>    URL url <span class="token operator">=</span> Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/config/log.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    PropertyConfigurator<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所以：为了尽可能重用代码，可以将该部分代码写入到一个Java类中（如BaseLog4j.java），需要输出日志的类只需继承该类即可。</p><h3 id="SLF4j-Log4j"><a href="#SLF4j-Log4j" class="headerlink" title="SLF4j+Log4j"></a>SLF4j+Log4j</h3><p>SLF4j，即简单日志门面(Simple Logging Facade for Java)，它和Log4j一起使用提高了日志信息操作效率，阿里巴巴Java开发手册日志规约章节特别提到这一点：</p><blockquote><p>强制】应用中不可直接使用日志系统（Log4j、Logback）中的 API，而应依赖使用日志框架SLF4J 中的 API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一。</p></blockquote><p>如何使用： SLF4j和单独使用Log4j大同小易，其区别有如下两点：<br>工程中除导入log4j-1.2.15.jar依赖包外还需导入slf4j-api-1.6.4.jar和slf4j-log4j12-1.6.4.jar两个jar包；<br>获取Logger对象的方法不同：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> log4j的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之代码调试（ecplise）</title>
      <link href="/posts/56564.html"/>
      <url>/posts/56564.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的代码调试</p><a id="more"></a><h2 id="ecplise中调试快捷键"><a href="#ecplise中调试快捷键" class="headerlink" title="ecplise中调试快捷键"></a>ecplise中调试快捷键</h2><p>Eclipse开发工具中F5、F6、F7和F8 四个快捷键能辅助我们很好地进行代码的调试，各快捷键的作用如下：<br>F5：跳入方法；<br>F6：向下逐行调试；<br>F7：跳出方法；<br>F8：直接跳转到下一个断点；<br>Eclipse开发工具中F5、F6、F7和F8 四个快捷键对代码的调试实质是人为地控制代码的运行过程。</p><blockquote><p>注：某些电脑的快捷键需要按着fn键，才可以启动这些快捷键</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 代码调试（ecplise） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之函数式接口</title>
      <link href="/posts/26945.html"/>
      <url>/posts/26945.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的函数式接口的知识点</p><a id="more"></a><h2 id="1-函数式接口定义"><a href="#1-函数式接口定义" class="headerlink" title="1.函数式接口定义"></a>1.函数式接口定义</h2><p>1.定义：如果<strong>接口</strong>内只定义一个<strong>抽象方法</strong>，则该接口称为函数式接口。<br>2.判别：可以使用@FunctionalInterface 注解来验证一个接口是不是函数式接口，Java8中java.lang.Runnable、java.util.Comparator<T>都是函数式接口。<br>3.特点：函数式接口中可以定义多个常量、多个默认方法和多个静态方法，但只能定义一个抽象方法及多个java.lang.Object中的public方法。</p><h1 id="2-抽象类和和接口的区别"><a href="#2-抽象类和和接口的区别" class="headerlink" title="2.抽象类和和接口的区别"></a>2.抽象类和和接口的区别</h1><table><thead><tr><th>空</th><th align="right">抽象类</th><th>接口</th></tr></thead><tbody><tr><td>关键字</td><td align="right">abstract</td><td>interface</td></tr><tr><td>成员变量</td><td align="right">可包含任意合法变量</td><td>只能包含公开静态常量</td></tr><tr><td>构造方法</td><td align="right">有</td><td>无</td></tr><tr><td>方法</td><td align="right">可包含任意合法方法（注意不能为private）</td><td>jdk7以下只包含公开抽象方法，jdk8及以上可以包含默认和静态的非抽象方法</td></tr><tr><td>如何实现抽象方法</td><td align="right">通过自定义类继承抽象类的方法实现抽象类的抽象方法</td><td>通过自定义类implements接口中的抽象方法，可以有多个接口</td></tr><tr><td>是否存在多继承</td><td align="right">无</td><td>有</td></tr></tbody></table><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@FunctionalInterface</span>     <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMammal</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//2.接口中可以有static静态方法</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//3、当接口中只有一个抽象类方法时可以用函数式接口（）（也可以包括已在object类中定义的函数式接口方程。）</span>        <span class="token keyword">void</span>  <span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token function">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数式接口</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 函数式接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之反射</title>
      <link href="/posts/206.html"/>
      <url>/posts/206.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的反射</p><a id="more"></a><h3 id="1-反射的基础知识"><a href="#1-反射的基础知识" class="headerlink" title="1. 反射的基础知识"></a>1. 反射的基础知识</h3><ol><li>定义：Java反射（Reflection）是一种新的<strong>操作类中成员变量、构造方法和普通方法的机制</strong>，为了实现对成员变量、构造方法和普通方法的操作，我们需要借助Java自身提供的<strong>java.lang包下的Class类和java.lang.reflect包下的反射API</strong>。</li><li>class类：Class类是Java 反射机制的入口，封装了一个类或接口的运行时信息，通过调用Class类的方法可以获取这些信息。</li><li>class类的特点：<ol><li>该类在java.lang包中；</li><li>该类被final所修饰，即该类不可以被子类继承；</li><li>该类实现了Serializable接口；</li><li>该类的<strong>构造方法被private所修饰，即不能通过new关键字创建该类的对象</strong>；<h3 id="2-反射的运用"><a href="#2-反射的运用" class="headerlink" title="2. 反射的运用"></a>2. 反射的运用</h3><h5 id="1，获取实例化对象"><a href="#1，获取实例化对象" class="headerlink" title="1，获取实例化对象"></a>1，获取实例化对象</h5>获取class类实例化对象的方法：<ol><li>通过Class类静态forName(“类包名.类名”)获取Class类实例，建议使用这种形式。</li><li>通过使用类名.class获取Class类实例。</li><li>如果是<strong>基本数据类型</strong>，则可以通过包装类.TYPE获取Class类实例，当然，也可以通过基本数据类型.class获取Class类实例。</li><li>如果已创建了<strong>引用类型的对象</strong>，则可以通过调用对象中的 getClass( )方法获取Class类实例。</li><li>通过<strong>元素类型[].class可以获取数组</strong>所对应的Class类实例。</li><li>通过调用某个类的Class实例的getSuperClass()方法可以获取该类超类的Class实例。</li></ol></li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> csdntest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jskajfakjf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span> <span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">Student</span> <span class="token punctuation">(</span>String names<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jasjf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span>         NoSuchMethodException<span class="token punctuation">,</span> SecurityException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反射是一种处理类中，已知类名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">class1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//已知对象名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>class1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">class2</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"csdntest.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//已知类名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>class2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//数组的类名</span>        Class <span class="token class-name">class3</span> <span class="token operator">=</span> String <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>class3<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//基本数据类型的类名，</span>        <span class="token comment" spellcheck="true">//需用基本数据类型的包装类。</span>        Class <span class="token class-name">class4</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>class4<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">class5</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>class5<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">class6</span> <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>class6<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-获取构造方法"><a href="#2-获取构造方法" class="headerlink" title="2.获取构造方法"></a>2.获取构造方法</h5><p>借助Class类某些可以获取对应类中声明的构造方法实例对象，方法如下：</p><ol><li>Constructor[] getConstrutors()：返回该Class对象表示类包含的<strong>所有public构造方法*不含继承</strong>所对应Constructor对象数组。</li><li>Constructor getConstrutor(Class&lt;?&gt;… parameterTypes)：返回与该Class对象表示类中参数列表相匹配的public构造函数（<strong>不含继承</strong>）对应的Constructor对象。</li><li>Constructor&lt;?&gt;[] getDeclaredConstructors()：返回一个该Class对象表示类中声明的所有构造方法（不区分访问权限）对应的Constructor对象数组。</li><li>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)：返回与该Class对象表示类中定义的形参类型相匹配的构造方法（不区分访问权限）的Constructor对象。<h5 id="3-获取构造方法信息"><a href="#3-获取构造方法信息" class="headerlink" title="3.获取构造方法信息"></a>3.获取构造方法信息</h5></li><li>Class<T> getDeclaringClass()：返回声明Constructor对象对应构造方法的类的Class对象。 </li><li>int getModifiers()：以整数形式返回Constructor对象表示的构造函数的修饰符。</li><li>String getName() ：以字符串形式返回Constructor对象所表示得构造方法的名称。</li><li>Class&lt;?&gt;[] getParameterTypes()：返回由Constructor对象所表示的构造方法的形参类型对应<strong>Class对象组成的数组</strong> 。如果构造方法没有参数，则数组长度为0。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> csdntest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Modifier<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jskajfakjf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span> <span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">Student</span> <span class="token punctuation">(</span>String names<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jasjf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> SecurityException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span>Student<span class="token operator">></span> clazz <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反射是一种处理类中，已知类名</span>    <span class="token comment" spellcheck="true">//获取构造方法</span>    Constructor <span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取所有构造方法名，返回数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">:</span> constructors<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Constructor <span class="token punctuation">[</span><span class="token punctuation">]</span> constructorsd <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Constructor constructor2 <span class="token operator">:</span> constructorsd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    Constructor constructor1<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Constructor constructor2<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取一个构造方法名，忽略访问权限</span>    Constructor constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回整型变量，再次转换为字符串。</span>    String str <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得修饰符</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类名</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法名</span>    Class <span class="token punctuation">[</span><span class="token punctuation">]</span>parameters <span class="token operator">=</span>constructor<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取参数列表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Class <span class="token class-name">class1</span> <span class="token operator">:</span> parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>class1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Object obj <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"jfalsfjf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回类的对象</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><blockquote><p>注：getConstructors()和getConstructor(Class&lt;?&gt;… parameterTypes)方法均无法获取非public类中默认无参构造方法对应的Constructor对象。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span>Student<span class="token operator">></span> clazz <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructorArray <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructorArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出0</span>        Constructor<span class="token operator">&lt;</span>Student<span class="token operator">></span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该行代码出现“java.lang.NoSuchMethodException: Student.&lt;init>()”异常</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>注：getDeclaredConstructors()和getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)方法可以获取非public类中默认无参构造方法对应的Constructor对象。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span>Student<span class="token operator">></span> clazz <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructorArray <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructorArray<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出1</span>        Constructor<span class="token operator">&lt;</span>Student<span class="token operator">></span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出Student</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="4-通过Constructor类的某些方法创建对象"><a href="#4-通过Constructor类的某些方法创建对象" class="headerlink" title="4.通过Constructor类的某些方法创建对象"></a>4.通过Constructor类的某些方法创建对象</h5><ol><li>void setAccessible(boolean flag)：调用构造函数时是否忽略访问权限的影响，true表示忽略，false表示不忽略。</li><li>T newInstance(Object… initargs)：使用此Constructor对象表示的构造方法来创建声明该构造方法类的新对象。initargs为传入该构造方法中的参数，如果该构造方法没有参数，则可设定为null或一个长度为0的数组。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> csdntest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Student</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jskajfakjf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span> <span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">Student</span> <span class="token punctuation">(</span>String names<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jasjf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> SecurityException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用构造方法的步骤。1 获取类名。2.获取构造方法3.调用。</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过该方法只能调用clazz对应的无参方法。若无则出错，该方法返回对象。实质是调用clazz对象对应类的无参gouzaofangfa</span>        Constructor constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把私有的方法变成可以访问的。</span>        Object obj <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"wang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该方法返回类的对象</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出jskajfakjf</span><span class="token comment" spellcheck="true">//jasjf</span></code></pre><h5 id="5-借助Class类某些获取对应类中声明的成员变量实例对象及获取及设置成员变量的值。"><a href="#5-借助Class类某些获取对应类中声明的成员变量实例对象及获取及设置成员变量的值。" class="headerlink" title="5.借助Class类某些获取对应类中声明的成员变量实例对象及获取及设置成员变量的值。"></a>5.借助Class类某些获取对应类中声明的成员变量实例对象及获取及设置成员变量的值。</h5><h5 id="获取实例化对象"><a href="#获取实例化对象" class="headerlink" title="获取实例化对象"></a>获取实例化对象</h5><ol><li>Field[] getFields()：返回一个该Class对象表示类或接口中所有public属性（<strong>含继承的</strong>）对应的Field对象数组。</li><li>Field getField(String fieldName)：返回该Class对象表示类或接口中与指定属性名（<strong><em>含继承的</em></strong>）相同的public 属性对应的Field对象。</li><li>Field[] getDeclaredFields()：返回一个该Class对象表示类或接口内定义的所有属性（<strong>不含继承的</strong>）对应的Field对象数组，。</li><li>Field getDeclaredField(String fieldName) ：返回一个与该Class对象表示类或接口内定义的属性名（<strong>不含继承的</strong>）相匹配的属性相对应的Field对象。<h6 id="设置成员变量设置成员变量"><a href="#设置成员变量设置成员变量" class="headerlink" title="设置成员变量设置成员变量"></a>设置成员变量设置成员变量</h6><ol><li>void setAccessible(boolean flag)：设置或获取属性值时是否忽略访问权限的影响，true表示忽略，false表示不忽略。</li><li>Object get(Object obj)：返回Field表示字段的Object类型的值。obj为该属性所在类创建的对象，如果该属性是静态的，则可设置为null。<ol start="3"><li>void set(Object obj, Object value)：为Field对象表示属性设置新值。obj为该属性所在类创建的对象，如果该属性为静态的则课设置为null;value为该属性新值。</li></ol></li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> csdntest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Modifier<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span> String str<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doHomework</span><span class="token punctuation">(</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在写作业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doHomework</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在写作业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchFieldException<span class="token punctuation">,</span> SecurityException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span> IllegalAccessException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取属性</span>    Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    Field <span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取类的所有public级别的所有成员变量（包含继承来的public级别的成员变量）</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fields<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只获得该Class对象表示类或接口内定义的所有属性（不含继承的）对应的Field对象数组</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fields<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    Field fieid <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieid<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fieid <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieid<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取public级别的成员变量</span>    <span class="token comment" spellcheck="true">//查看属性</span>    <span class="token comment" spellcheck="true">//1.获取所在类名</span>    clazz <span class="token operator">=</span> fieid<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取修饰符</span>    <span class="token keyword">int</span> rel <span class="token operator">=</span> fieid<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String  mol <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>rel<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取属性名</span>    clazz <span class="token operator">=</span> fieid<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置属性值</span>    Class <span class="token class-name">clazz2</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    Field field <span class="token operator">=</span> clazz2<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"wang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定对象然后在赋值</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指明调用那个对象的属性值</span>    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//操作私有的属性</span>    field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"san"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指定对象然后在赋值</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指明调用那个对象的属性值</span>   <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*运行结果：22agenameclass csdntest.Personpublicjava.lang.Stringwangsan*/</span></code></pre><h5 id="6-获取及操作普通方法"><a href="#6-获取及操作普通方法" class="headerlink" title="6.获取及操作普通方法"></a>6.获取及操作普通方法</h5><h6 id="1-获取普通方法"><a href="#1-获取普通方法" class="headerlink" title="1.获取普通方法"></a>1.获取普通方法</h6><ol><li>Method[] getMethods()：返回一个该Class对象表示类或接口中所有public方法（<strong>含继承的</strong>）对应的Method对象数组。</li><li>Method getMethod(String methodName, Class&lt;?&gt;… parameterTypes)：返回与该Class对象表示类或接口中方法名和方法形参类型相匹配的public方法（<strong>含继承的</strong>）的Method对象。</li><li>Method[] getDeclaredMethods()：返回一个该Class对象表示类或接口内声明定义的所有访问权限的方法（<strong>不含继承的</strong>）对应的Method对象数组。</li><li>Method getDeclaredMethod(String methodName,Class&lt;?&gt;… parameterTypes) ：返回与该Class对象表示类或接口中方法名和方法形参类型相匹配方法（<strong>不含继承的</strong>）对应的Method对象。<pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> csdntest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span> <span class="token keyword">public</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span> String str<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doHomework</span><span class="token punctuation">(</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在写作业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doHomework</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在写作业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> SecurityException <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//获取方法名</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token operator">></span> clazz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Method <span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> Method method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"doHomework"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"doHomework"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="2-获取普通方法的信息"><a href="#2-获取普通方法的信息" class="headerlink" title="2.获取普通方法的信息"></a>2.获取普通方法的信息</h6></li><li>Class&lt;?&gt; getDeclaringClass()：返回声明Method对象表示方法的类或接口的 Class 对象。 </li><li>int getModifiers()：以整数形式返回此Method对象所表示方法的修饰符。应该使用Modifier类中的toString方法对所返回的整数进行解码（示例见备注）。</li><li>Class&lt;?&gt; getReturnType()：返回Method对象所表示的方法的返回值类型所对应的Class对象。</li><li>String getName()：返回方法名。</li><li>Class&lt;?&gt;[] getParameterTypes()：返回由Method对象代表方法的形参类型对应Class对象组成的数组。如果方法没有参数，则数组长度为 0。</li><li>Class&lt;?&gt;[] getExceptionTypes()：返回由Method对象表示方法抛出异常类型对应Class对象组成的数组。如果此方法没有在其 throws子句中声明异常，则返回长度为 0 的数组。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> csdntest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Modifier<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span> String str<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doHomework</span><span class="token punctuation">(</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在写作业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doHomework</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在写作业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> SecurityException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取class对象</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取方法对象</span>        Method method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"doHomework"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取异常类型</span>        Class <span class="token punctuation">[</span><span class="token punctuation">]</span> claza <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getExceptionTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Class <span class="token class-name">class1</span> <span class="token operator">:</span> claza<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>class1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取参数列表，有参数构成的class对象数组</span>        Class <span class="token punctuation">[</span><span class="token punctuation">]</span> classes <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Class <span class="token class-name">class1</span> <span class="token operator">:</span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>class1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取参数列表</span>        <span class="token keyword">int</span> mod <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> Modifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用方法</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"小王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只有对象才可以调用类中方法（必须指明对象）</span>        <span class="token comment" spellcheck="true">//调用私有方法</span>        <span class="token comment" spellcheck="true">//Method method1 = clazz.getMethod("doHomework",)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="3-调用普通方法"><a href="#3-调用普通方法" class="headerlink" title="3.调用普通方法"></a>3.调用普通方法</h6><ol><li>void setAccessible(boolean flag)：调用方法时是否忽略访问权限的影响，true表示忽略，false表示不忽略。</li><li>Object invoke(Object obj, Object… args)：调用Method对象指代的方法并返回Object类型结果。obj表示该方法所在类实例，如果方法时静态的则obj可以指定为null; args表示传入该方法的参数，如果方法没有参数，则args数组长度可以为 0 或 null 。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> csdntest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token keyword">public</span> String str<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">Student</span> <span class="token punctuation">(</span>String names<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"jasjf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doHomework</span><span class="token punctuation">(</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正在写作业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doHomework</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在写作业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchFieldException<span class="token punctuation">,</span> SecurityException<span class="token punctuation">,</span> IllegalArgumentException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//反射创建对象</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Constructor constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"小林"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用构造方法创建对象,并且是个上转型对象</span>        <span class="token comment" spellcheck="true">//私有属性复制</span>        Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调用私有方法</span>        Method method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"doHomework"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"中国.河南"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//运行结果如下：jasjf</span>中国<span class="token punctuation">.</span>河南正在写作业</code></pre><h5 id="7-动态数组"><a href="#7-动态数组" class="headerlink" title="7. 动态数组"></a>7. 动态数组</h5><ol><li>说明：Java在创建数组的时候，需要指定数组长度，且数组长度不可变。而java.lang.reflect包下提供了一个Array类，通过这些方法可以创建动态数组，对数组元素进行赋值、取值操作。</li><li>Array类提供的主要方法（均为静态方法）如下：</li><li>static Object newInstance(Class componentType, int length)：创建一个具有指定的元素类型和长度的新数组。</li><li>static Object newInstance(Class componentType, int… dimensions)：创建一个具有指定的元素类型和维度的多维数组。</li><li>static void setXxx(Object array, int index, xxx val)：将指定数组对象中索引元素的值设置为指定的xxx类型的val值。</li><li>static xxx getXxx(Object array, int index)：获取数组对象中指定索引元素的xxx类型的值。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Array<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建可存3个数据的字符串数组</span>            Object arrayObject <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Array<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>arrayObject<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给数组第一个元素赋值</span>            Array<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>arrayObject<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给数组第二个元素赋值</span>            Array<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>arrayObject<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"王五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给数组第三个元素赋值</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span>arrayObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回arrayObject数组对象的长度</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Object name <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arrayObject<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取指定索引位置的元素值</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之异常的处理</title>
      <link href="/posts/40801.html"/>
      <url>/posts/40801.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的异常的处理</p><a id="more"></a><h2 id="1-异常的定义"><a href="#1-异常的定义" class="headerlink" title="1.异常的定义"></a>1.异常的定义</h2><p>1.定义：Java语言将程序运行过程中所发生的不正常严重错误称为异常，对异常的处理称为异常处理。</p><p>2.特点：它会中断正在运行的程序，正因为如此异常处理是程序设计中一个非常重要的方面，也是程序设计的一大难点。</p><h2 id="2-异常的分类"><a href="#2-异常的分类" class="headerlink" title="2.异常的分类"></a>2.异常的分类</h2><p>分类：异常分为error（错误类，该类通常不需程序员解决）和Exception（异常，这是程序员编程的错误，需要程序员自己解决）。<br><strong>Exception的分类</strong>：分为RuntimeException（运行时错误）和非RuntimeException（检查时错误）<br>四种分类的介绍：<br>error类：指合理的应用程序在执行过程中发生的严重问题。当程序发生这种严重错误时，通常的做法是通知用户并中止程序的执行。<br>RutimeException类：RuntimeException：运行时异常，即程序运行时抛出的异常。这种异常在写代码时不进行处理，Java源文件也能编译通过。 RuntimeException异常类及其下面的子类均为运行时异常。<br>非RuntimeException（CheckedException）：检查时异常，又称为非运行时异常，这样的异常必须在编程时进行处理，否则就会编译不通过。Exception异常类及其子类（除去RuntimeException异常类及其子类）都是检查时异常。<br><strong>常见异常</strong>：<img src="/medias/loading.gif" data-original="https://img-blog.csdn.net/20180929162817119?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmdfZGFfYmluZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p><h2 id="3-异常的处理"><a href="#3-异常的处理" class="headerlink" title="3.异常的处理"></a>3.异常的处理</h2><p>1）Java中对异常的处理有如下两种方式：<br>1.通过try、catch和finally关键字捕获异常；<br>2.通过throw或throws关键字抛出异常。</p><h2 id="4-捕获异常"><a href="#4-捕获异常" class="headerlink" title="4.捕获异常"></a>4.捕获异常</h2><p>1.try ，catch，finally的语法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span>｛      <span class="token comment" spellcheck="true">//可能抛出异常的语句块</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>SomeException1 e<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// SomeException1特指某些异常 </span>     <span class="token comment" spellcheck="true">//当捕获到SomeException1类型的异常时执行的语句块</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> SomeException2 e<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//当捕获到SomeException2类型的异常时执行的语句块</span><span class="token punctuation">}</span><span class="token keyword">finally</span>｛     <span class="token comment" spellcheck="true">//无论是否发生异常都会执行的代码</span><span class="token punctuation">}</span></code></pre><p>2.语法结构：try…catch…finally异常处理结构中，try语句块是必须的,  catch和finally语句块至少出现一个。</p><blockquote><p>注意：如果try语句块包含的是检查时异常，则在没有通过throws抛出该异常类的情况下，try必须和catch一起使用，当该行代码去掉或注销掉时，catch相应的异常语句块必须去掉</p></blockquote><p>如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li><p>多重catch的特点：<br>try语句块中的代码可能会引发多种类型的异常，当引发异常时，会按顺序查看每个 catch 语句，<strong><em>并执行第一个与异常类型匹配的catch语句，其后 catch 语句被忽略</em></strong>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestException</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> nameArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"小王"</span><span class="token punctuation">,</span> <span class="token string">"小李"</span><span class="token punctuation">,</span> <span class="token string">"小高"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 捕获下标越界异常</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发生数组下标越界异常，成功捕获！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 捕获运行时异常</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发生运行时异常，成功捕获！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 捕获所有异常</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发生异常，成功捕获！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>finally关键字：<br>Java异常在try/catch块后加入finally块，可以确保无论是否发生异常 finally块中的代码总能被执行。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestException</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> nameArray <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"小王"</span><span class="token punctuation">,</span> <span class="token string">"小李"</span><span class="token punctuation">,</span> <span class="token string">"小高"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nameArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据下标越界，请修改程序！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用异常对象的getMessage()方法："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用异常对象的printStackTrace()方法："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// finally语句块仍然执行</span>         <span class="token comment" spellcheck="true">// System.exit(1);//直接退出JVM，finally语句块不再执行</span>     <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><pre><code>5. final ,finally,finalize三个关键字的区别：6. final—修饰符（关键字），修饰的类不能被继承，修饰的方法不能被重写，修饰的变量为常量。 7. finally—在异常处理时提供 finally 块来执行任何清除操作。 8. finalize—方法名，finalize() 方法在垃圾收集器将对象从内存中清除之前做必要的清理工作，如下代码：```javaclass Student {    @Override    protected void finalize() throws Throwable {        super.finalize();        System.out.println(&quot;对象从内存中清除之前执行&quot;);    }}public class Test {    public static void main(String[] args) {        new Student();        System.gc();//执行该代码，垃圾收集器将回收未使用的内存空间。    }}</code></pre><h2 id="5-抛出异常"><a href="#5-抛出异常" class="headerlink" title="5. 抛出异常"></a>5. 抛出异常</h2><p>1）throw关键字：throw用于抛出<strong><em>具体异常类的对象</em></strong> ，一般用于方法体中。<br>2）作用：当所写的代码因不满足某些条件致使程序无法运行时可以借助throw抛出一个异常对象提醒程序员。<br>3）注意：throw关键字一般用在方法体中，也可以用在代码块中，但如果<strong>代码块</strong>中抛出的异常对象是由<strong>检查时异常</strong>创建的，则必须使用try-catch进行处理。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"操作失败：分母不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4)throw抛出的对象</p><ol><li><p>抛给自己（用try，catch捕获异常）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"操作失败：分母不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>抛给方法的调用者（即该方法调用时会出现异常）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>print<span class="token punctuation">.</span>PrintException<span class="token punctuation">;</span></code></pre></li></ol><p>public class PrintUtil {</p><pre><code>public  static void printAge(int age) throws PrintException {//此处由于该方法使用throw抛出的是由检查时异常创建的对象并且throw后没有自行处理，所以这里必须要使用throws抛出创建该异常的异常类；此处也可以throws     if (age &gt;= 150 || age &lt;= 0) {        throw new PrintException(&quot;打印失败，请输入0~150之间的数&quot;);    } else {        System.out.println(&quot;年龄为：&quot; + age);    }}</code></pre><p>}</p><pre><code>&gt;注意：***使用throw抛出异常对象如果没有try-catch捕获该异常对象，则该抛出异常对象语句执行后其所在方法结束执行。***```javapublic class Test {    public static void main(String[] args) {        div(1, 0);        System.out.println(&quot;代码2&quot;);    }    static void div(int a, int b){        if(b==0){            throw new UnsupportedOperationException(&quot;第二个参数不能为0&quot;);        }        System.out.println(&quot;代码1&quot;);    }    }5. throws的用法：throws用于声明方法可能抛出的异常，其后为异常类，可以有多个，异常类之间用英文逗号间隔。6. 作用：1） 当**方法体中的throw关键字抛出由检查时异常创建的对象**时，如果该异常对象在抛出的同时已经通过try-catch进行了处理，则可以不使用throws，否则必须使用throws抛出创建该对象的异常类或其父类。2） 所调用的方法抛出了检查时异常时，如果该方法在调用的同时已经通过try-catch进行了处理，则可以不使用throws继续上抛该异常，否则必须使用throws才能上抛该异常，此时上抛的异常类可以是调用方法时方法抛出的异常类也可以是其父类。&gt;注：如果**方法中的异常已经通过try-catch进行了捕获**则无需再使用throws上抛该异常了，否则即使上抛也无效，只会做无用功。## 6.自定义异常类做法：创建继承Exception 或其子类的自定义类；自定义异常类调用父类构造函数(通常是含有一个String类型参数的构造函数，使得错误信息能在异常类对象printStackTrace方法和getMessage方法中使用。)```java//这是自定义的异常public class AgeException extends Exception{    public AgeException (String message) {        super(message);    }}//测试自定义异常public class Test{    public static void main(String[] args) {        //throw new AgeException(&quot;&quot;);//throw只能用于方法，否则用try处理        try {            throw new AgeException(&quot;&quot;);        } catch (Exception e) {            e.printStackTrace();        }    }}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 异常的处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ｊava入门之抽象类</title>
      <link href="/posts/63030.html"/>
      <url>/posts/63030.html</url>
      
        <content type="html"><![CDATA[<p>本文讲述了Java中的抽象类的知识点</p><a id="more"></a><h2 id="1-抽象类的基本定义"><a href="#1-抽象类的基本定义" class="headerlink" title="1.抽象类的基本定义"></a>1.抽象类的基本定义</h2><p>1.抽象类：abstract修饰的类称为做抽象类；<br>2.抽象方法abstract修饰的方法叫做抽象方法，抽象方法只有声明部分，而没有具体的方法体。<br>3.abstract关键字：abstract可以修饰类和方法。</p><h2 id="2-抽象类的特点"><a href="#2-抽象类的特点" class="headerlink" title="2.抽象类的特点"></a>2.抽象类的特点</h2><p>1）一个abstract类只关心它的子类是否具有某种功能，并不关心其自身功能的具体行为，功能的具体行为由子类负责实现。<br>2）抽象类不能直接被实例化，即不能用new关键字创建该抽象类的对象。<br>3）抽象类中可以没有abstract方法（为了强迫使用者必须通过继承来使用这个类）；但是一旦类中包含了abstract方法,则这个“类”一定是abstract类，即有抽象方法的类一定是抽象类。<br>4）抽象类的子类必须实现抽象类中的所有抽象方法，否则子类也必须是抽象类。<br>5）抽象类中的抽象方法是多态的一种表现形式。</p><h1 id="3-抽象类与普通类的区别"><a href="#3-抽象类与普通类的区别" class="headerlink" title="3.抽象类与普通类的区别"></a>3.抽象类与普通类的区别</h1><p>1）抽象类前面由abstract修饰，而普通类没有。<br>2）抽象类不能创建对象，普通类可以创建对象。<br>3）抽象类中可以有抽象方法，普通类中一定没有抽象方法；</p><h1 id="4-常用关键字的使用注意点"><a href="#4-常用关键字的使用注意点" class="headerlink" title="4.常用关键字的使用注意点"></a>4.常用关键字的使用注意点</h1><p>1）final不能修饰抽象类<br>原因：如果抽象类前面可以添加final就意味着该类无法被继承，也就意味着该抽象类中的抽象方法永远无法得到实现，也就意味着抽象类中的抽象方法是无用的。</p><p>2）抽象类中的抽象方法不能被private修饰<br>原因：被private修饰的方法其作用范围为本类，如果抽象类中的抽象方法被private修饰就意味着该方法永远无法被实现。</p><p>3）抽象类中的抽象方法不能被static修饰<br>原因：抽象类中的抽象方法如果可以被static修饰就意味着可以使用抽象类的类名来使用该方法，但是该抽象方法没有方法体，不具有使用的价值，所以Java中规定抽象类中不能包含被static修饰的静态抽象方法。<br>例子如</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象父类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Mammal</span> <span class="token punctuation">{</span>    String bian<span class="token operator">=</span><span class="token string">"4567"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽象类存在构造方法，但是不能用new关键字创建对象。</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没有方法体，则为抽象方法，一个类中如果有抽象方法，则该类为抽象类，但是抽象类中可以没有抽象方法。</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//抽象类不能有final修饰（不能被继承），抽象方法不能有private（不能被子类访问）和static（只能有抽象类名调用）修饰</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"chifan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//继承抽象父类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bat</span> <span class="token keyword">extends</span> <span class="token class-name">Mammal</span><span class="token punctuation">{</span>    String bian<span class="token operator">=</span><span class="token string">"2345"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"蝙蝠吃蚊子。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"蝙蝠用翅膀移动。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抽象父类的抽象方法必须被全部重写，否则该子类也必为抽象类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Bat bat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Mammal mammal <span class="token operator">=</span> bat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//引用数据类型的自动转换 父类变量=子类对象，上转型对象，其不能使用子类新增属性和方法</span>        mammal<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//多态，未调用前和调用时方法不同，（可有地址进行解释）（只能在重写时出现多态，引用数据类型分为编译时类型（等号左侧）和运行时类型（等号右侧） </span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mammal<span class="token punctuation">.</span>bian<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性无多态，方法有多态</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bian<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java入门 </tag>
            
            <tag> 抽象类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统启动原理</title>
      <link href="/posts/5057.html"/>
      <url>/posts/5057.html</url>
      
        <content type="html"><![CDATA[<h3 id="整体执行过程"><a href="#整体执行过程" class="headerlink" title="整体执行过程"></a>整体执行过程</h3><p> 在PC加电自检后，ROM-BIOS会把引导扇区代码bootsect加载到0x7C00处并执行，执行过程中bootsect把自己移到0x90000处。程序主要负责：</p><p>1）把从磁盘第2扇区开始的4个扇区的setup模块（setup.s生成）加载到内存0x90200处（此处为紧接着ROM-BIOS之后），加载后内存如下分布（第一扇区即存放bootsect.s）：</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/Laicize/images/raw/master/img/20200413150334.png" alt=""></p><p>2） 利用BIOS中断0x13取磁盘参数表中当前启动引导盘的参数</p><p>3） 屏幕显示“Loading system…”</p><p>4） 把磁盘setup模块后面的system模块加载到内存0x10000</p><p>5） 确定根文件系统设备号并保存其设备号于root_dev</p><p>6） 跳转到setup程序开始处（即0x90200）执行setup程序</p><blockquote><p>cs:程序的段基地址,ip偏移地址</p><p>物理地址=段基地址&lt;&lt;4+ip</p></blockquote><h3 id="引导扇区代码-bootsect-s"><a href="#引导扇区代码-bootsect-s" class="headerlink" title="引导扇区代码:bootsect.s"></a>引导扇区代码:bootsect.s</h3><h4 id="执行bootsect过程中，bootsect把自己移到0x90000"><a href="#执行bootsect过程中，bootsect把自己移到0x90000" class="headerlink" title="执行bootsect过程中，bootsect把自己移到0x90000"></a>执行bootsect过程中，bootsect把自己移到0x90000</h4><pre><code>armasm…BOOTSEG  = 0x07c0                      ! original address of boot-sectorINITSEG  = 0x9000                         ! we move boot here - out of the way…entry _start_start:    mov  ax,#BOOTSEG        mov  ds,ax                             !ds寄存器置为0x07c0    mov  ax,#INITSEG    mov  es,ax                             !es寄存器置为0x9000    mov  cx,#256                         !设置计数器，计数256    sub    si,si                                  sub    di,di                              !sub是做减法操作，此处将si，di自己减自己，即置0。                                         !移动时源地址ds：si=0x07c0：0x0000，目的地址es：di=0x9000：0x0000                                         !即将BIOS移动到0x9000（0x07c0用于放置bootsect.s）    rep                       !rep指令作用：重复执行后面一句操作，并递减cx的值，直到cx=0停止    movw                  !movw指令作用：这里从内存[si]处移动cx个字到[di]；注意一次的移动单位是“字”，mov指令+w（word）是一次移动一个字   jmpi  go,INITSEG                 !将BIOS移动到0x9000后，跳转（go）到INITSEG（0x9000）</code></pre><blockquote><ol><li>inter和AT&amp;T的语法不同,mov指令,源操作数和目的操作数相反.</li><li>将boosect从0x07c0移到0x90000</li></ol></blockquote><h4 id="把从磁盘第2扇区开始的4个扇区的setup模块（setup-s生成）加载到内存0x90200处"><a href="#把从磁盘第2扇区开始的4个扇区的setup模块（setup-s生成）加载到内存0x90200处" class="headerlink" title="把从磁盘第2扇区开始的4个扇区的setup模块（setup.s生成）加载到内存0x90200处"></a>把从磁盘第2扇区开始的4个扇区的setup模块（setup.s生成）加载到内存0x90200处</h4><h4 id=""><a href="#" class="headerlink" title="　　"></a>　　</h4><pre class=" language-armasm"><code class="language-armasm">go:        mov  ax,cs //cs=ox9000    mov  ds,ax    mov  es,ax   !ds、es都置成移动后代码所在的段处（0x9000）! put stack at 0x9ff00. 下面两条指令是将堆栈指针sp指向0x9ff00处（即0x9000:0xff00）    mov  ss,ax     mov  sp,#0xFF00                  ! arbitrary value >>512   load_setup:    mov  dx,#0x0000                  ! drive 0, head 0  dx为0x0000，即dh为0x00，dl为0x00，即磁头号0，驱动器0    mov  cx,#0x0002                   ! sector 2, track 0  同上磁道号0（低8位和高2位都是0）， 开始扇区为2（从cl的低5位得到）  mov  bx,#0x0200                  ! address = 512, in INITSEG  数据缓冲区0x90200，注意前面es已设置为0x9000，设置bx为0x0200，即数据缓冲区为0x9000*10H+0x0200=0x90200    mov  ax,#0x0200+SETUPLEN    ! service 2, nr of sectors SETUPLEN初始设置为4，这里0x0200+4，ah=0x02（读磁盘扇区到内存），al=4（即需要读出4个扇区）。    int     0x13                    ! read it  打开中断    jnc     ok_load_setup              ! ok – continue  jnc指令：如果（上条指令）成功，则跳转，即中断INT 0x13成功，则继续执行ok_load_setup    mov  dx,#0x0000                  !如果不成功，则复位驱动器，并重试（重新跳转函数load_setup）    mov  ax,#0x0000                   ! reset the diskette    int     0x13   j        load_setup</code></pre><blockquote><ol><li><p>INT 0x13的使用方法：<br>ah = 0x20-读磁盘扇区到内存； al = 需要读出的扇区数量；<br>ch=磁道（柱面）号的低8位；  cl =开始扇区（位0-5），磁道号高2位（位6-7）；<br>dh = 磁头号；  dl = 驱动器号；<br>es：bx = 指向数据缓冲区；<br>如果出错则CF标志置位，ah中是出错码。</p></li><li><p>利用BIOS中断0x13取磁盘参数表中当前启动引导盘的参数</p><p>取磁盘驱动器参数，使用INT 0x13中断获得，格式如下：</p><p>AH=0x08 dl=驱动器号</p><p>其返回值为：</p><p>（1） 如果出错则CF置位，ah=状态码</p><p>（2） ah=0，al=0，bl=驱动器类型</p><p>（3） ch=最大磁道号低8位，cl=每磁道最大扇区数（0-5位），最大磁道号高2位（6-7位）</p><p>（4） dh=最大磁头数，dl=驱动器数量</p><p>（5） es:di 软驱磁盘参数表</p><pre class=" language-armasm"><code class="language-armasm">mov      dl,#0x00              !驱动器号为0mov      ax,#0x0800                   ! AH=8，是INT 0x13取磁盘驱动器的参数，AL初始化0，作为返回值int         0x13                    !打开INT 0x13中断mov      ch,#0x00seg cs             !此条指令表示下一条语句的操作数在cs段寄存器所指的段中！软盘的最大磁道号不会超过256，ch返回最大磁道号低8位，已足够表示它，因此cl位6-7肯定为0，而前面语句ch已置0，说明cx的6-15位为0。！那么cx的0-5位会返回每磁道最大扇区数，即此时cx值是每磁道最大扇区数。mov      sectors,cx     … …</code></pre><p>如果想获得磁盘驱动器的参数，那么应该使用INT 0x13中断的返回值获得，设置初始值ah和dl的值，打开中断，即可。这段代码主要还是获得每磁道的扇区数量，保存在了sectors中。</p></li></ol></blockquote><h4 id="屏幕显示“Loading-system…”"><a href="#屏幕显示“Loading-system…”" class="headerlink" title="　   屏幕显示“Loading system…”"></a>　   屏幕显示“Loading system…”</h4><pre class=" language-armasm"><code class="language-armasm">! Print some inane message! 显示信息：“'Loading system ...' 回车”，共显示24个字符! 使用BIOS中断0x10功能号ah=0x03和ah=0x13实现! 请仔细阅读中断的使用! BIOS中断0x10功能号ah=0x03，功能：读光标位置! 输入：bh=页号! 返回：ch=扫描开始线；cl=扫描结束线；dh=行号； dl=列号! BIOS中断0x10功能号ah=0x13，功能：显示字符串! 输入：al=放置光标方式及规定属性。0x01表示使用bl中属性值，光标停在字符串结尾处；!      es:bp 指向要显示的字符串起始位置。 cx=显示字符串个数； bh=显示页面号!      bl=字符属性； dh=行号； dl=页号         mov  ah,#0x03             !读光标         xor    bh,bh                            ! xor代表异或，这条命令将bh置0         int     0x10                    !返回行号和列号，供串口显示         mov  cx,#24                           ! 显示24个字符         mov  bx,#0x0007                  ! bh=0，页=0；bl=7，字符属性=7         mov  bp,#msg1            ! es:bp寄存器指向要显示的字符串         mov  ax,#0x1301                   ! ah=0x13使用中断0x10功能号；al=0x01，使用bl中属性值         int     0x10                    !开中断，串口打印字符串</code></pre><blockquote><p>上面使用中断0x10显示字符，首先使用ah=0x03功能获取光标位置以及行号列号，作为ah=0x13中断的入参；而后使用ah=0x13中断将存在es:bp寄存器的字符串打印在串口屏幕，只要在使用中断时，将输入设定好即可。</p></blockquote><h4 id="把磁盘setup模块后面的system模块加载到内存0x10000"><a href="#把磁盘setup模块后面的system模块加载到内存0x10000" class="headerlink" title="把磁盘setup模块后面的system模块加载到内存0x10000"></a>把磁盘setup模块后面的system模块加载到内存0x10000</h4><pre class=" language-armasm"><code class="language-armasm">SYSSEG = 0x1000…       mov  ax, #SYSSEG           mov  es,ax           ! es寄存器存放system段地址       call    read_it ! 调用read_it函数，读取磁盘上system模块，es为输入参数       …</code></pre><blockquote><p>read_it函数主要实现：</p><p>（1）判断es值是否位于64KB地址边界，否，则进入死循环；</p><p>（2）bx取异或操作，将bx置0，此时es:bx为0x1000:0x0000，即内存0x10000地址；</p><p>（3）通过前面获取的每磁道扇区数，判断读取的扇区个数（system模块所占），即确定需要加载的system模块的开始地址和结束地址；</p><p>（4）从system模块开始地址处读取数据到es:bx，期间不断判断是否读取到结尾处，如果是，则结束读取，否则继续读取。</p></blockquote><h4 id="确定根文件系统设备号并保存其设备号于root-dev"><a href="#确定根文件系统设备号并保存其设备号于root-dev" class="headerlink" title="确定根文件系统设备号并保存其设备号于root_dev"></a>确定根文件系统设备号并保存其设备号于root_dev</h4><pre class=" language-armasm"><code class="language-armasm">! Linux中，软驱的主设备号是2，次设备号=type*4+nr，其中nr为0-3分别对应软驱A、B、C和D；！ type是软驱类型（2->1.2MB或7->1.44MB）。！ 因为7*4+0=28，所以/dev/PS0 (2,28)指1.44MB A驱动器，其设备号是0x021c（2*256+28）！ 同理，/dev/at0 (2,8)值1.2MB A驱动器，设备号是0x0208! 取上面获得的每磁道扇区数，如果sectors=15说明是1.2MB的驱动器；如果sectors=18说明是1.44M软驱（为什么？）；！因为是可引导的驱动器，所以肯定是A驱seg csmov  ax,root_devcmp   ax,#0jne     root_defined    ！检查root_dev是否是空，如果否，则说明其已经存入根设备号，直接跳转后面seg csmov  bx,sectorsmov  ax,#0x0208                   ! /dev/ps0 - 1.2Mbcmp   bx,#15je       root_defined    ！将sectors与15对比，如果相同，则ax=0x0208，最终赋值给root_definedmov  ax,#0x021c                   ! /dev/PS0 - 1.44Mbcmp   bx,#18je       root_defined    ！将sectors与18对比，如果相同，则ax=0x021c，最终赋值给root_definedundef_root:jmp undef_rootroot_defined:seg csmov  root_dev,ax   ！将获取的驱动设备号存入root_devjmpi 0,SETUPSEG ！SETUPSEG=0x9020 //跳转到setup程序开始处（即0x90200）执行setup程序</code></pre><blockquote><p>接下来要确定使用哪个根文件系统设备。开始判断，如果已经指定了设备（！=0），那么就使用给定的设备；否则就使用前面获取的每磁道扇区数来确定到底是使用/dev/PS0 (2,28)还是/dev/at0 (2,8)。但是不清楚“如果sectors=15说明是1.2MB的驱动器；如果sectors=18说明是1.44M软驱”这句话。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机操作系统 </tag>
            
            <tag> Linux内核 </tag>
            
            <tag> 系统启动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传输层 </title>
      <link href="/posts/25310.html"/>
      <url>/posts/25310.html</url>
      
        <content type="html"><![CDATA[<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><h3 id="TCP概述"><a href="#TCP概述" class="headerlink" title="TCP概述"></a>TCP概述</h3><ol><li>点对点</li><li>可靠按序</li><li>流水线机制(TCP拥塞控制和流量控制)</li><li>发送方/接收方缓存</li><li>全双工</li><li>面向连接(只在两端维护连接状态,中间路由不维护)</li><li>流量控制</li></ol><h3 id="段结构"><a href="#段结构" class="headerlink" title="段结构"></a>段结构</h3><p><img src="/medias/loading.gif" data-original="https://gitee.com/Laicize/images/raw/master/img/20200412105142.png" alt=""></p><ol><li>序列号:segment中第一个字节的编号(建立TCP连接随机选择)</li><li>ACKs:希望接收的下一个字节的序列号(累计确认)</li></ol><h3 id="TCP-RTT和超时"><a href="#TCP-RTT和超时" class="headerlink" title="TCP RTT和超时"></a>TCP RTT和超时</h3><p>超时的设定</p><p><img src="/medias/loading.gif" data-original="/home/wang/.config/Typora/typora-user-images/image-20200412110403593.png" alt="image-20200412110403593"></p><blockquote><ol><li>利用统计平均计算RTT,然后加权平均估计网络波动,最后得到超时设定</li></ol></blockquote><h4 id="TCP发送发事件"><a href="#TCP发送发事件" class="headerlink" title="TCP发送发事件"></a>TCP发送发事件</h4><p><img src="/medias/loading.gif" data-original="https://gitee.com/Laicize/images/raw/master/img/20200412110818.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> 网络层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>传输层(上)</title>
      <link href="/posts/23658.html"/>
      <url>/posts/23658.html</url>
      
        <content type="html"><![CDATA[<h2 id="传输层-上"><a href="#传输层-上" class="headerlink" title="传输层(上)"></a>传输层(上)</h2><p>传输层协议:运行在不同主机上进程的逻辑通信机制.</p><blockquote><p>逻辑通信:仿佛直接不同主机的进程之间直接通信,依赖网络层,网络层是主机之间的逻辑通信</p></blockquote><p>常用协议:TCP和UDP协议</p><h3 id="多路复用-分用"><a href="#多路复用-分用" class="headerlink" title="多路复用/分用"></a>多路复用/分用</h3><p>如果某一层的一个协议对应直接上层的多个协议/实体,则需要复用/分用.</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/Laicize/images/raw/master/img/20200405171218.png" alt=""></p><blockquote><p>socket:传输层和应用层之间的’门’</p></blockquote><p><img src="/medias/loading.gif" data-original="https://gitee.com/Laicize/images/raw/master/img/20200405171758.png" alt=""></p><blockquote><p>UDP:只需要源端口号,目的端口号</p><p>TCP:需要源IP,端口号,目的IP.端口号</p></blockquote><h3 id="无线连接传输协议"><a href="#无线连接传输协议" class="headerlink" title="无线连接传输协议"></a>无线连接传输协议</h3><p>UDP:尽力而为,可能丢失,非按序到达</p><ol><li>复用/分用</li><li>简单的错误检测</li></ol><blockquote><p>无连接,延迟短,实现简单,头部开销少,没有拥塞控制.应用可以更好的控制发送时间和速率</p><p>可以在应用层增加可靠性机制</p></blockquote><p><img src="/medias/loading.gif" data-original="https://gitee.com/Laicize/images/raw/master/img/20200405174328.png" alt=""></p><h4 id="UDP的校验-checksum"><a href="#UDP的校验-checksum" class="headerlink" title="UDP的校验(checksum)"></a>UDP的校验(checksum)</h4><p><img src="/medias/loading.gif" data-original="https://gitee.com/Laicize/images/raw/master/img/20200405174604.png" alt=""></p><p>eg:<img src="/medias/loading.gif" data-original="/home/wang/.config/Typora/typora-user-images/image-20200405174814669.png" alt="image-20200405174814669"></p><h3 id="可靠数据传输原理"><a href="#可靠数据传输原理" class="headerlink" title="可靠数据传输原理"></a>可靠数据传输原理</h3><p><img src="/medias/loading.gif" data-original="https://gitee.com/Laicize/images/raw/master/img/20200405175617.png" alt=""></p><blockquote><p>在不可靠的网络层传输信息,需要双向验证</p><p>而应用层与传输层之间可靠的传输,则只需要单向调用</p></blockquote><h3 id="滑动窗口协议-流水线"><a href="#滑动窗口协议-流水线" class="headerlink" title="滑动窗口协议(流水线)"></a>滑动窗口协议(流水线)</h3><p><img src="/medias/loading.gif" data-original="https://gitee.com/Laicize/images/raw/master/img/20200405202928.png" alt=""></p><blockquote><p> 解决停等机制带来的额效率低下问题</p></blockquote><h4 id="Co-Back-N-GBN-协议"><a href="#Co-Back-N-GBN-协议" class="headerlink" title="Co-Back-N(GBN)协议"></a>Co-Back-N(GBN)协议</h4><p>发送方:<img src="/medias/loading.gif" data-original="https://gitee.com/Laicize/images/raw/master/img/20200405203458.png" alt=""></p><blockquote><p>累计确认机制,失败重发一组所有信息,资源浪费</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu18.04打包备份</title>
      <link href="/posts/65245.html"/>
      <url>/posts/65245.html</url>
      
        <content type="html"><![CDATA[<h2 id="备份系统"><a href="#备份系统" class="headerlink" title="备份系统"></a>备份系统</h2><h3 id="清除无用软件"><a href="#清除无用软件" class="headerlink" title="清除无用软件"></a>清除无用软件</h3><pre class=" language-shell"><code class="language-shell"># 清理旧版本的软件缓存sudo apt-get autoclean# 清理所有软件缓存sudo apt-get clean# 删除系统不再使用的孤立软件sudo apt-get autoremove</code></pre><h3 id="备份系统-1"><a href="#备份系统-1" class="headerlink" title="备份系统"></a>备份系统</h3><pre class=" language-shell"><code class="language-shell">#备份前先切换到root用户，避免权限问题$ sudo su再切换到/（根目录）# cd /#备份系统tar -cvpzf /media/Disk/myDisk/ubuntu_boot_backup@`date +%Y-%m-%d`.tar.gz /boottar -cvpzf /media/Disk/myDisk/ubuntu_backup@`date +%Y-%m+%d`.tar.gz --exclude=/proc --exclude=/tmp --exclude=/home --exclude=/lost+found --exclude=/media --exclude=/mnt --exclude=/run -P /</code></pre><h3 id="还原系统"><a href="#还原系统" class="headerlink" title="还原系统"></a>还原系统</h3><pre class=" language-shell"><code class="language-shell">$ sudo su再切换到/（根目录）# cd /还原tar -xvpzf /media/Disk/myDisk/ubuntu_backup@2016-6-6.tar.gz -C /</code></pre><blockquote><p>备份boot/home/root都一样</p><p>也可以使用TimeShift软件,<a href="http://www.wenke.ink/posts/18774.html">参见另一篇博文</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ubuntu18.04 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu18.04 </tag>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的ubuntu18.04必装软件</title>
      <link href="/posts/18774.html"/>
      <url>/posts/18774.html</url>
      
        <content type="html"><![CDATA[<h2 id="先换国内源"><a href="#先换国内源" class="headerlink" title="先换国内源"></a>先换国内源</h2><p>可以在软件和更新中选择源.</p><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><pre class=" language-shell"><code class="language-shell">sudo apt-get install fcitx-bin      #安装fcitx-binsudo apt-get update --fix-missing   #修复fcitx-bin安装失败的情况sudo apt-get install fcitx-bin      #重新安装fcitx-binsudo apt-get install fcitx-table    #安装fcitx-tableim-config</code></pre><h2 id="常用下载工具"><a href="#常用下载工具" class="headerlink" title="常用下载工具"></a>常用下载工具</h2><pre class=" language-shell"><code class="language-shell"># 安装gitsudo apt-get install git# 安装vim/curl/wgetsudo apt install -y vim curl wget#安装并配置aria2sudo apt-get install aria2sudo mkdir /etc/aria2  #新建文件夹sudo touch /etc/aria2/aria2.session   #新建session文件sudo chmod 777 /etc/aria2/aria2.session   #设置aria2.session可写sudo vi /etc/aria2/aria2.conf    #创建并编辑配置文件sudo aria2c --conf-path=/etc/aria2/aria2.conf#开启#安装you-getsudo apt-get install python3-pipsudo pip3 install --upgrade pip pip3 install you-get</code></pre><h4 id="etc-aria2-aria2-conf-的内容"><a href="#etc-aria2-aria2-conf-的内容" class="headerlink" title="/etc/aria2/aria2.conf 的内容"></a>/etc/aria2/aria2.conf 的内容</h4><pre class=" language-shell"><code class="language-shell">##此部分主要分为几部分###1、文件保存#2、下载链接#3、进度保存#4、RPC相关#5、BT\PT下载相关##===================================#### 文件保存相关 ####===================================### 文件保存目录dir=/home/wang/Downloads/aria2/# 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16Mdisk-cache=16M# 断点续传continue=true#日志保存log=aria2.log# 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc# 预分配所需时间: none < falloc ? trunc < prealloc# falloc和trunc则需要文件系统和内核支持# NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项file-allocation=trunc##===================================#### 下载连接相关 ####===================================### 最大同时下载任务数, 运行时可修改, 默认:5max-concurrent-downloads=100# 同一服务器连接数, 添加时可指定, 默认:1# 官方的aria2最高设置为16, 如果需要设置任意数值请重新编译aria2max-connection-per-server=16# 整体下载速度限制, 运行时可修改, 默认:0（不限制）max-overall-download-limit=0# 单个任务下载速度限制, 默认:0（不限制）max-download-limit=0# 整体上传速度限制, 运行时可修改, 默认:0（不限制）max-overall-upload-limit=0# 单个任务上传速度限制, 默认:0（不限制）max-upload-limit=0# 禁用IPv6, 默认:falsedisable-ipv6=false# 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M# 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载min-split-size=10M# 单个任务最大线程数, 添加时可指定, 默认:5# 建议同max-connection-per-server设置为相同值split=16##===================================#### 进度保存相关 ####===================================### 从会话文件中读取下载任务input-file=/etc/aria2/aria2.session# 在Aria2退出时保存错误的、未完成的下载任务到会话文件save-session=/etc/aria2/aria2.session# 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0save-session-interval=60##===================================#### RPC相关设置 ####此部分必须启用，否则无法使用WebUI##===================================### 启用RPC, 默认:falseenable-rpc=true# 允许所有来源, 默认:falserpc-allow-origin-all=true# 允许外部访问, 默认:falserpc-listen-all=true# RPC端口, 仅当默认端口被占用时修改#rpc-listen-port=6800# 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项#rpc-secret=000789456# 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项#rpc-user=wang# 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项#rpc-passwd=<PASSWD># 启动SSL# rpc-secure=true# 证书文件, 如果启用SSL则需要配置证书文件, 例如用https连接aria2# rpc-certificate=# rpc-private-key=##===================================#### BT/PT下载相关 ####===================================### 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:truefollow-torrent=true# BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999listen-port=51413# 单个种子最大连接数, 默认:55#bt-max-peers=55# 打开DHT功能, PT需要禁用, 默认:trueenable-dht=true# 打开IPv6 DHT功能, PT需要禁用enable-dht6=true# DHT网络监听端口, 默认:6881-6999dht-listen-port=6881-6999# 本地节点查找, PT需要禁用, 默认:falsebt-enable-lpd=true# 种子交换, PT需要禁用, 默认:trueenable-peer-exchange=true# 每个种子限速, 对少种的PT很有用, 默认:50Kbt-request-peer-speed-limit=50K# 客户端伪装, PT需要peer-id-prefix=-TR2770-user-agent=Transmission/2.77# 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0seed-ratio=0# 强制保存会话, 即使任务已经完成, 默认:false# 较新的版本开启后会在任务完成后依然保留.aria2文件force-save=true# BT校验相关, 默认:true#bt-hash-check-seed=true# 继续之前的BT任务时, 无需再次校验, 默认:falsebt-seed-unverified=true# 保存磁力链接元数据为种子文件(.torrent文件), 默认:falsebt-save-metadata=true# 单个种子最大连接数, 默认:55 0表示不限制bt-max-peers=0# 最小做种时间, 单位:分# seed-time = 60# 分离做种任务bt-detach-seed-only=true#BT Tracker List ;下载地址：https://github.com/ngosang/trackerslistbt-tracker=udp://tracker.coppersurfer.tk:6969/announce,udp://tracker.internetwarriors.net:1337/announce,udp://tracker.opentrackr.org:1337/announce</code></pre><h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><pre class=" language-shell"><code class="language-shell">sudo apt install zshsh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"# 推荐主题ysvim ~/.zshrc #找到主题修改主题为ys即可ZSH_THEME-"YS"#修改zsh路径export ZSH=''/home/wang/.oh-my-zsh'# 常用别名alias c='clear'alias ls='ls --color=auto'alias ll='ls -la'alias grep='grep --color=auto'alias mkdir='mkdir -pv'alias rm='sudo rm -r'alias chmod='sudo chmod'</code></pre><blockquote><p>注意:别名的=两侧不能有空格,否则报错.</p></blockquote><h3 id="Java-Tomcat-Maven的环境配置"><a href="#Java-Tomcat-Maven的环境配置" class="headerlink" title="Java/Tomcat/Maven的环境配置"></a>Java/Tomcat/Maven的环境配置</h3><pre class=" language-shell"><code class="language-shell">#.zshrc中的配置#set java envexport JAVA_HOME=/usr/lib/jvm/java1.8   export JRE_HOME=${JAVA_HOME}/jre   export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib    export PATH=${JAVA_HOME}/bin:$PATHsource   ~/.zshrc# ~/.bashrc的配置sudo  vim  ~/.bashrc#set java envexport JAVA_HOME=/usr/lib/jvm/java1.8   export JRE_HOME=${JAVA_HOME}/jre   export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib    export PATH=${JAVA_HOME}/bin:$PATH#tomcat的配置sudo chmod 755 -R apache-tomcat-8.5.31sudo vi startup.sh#set java environmentexport JAVA_HOME=/usr/local/jdk1.8export JRE_HOME=${JAVA_HOME}/jreexport CLASSPATH=.:%{JAVA_HOME}/lib:%{JRE_HOME}/libexport PATH=${JAVA_HOME}/bin:$PATH#在.zshrc中添加#tomcatexport TOMCAT_HOME=/usr/local/apache-tomcat-8.5.31#maven的配置sudo vi /etc/profile export M2_HOME=/usr/local/apache-maven-3.5.3export PATH=${M2_HOME}/bin:$PATHsource /etc/profilemvn -v</code></pre><h2 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h2><pre class=" language-shell"><code class="language-shell">sudo add-apt-repository ppa:slimbook/slimbooksudo apt updatesudo apt install slimbookbattery</code></pre><h2 id="垃圾清理"><a href="#垃圾清理" class="headerlink" title="垃圾清理"></a>垃圾清理</h2><pre class=" language-shell"><code class="language-shell">sudo add-apt-repository ppa:oguzhaninan/stacersudo apt-get updatesudo apt-get install stacer</code></pre><blockquote><p>stacer还可以查看内存,软件包,cpu,软件源等信息.</p></blockquote><h2 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h2><pre class=" language-shell"><code class="language-shell">sudo sh -c "echo 'deb http://download.opensuse.org/repositories/home:/manuelschneid3r/xUbuntu_18.04/ /' > /etc/apt/sources.list.d/home:manuelschneid3r.list"wget -nv https://download.opensuse.org/repositories/home:manuelschneid3r/xUbuntu_18.04/Release.key -O Release.keysudo apt-key add - < Release.keysudo apt-get updatesudo apt-get install albert</code></pre><blockquote><p>Albert类似MacOS的聚焦</p></blockquote><h2 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h2><p>贴图镇楼</p><p><img src="/medias/loading.gif" data-original="https://gitee.com/Laicize/images/raw/master/img/a.png" alt=""></p><pre class=" language-shell"><code class="language-shell">＃安装compize及cairo-dack(实现３ｄ效果的dock)，先运行comp[izｅ才可以有３ｄ的效果sudo apt-get install compiz-pluginssudo apt-get install compizconfig-settings-managersudo add-apt-repository ppa:ricotz/dockysudo apt-get updatesudo apt-get install cairo-dock cairo-dock-plug-ins＃安装苹果字体，微软字体直接复制到/usr/share/Fonts下即可git clone https://github.com/cstrap/monaco-fontcd monaco-font./install-font-ubuntu.sh http://www.gringod.com/wp-upload/software/Fonts/Monaco_Linux.ttf</code></pre><blockquote><p>图标，主题优化从gnome主题网站下载，移到相应主题文件夹下即可．</p></blockquote><h2 id="常用的gnome插件"><a href="#常用的gnome插件" class="headerlink" title="常用的gnome插件"></a>常用的gnome插件</h2><ol><li>systerm-monitor:在topbar下显示系统状况</li><li>user thenes:美化主题必用</li><li>Hide top bar:自动隐藏topbar</li><li>Ｃlipboard indicator:剪贴板增强工具</li><li>Ｃoverflow alt-tab:３d切换应用</li></ol><h3 id="预览神器（类似win下的onequick）"><a href="#预览神器（类似win下的onequick）" class="headerlink" title="预览神器（类似win下的onequick）"></a>预览神器（类似win下的onequick）</h3><pre class=" language-shell"><code class="language-shell">sudo apt install gnome-sushi</code></pre><h3 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h3><ol><li><p>浏览器</p><ol><li>google</li><li>火狐</li></ol></li><li><p>音乐</p><ol><li>网易云音乐</li></ol></li><li><p>交际</p><ol><li>QQ(官网或者github找wine版本)</li><li>微信(github的wine版本)</li></ol></li><li><p>备份</p><ol><li>TimeShift</li></ol></li><li><p>翻译</p><ol><li>github的有道词典</li><li>谷歌插件</li></ol></li><li><p>文本编辑</p><ol><li>vim</li><li>Typora</li><li>vscode</li></ol></li><li><p>IDE</p><ol><li><a href="https://blog.jetbrains.com/cn/" target="_blank" rel="noopener">JetBrains</a>,学习邮箱注册,正版免费</li><li>ecplise</li><li>AndroidStudio</li></ol></li><li><p>办公</p><ol><li>wps for linux</li><li>xmind</li></ol></li><li><p>其他下载器</p><ol><li>Motrix</li><li>百度网盘</li></ol></li><li><p>图床工具</p><ol><li>picgo</li></ol></li><li><p>终端</p><ol><li>下拉式终端:guake</li></ol></li><li><p>数据库工具</p><ol><li>navicat</li></ol></li><li><p>截图工具</p><ol><li>shutter</li><li>deepin截图工具(应用商店可以下载)</li></ol></li><li><p>图片处理</p><ol><li>gimp</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> ubuntu18.04 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装机 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git入门之基础操作</title>
      <link href="/posts/41888.html"/>
      <url>/posts/41888.html</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍git工具的一些最基本的操作。</p><a id="more"></a><blockquote><p>首先感谢廖雪峰老师的git讲解，真的很棒，建议每一个想学或了解一下git的朋友，看一下廖老师的讲解。贴个链接<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">git教程</a>,还有本文是在看过廖老师的讲解后，做的一个小笔记，故大多数内容出自廖老师的讲解（主要是为了自己能加深一遍印象）。</p></blockquote><h2 id="git的基本介绍"><a href="#git的基本介绍" class="headerlink" title="ｇit的基本介绍"></a>ｇit的基本介绍</h2><p>git是目前世界上最先进的分布式版本控制系统，简而言之：即是一个工作项目协作及控制的工具，熟练操纵它，你能更好的完成一个项目工作，更好的和别人团队合作。（自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件。）</p><h2 id="git分布式版本控制的介绍"><a href="#git分布式版本控制的介绍" class="headerlink" title="git分布式版本控制的介绍"></a>git分布式版本控制的介绍</h2><p>就是自己的本地电脑上有完整的版本库，可以在任何时候，任何环境下修改工作，不必依赖于网络，在把自己的版本库提交给ｇit服务器后，你的合作者可以从上面克隆你的项目，添加修改后提交给git服务器，这样你们双方都会了解项目的进程。</p><h2 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h2><p>linux的环境</p><pre class=" language-shell"><code class="language-shell">$ sudo apt-get install git</code></pre><p>Ｍac OX环境</p><pre class=" language-shell"><code class="language-shell">Xcode集成的有git 或者参考以下文档　http://brew.sh/</code></pre><p>Ｗindow 环境</p><p>直接从官网下载</p><p>然后进一步设置，在命令行里执行以下命令</p><pre class=" language-shell"><code class="language-shell">$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com"</code></pre><p>注意<code>git config</code>命令的<code>--global</code>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h2 id="版本库的创建"><a href="#版本库的创建" class="headerlink" title="版本库的创建"></a>版本库的创建</h2><p>版本库又名仓库，英文名<strong>repository</strong>，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><p>下面是创建版本库的操作命令</p><p>第一步：创建目录</p><pre class=" language-shell"><code class="language-shell">$ mkdir learngit$ cd learngit$ pwd/Users/michael/learngit</code></pre><p>第二步：初始化为git库</p><pre class=" language-shell"><code class="language-shell">$ git initInitialized empty Git repository in /Users/michael/learngit/.git/</code></pre><p>瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p><p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p><p>现在我们编写一个<code>readme.txt</code>文件，内容如下：(注：win平台下，不要用记事本创建文本文档，编码方式会出问题)</p><pre class=" language-shell"><code class="language-shell">Git is a version control system.Git is free software.</code></pre><p>一定要放到<code>learngit</code>目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件.</p><p>第三步：用命令<code>git add</code>告诉Git，把文件添加到仓库：</p><pre class=" language-shell"><code class="language-shell">$ git add readme.txt</code></pre><p>第四步：用命令<code>git commit</code>告诉Git，把文件提交到仓库：</p><pre class=" language-shell"><code class="language-shell">$ git commit -m "wrote a readme file"[master (root-commit) eaadf4e] wrote a readme file 1 file changed, 2 insertions(+) create mode 100644 readme.txt</code></pre><p>简单解释一下<code>git commit</code>命令，<code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p><p>嫌麻烦不想输入<code>-m &quot;xxx&quot;</code>行不行？确实有办法可以这么干，但是强烈不建议你这么干，因为输入说明对自己对别人阅读都很重要。实在不想输入说明的童鞋请自行Google，我不告诉你这个参数。</p><p><code>git commit</code>命令执行成功后会告诉你，<code>1 file changed</code>：1个文件被改动（我们新添加的readme.txt文件）；<code>2 insertions</code>：插入了两行内容（readme.txt有两行内容）。</p><blockquote><p>git add 　命令后可以加多个文件，git commit 这个命令可以一次提交很多文件</p></blockquote><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>我们已经成功地添加并提交了一个readme.txt文件，现在，是时候继续工作了，于是，我们继续修改readme.txt文件，改成如下内容：</p><pre class=" language-shell"><code class="language-shell">Git is a distributed version control system.Git is free software.</code></pre><p>现在，运行<code>git status</code>命令看看结果:</p><pre class=" language-shell"><code class="language-shell">$ git statusOn branch masterChanges not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git checkout -- <file>..." to discard changes in working directory)    modified:   readme.txtno changes added to commit (use "git add" and/or "git commit -a")</code></pre><p><code>git status</code>命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，<code>readme.txt</code>被修改过了，但还没有准备提交的修改。</p><p>虽然Git告诉我们<code>readme.txt</code>被修改了，但如果能看看具体修改了什么内容，自然是很好的。比如你休假两周从国外回来，第一天上班时，已经记不清上次怎么修改的<code>readme.txt</code>，所以，需要用<code>git diff</code>这个命令看看：</p><pre class=" language-shell"><code class="language-shell">$ git diff readme.txt diff --git a/readme.txt b/readme.txtindex 46d49bf..9247db6 100644--- a/readme.txt+++ b/readme.txt@@ -1,2 +1,2 @@-Git is a version control system.+Git is a distributed version control system. Git is free software.</code></pre><p><code>git diff</code>顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以从上面的命令输出看到，我们在第一行添加了一个<code>distributed</code>单词。</p><p>知道了对<code>readme.txt</code>作了什么修改后，再把它提交到仓库就放心多了，提交修改和提交新文件是一样的两步，第一步是<code>git add</code>：</p><pre class=" language-shell"><code class="language-shell">$ git add readme.txt</code></pre><p>同样没有任何输出。在执行第二步<code>git commit</code>之前，我们再运行<code>git status</code>看看当前仓库的状态：</p><pre class=" language-shell"><code class="language-shell">$ git statusOn branch masterChanges to be committed:  (use "git reset HEAD <file>..." to unstage)    modified:   readme.txt</code></pre><p><code>git status</code>告诉我们，将要被提交的修改包括<code>readme.txt</code>，下一步，就可以放心地提交了：</p><pre class=" language-shell"><code class="language-shell">$ git commit -m "add distributed"[master e475afc] add distributed 1 file changed, 1 insertion(+), 1 deletion(-)</code></pre><p>提交后，我们再用<code>git status</code>命令看看仓库的当前状态:</p><pre class=" language-shell"><code class="language-shell">$ git statusOn branch masternothing to commit, working tree clean</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -git入门 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
